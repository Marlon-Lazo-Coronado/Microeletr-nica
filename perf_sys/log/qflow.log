Starting new log file Thu Jul 15 19:52:22 2021

--------------------------------
Qflow project setup
--------------------------------

Technology set to osu018 from existing qflow_vars.sh file
Regenerating files for existing project area_sys
Running yosys for verilog parsing and synthesis
yosys  -s area_sys.ys

/----------------------------------------------------------------------------\
|                                                                            |
|  yosys -- Yosys Open SYnthesis Suite                                       |
|                                                                            |
|  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
|                                                                            |
|  Permission to use, copy, modify, and/or distribute this software for any  |
|  purpose with or without fee is hereby granted, provided that the above    |
|  copyright notice and this permission notice appear in all copies.         |
|                                                                            |
|  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
|  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
|  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
|  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
|  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
|  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
|  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
|                                                                            |
\----------------------------------------------------------------------------/

Yosys 0.9 (git sha1 1979e0b)


-- Executing script file `area_sys.ys' --

1. Executing Liberty frontend.
Imported 32 cell types from liberty file.

2. Executing Verilog-2005 frontend: /home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v
Parsing Verilog input from `/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v' to AST representation.
Generating RTLIL representation for module `\compare'.
Generating RTLIL representation for module `\validity_reg'.
Generating RTLIL representation for module `\loop_limit'.
Generating RTLIL representation for module `\nonce_gen'.
Generating RTLIL representation for module `\couter'.
Generating RTLIL representation for module `\w_flops'.
Generating RTLIL representation for module `\mux'.
Generating RTLIL representation for module `\mod_x_k'.
Generating RTLIL representation for module `\abc_calculation'.
Generating RTLIL representation for module `\hash_final'.
Generating RTLIL representation for module `\micro_ucr_hash'.
Generating RTLIL representation for module `\area_sys'.
/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:120: Warning: Identifier `\hash_array2_0' is implicitly declared.
/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:122: Warning: Identifier `\hash_array2_1' is implicitly declared.
/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:123: Warning: Identifier `\hash_array2_2' is implicitly declared.
/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:176: Warning: Identifier `\nonce2_first_number' is implicitly declared.
/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:177: Warning: Identifier `\nonce2_second_number' is implicitly declared.
/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:181: Warning: Identifier `\nonce_2_0' is implicitly declared.
/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:182: Warning: Identifier `\nonce_2_1' is implicitly declared.
/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:183: Warning: Identifier `\nonce_2_2' is implicitly declared.
/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:184: Warning: Identifier `\nonce_2_3' is implicitly declared.
Successfully finished Verilog frontend.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \area_sys
Used module:     \loop_limit
Used module:         \compare
Used module:     \validity_reg
Used module:     \micro_ucr_hash
Used module:         \couter
Used module:         \w_flops
Used module:         \mux
Used module:         \abc_calculation
Used module:         \mod_x_k
Used module:         \hash_final
Used module:     \nonce_gen

3.1.2. Executing AST frontend in derive mode using pre-parsed AST for module `\loop_limit'.
Parameter 1 (\LOOP_LIMIT) = 5000
Generating RTLIL representation for module `$paramod\loop_limit\LOOP_LIMIT=5000'.

3.1.3. Analyzing design hierarchy..
Top module:  \area_sys
Used module:     $paramod\loop_limit\LOOP_LIMIT=5000
Used module:         \compare
Used module:     \validity_reg
Used module:     \micro_ucr_hash
Used module:         \couter
Used module:         \w_flops
Used module:         \mux
Used module:         \abc_calculation
Used module:         \mod_x_k
Used module:         \hash_final
Used module:     \nonce_gen

3.1.4. Analyzing design hierarchy..
Top module:  \area_sys
Used module:     $paramod\loop_limit\LOOP_LIMIT=5000
Used module:         \compare
Used module:     \validity_reg
Used module:     \micro_ucr_hash
Used module:         \couter
Used module:         \w_flops
Used module:         \mux
Used module:         \abc_calculation
Used module:         \mod_x_k
Used module:         \hash_final
Used module:     \nonce_gen
Removing unused module `\loop_limit'.
Removed 1 unused modules.
Warning: Resizing cell port area_sys.compare_hash_1.number0 from 1 bits to 16 bits.
Warning: Resizing cell port area_sys.compare_hash_0.number0 from 1 bits to 16 bits.
Warning: Resizing cell port area_sys.micro.hash_array2 from 1 bits to 8 bits.
Warning: Resizing cell port area_sys.micro.hash_array1 from 1 bits to 8 bits.
Warning: Resizing cell port area_sys.micro.hash_array0 from 1 bits to 8 bits.
Warning: Resizing cell port area_sys.micro.array_numbers15 from 1 bits to 8 bits.
Warning: Resizing cell port area_sys.micro.array_numbers14 from 1 bits to 8 bits.
Warning: Resizing cell port area_sys.micro.array_numbers13 from 1 bits to 8 bits.
Warning: Resizing cell port area_sys.micro.array_numbers12 from 1 bits to 8 bits.
Warning: Resizing cell port area_sys.nonce.nonce_array3 from 1 bits to 8 bits.
Warning: Resizing cell port area_sys.nonce.nonce_array2 from 1 bits to 8 bits.
Warning: Resizing cell port area_sys.nonce.nonce_array1 from 1 bits to 8 bits.
Warning: Resizing cell port area_sys.nonce.nonce_array0 from 1 bits to 8 bits.
Warning: Resizing cell port area_sys.nonce.source1 from 1 bits to 8 bits.
Warning: Resizing cell port area_sys.nonce.source0 from 1 bits to 8 bits.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 8 switch rules as full_case in process $proc$/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:80$211 in module area_sys.
Marked 2 switch rules as full_case in process $proc$Library.v:462$203 in module hash_final.
Marked 3 switch rules as full_case in process $proc$Library.v:346$95 in module abc_calculation.
Marked 2 switch rules as full_case in process $proc$Library.v:255$88 in module mod_x_k.
Marked 1 switch rules as full_case in process $proc$Library.v:199$86 in module mux.
Marked 1 switch rules as full_case in process $proc$Library.v:188$84 in module mux.
Marked 17 switch rules as full_case in process $proc$Library.v:73$33 in module w_flops.
Marked 3 switch rules as full_case in process $proc$Library.v:16$27 in module couter.
Marked 5 switch rules as full_case in process $proc$nonce_gen.v:24$13 in module nonce_gen.
Marked 4 switch rules as full_case in process $proc$loop_limit.v:19$229 in module $paramod\loop_limit\LOOP_LIMIT=5000.
Marked 2 switch rules as full_case in process $proc$validity_reg.v:14$4 in module validity_reg.
Marked 2 switch rules as full_case in process $proc$compare.v:13$1 in module compare.
Removed a total of 0 dead cases.

3.2.3. Executing PROC_INIT pass (extract init attributes).

3.2.4. Executing PROC_ARST pass (detect async resets in processes).

3.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\area_sys.$proc$/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:80$211'.
1/16: $0\invalid_nonce[0:0]
2/16: $0\counter1[7:0]
3/16: $0\counter0[7:0]
4/16: $0\nonce_ready[0:0]
5/16: $0\nonce0_second_number[7:0]
6/16: $0\nonce0_first_number[7:0]
7/16: $0\loop_variable[15:0]
8/16: $0\finish[0:0]
9/16: $0\nonce3[7:0]
10/16: $0\nonce2[7:0]
11/16: $0\nonce1[7:0]
12/16: $0\nonce0[7:0]
13/16: $0\counter[7:0]
14/16: $0\ready[0:0]
15/16: $0\stop[0:0]
16/16: $0\validity_reg[0:0]
Creating decoders for process `\hash_final.$proc$Library.v:462$203'.
1/4: $0\flag[0:0]
2/4: $0\out_hash2[7:0]
3/4: $0\out_hash1[7:0]
4/4: $0\out_hash0[7:0]
Creating decoders for process `\abc_calculation.$proc$Library.v:346$95'.
1/8: $3\out_logic_final[23:0] [23:16]
2/8: $3\out_logic_final[23:0] [7:0]
3/8: $3\out_logic_final[23:0] [15:8]
4/8: $2\out_logic_final[23:0] [23:16]
5/8: $2\out_logic_final[23:0] [7:0]
6/8: $2\out_logic_final[23:0] [15:8]
7/8: $1\out_logic_final[23:0]
8/8: $0\out_logic_final[23:0]
Creating decoders for process `\abc_calculation.$proc$Library.v:338$94'.
1/3: $0\c[7:0]
2/3: $0\b[7:0]
3/3: $0\a[7:0]
Creating decoders for process `\mod_x_k.$proc$Library.v:255$88'.
1/4: $0\b[7:0]
2/4: $0\k[7:0]
3/4: $0\x[7:0]
4/4: $0\a[7:0]
Creating decoders for process `\mux.$proc$Library.v:199$86'.
1/3: $0\out_abc_mem[23:0] [23:16]
2/3: $0\out_abc_mem[23:0] [15:8]
3/3: $0\out_abc_mem[23:0] [7:0]
Creating decoders for process `\mux.$proc$Library.v:188$84'.
1/4: $1\abc[23:0] [23:16]
2/4: $1\abc[23:0] [15:8]
3/4: $1\abc[23:0] [7:0]
4/4: $0\abc[23:0]
Creating decoders for process `\w_flops.$proc$Library.v:73$33'.
1/17: $0\out_W2[127:0] [127:120]
2/17: $0\out_W2[127:0] [111:104]
3/17: $0\out_W2[127:0] [103:96]
4/17: $0\out_W2[127:0] [95:88]
5/17: $0\out_W2[127:0] [87:80]
6/17: $0\out_W2[127:0] [79:72]
7/17: $0\out_W2[127:0] [71:64]
8/17: $0\out_W2[127:0] [63:56]
9/17: $0\out_W2[127:0] [55:48]
10/17: $0\out_W2[127:0] [47:40]
11/17: $0\out_W2[127:0] [39:32]
12/17: $0\out_W2[127:0] [31:24]
13/17: $0\out_W2[127:0] [23:16]
14/17: $0\out_W2[127:0] [15:8]
15/17: $0\out_W2[127:0] [7:0]
16/17: $0\out_W2[127:0] [119:112]
17/17: $0\out_mem_w2[127:0]
Creating decoders for process `\couter.$proc$Library.v:16$27'.
1/1: $0\out_cont[4:0]
Creating decoders for process `\nonce_gen.$proc$nonce_gen.v:24$13'.
1/9: $0\nonce_int_3[7:0]
2/9: $0\nonce_int_2[7:0]
3/9: $0\nonce_int_1[7:0]
4/9: $0\nonce_array1[7:0]
5/9: $0\nonce_array0[7:0]
6/9: $0\nonce_int_0[7:0]
7/9: $0\nonce_array3[7:0]
8/9: $0\nonce_array2[7:0]
9/9: $0\delay[0:0]
Creating decoders for process `$paramod\loop_limit\LOOP_LIMIT=5000.$proc$loop_limit.v:19$229'.
1/3: $0\current_loop_actualize[15:0]
2/3: $0\loop_limit[15:0]
3/3: $0\fail[0:0]
Creating decoders for process `\validity_reg.$proc$validity_reg.v:14$4'.
1/1: $0\validity_reg[0:0]
Creating decoders for process `\compare.$proc$compare.v:13$1'.
1/1: $0\compare_var[2:0]

3.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\abc_calculation.\a' from process `\abc_calculation.$proc$Library.v:338$94'.
No latch inferred for signal `\abc_calculation.\b' from process `\abc_calculation.$proc$Library.v:338$94'.
No latch inferred for signal `\abc_calculation.\c' from process `\abc_calculation.$proc$Library.v:338$94'.
No latch inferred for signal `\mux.\abc' from process `\mux.$proc$Library.v:188$84'.

3.2.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\area_sys.\validity_reg' using process `\area_sys.$proc$/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:80$211'.
created $dff cell `$procdff$936' with positive edge clock.
Creating register for signal `\area_sys.\stop' using process `\area_sys.$proc$/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:80$211'.
created $dff cell `$procdff$937' with positive edge clock.
Creating register for signal `\area_sys.\ready' using process `\area_sys.$proc$/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:80$211'.
created $dff cell `$procdff$938' with positive edge clock.
Creating register for signal `\area_sys.\counter' using process `\area_sys.$proc$/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:80$211'.
created $dff cell `$procdff$939' with positive edge clock.
Creating register for signal `\area_sys.\nonce0' using process `\area_sys.$proc$/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:80$211'.
created $dff cell `$procdff$940' with positive edge clock.
Creating register for signal `\area_sys.\nonce1' using process `\area_sys.$proc$/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:80$211'.
created $dff cell `$procdff$941' with positive edge clock.
Creating register for signal `\area_sys.\nonce2' using process `\area_sys.$proc$/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:80$211'.
created $dff cell `$procdff$942' with positive edge clock.
Creating register for signal `\area_sys.\nonce3' using process `\area_sys.$proc$/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:80$211'.
created $dff cell `$procdff$943' with positive edge clock.
Creating register for signal `\area_sys.\finish' using process `\area_sys.$proc$/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:80$211'.
created $dff cell `$procdff$944' with positive edge clock.
Creating register for signal `\area_sys.\loop_variable' using process `\area_sys.$proc$/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:80$211'.
created $dff cell `$procdff$945' with positive edge clock.
Creating register for signal `\area_sys.\nonce0_first_number' using process `\area_sys.$proc$/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:80$211'.
created $dff cell `$procdff$946' with positive edge clock.
Creating register for signal `\area_sys.\nonce0_second_number' using process `\area_sys.$proc$/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:80$211'.
created $dff cell `$procdff$947' with positive edge clock.
Creating register for signal `\area_sys.\nonce_ready' using process `\area_sys.$proc$/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:80$211'.
created $dff cell `$procdff$948' with positive edge clock.
Creating register for signal `\area_sys.\counter0' using process `\area_sys.$proc$/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:80$211'.
created $dff cell `$procdff$949' with positive edge clock.
Creating register for signal `\area_sys.\counter1' using process `\area_sys.$proc$/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:80$211'.
created $dff cell `$procdff$950' with positive edge clock.
Creating register for signal `\area_sys.\invalid_nonce' using process `\area_sys.$proc$/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:80$211'.
created $dff cell `$procdff$951' with positive edge clock.
Creating register for signal `\hash_final.\out_hash0' using process `\hash_final.$proc$Library.v:462$203'.
created $dff cell `$procdff$952' with positive edge clock.
Creating register for signal `\hash_final.\out_hash1' using process `\hash_final.$proc$Library.v:462$203'.
created $dff cell `$procdff$953' with positive edge clock.
Creating register for signal `\hash_final.\out_hash2' using process `\hash_final.$proc$Library.v:462$203'.
created $dff cell `$procdff$954' with positive edge clock.
Creating register for signal `\hash_final.\flag' using process `\hash_final.$proc$Library.v:462$203'.
created $dff cell `$procdff$955' with positive edge clock.
Creating register for signal `\abc_calculation.\out_logic_final' using process `\abc_calculation.$proc$Library.v:346$95'.
created $dff cell `$procdff$956' with positive edge clock.
Creating register for signal `\mod_x_k.\a' using process `\mod_x_k.$proc$Library.v:255$88'.
created $dff cell `$procdff$957' with positive edge clock.
Creating register for signal `\mod_x_k.\x' using process `\mod_x_k.$proc$Library.v:255$88'.
created $dff cell `$procdff$958' with positive edge clock.
Creating register for signal `\mod_x_k.\k' using process `\mod_x_k.$proc$Library.v:255$88'.
created $dff cell `$procdff$959' with positive edge clock.
Creating register for signal `\mod_x_k.\b' using process `\mod_x_k.$proc$Library.v:255$88'.
created $dff cell `$procdff$960' with positive edge clock.
Creating register for signal `\mux.\out_abc_mem' using process `\mux.$proc$Library.v:199$86'.
created $dff cell `$procdff$961' with positive edge clock.
Creating register for signal `\w_flops.\out_W2' using process `\w_flops.$proc$Library.v:73$33'.
created $dff cell `$procdff$962' with positive edge clock.
Creating register for signal `\w_flops.\out_mem_w2' using process `\w_flops.$proc$Library.v:73$33'.
created $dff cell `$procdff$963' with positive edge clock.
Creating register for signal `\couter.\out_cont' using process `\couter.$proc$Library.v:16$27'.
created $dff cell `$procdff$964' with positive edge clock.
Creating register for signal `\nonce_gen.\delay' using process `\nonce_gen.$proc$nonce_gen.v:24$13'.
created $dff cell `$procdff$965' with positive edge clock.
Creating register for signal `\nonce_gen.\nonce_array2' using process `\nonce_gen.$proc$nonce_gen.v:24$13'.
created $dff cell `$procdff$966' with positive edge clock.
Creating register for signal `\nonce_gen.\nonce_array3' using process `\nonce_gen.$proc$nonce_gen.v:24$13'.
created $dff cell `$procdff$967' with positive edge clock.
Creating register for signal `\nonce_gen.\nonce_int_0' using process `\nonce_gen.$proc$nonce_gen.v:24$13'.
created $dff cell `$procdff$968' with positive edge clock.
Creating register for signal `\nonce_gen.\nonce_array0' using process `\nonce_gen.$proc$nonce_gen.v:24$13'.
created $dff cell `$procdff$969' with positive edge clock.
Creating register for signal `\nonce_gen.\nonce_array1' using process `\nonce_gen.$proc$nonce_gen.v:24$13'.
created $dff cell `$procdff$970' with positive edge clock.
Creating register for signal `\nonce_gen.\nonce_int_1' using process `\nonce_gen.$proc$nonce_gen.v:24$13'.
created $dff cell `$procdff$971' with positive edge clock.
Creating register for signal `\nonce_gen.\nonce_int_2' using process `\nonce_gen.$proc$nonce_gen.v:24$13'.
created $dff cell `$procdff$972' with positive edge clock.
Creating register for signal `\nonce_gen.\nonce_int_3' using process `\nonce_gen.$proc$nonce_gen.v:24$13'.
created $dff cell `$procdff$973' with positive edge clock.
Creating register for signal `$paramod\loop_limit\LOOP_LIMIT=5000.\fail' using process `$paramod\loop_limit\LOOP_LIMIT=5000.$proc$loop_limit.v:19$229'.
created $dff cell `$procdff$974' with positive edge clock.
Creating register for signal `$paramod\loop_limit\LOOP_LIMIT=5000.\loop_limit' using process `$paramod\loop_limit\LOOP_LIMIT=5000.$proc$loop_limit.v:19$229'.
created $dff cell `$procdff$975' with positive edge clock.
Creating register for signal `$paramod\loop_limit\LOOP_LIMIT=5000.\current_loop_actualize' using process `$paramod\loop_limit\LOOP_LIMIT=5000.$proc$loop_limit.v:19$229'.
created $dff cell `$procdff$976' with positive edge clock.
Creating register for signal `\validity_reg.\validity_reg' using process `\validity_reg.$proc$validity_reg.v:14$4'.
created $dff cell `$procdff$977' with positive edge clock.
Creating register for signal `\compare.\compare_var' using process `\compare.$proc$compare.v:13$1'.
created $dff cell `$procdff$978' with positive edge clock.

3.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 10 empty switches in `\area_sys.$proc$/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:80$211'.
Removing empty process `area_sys.$proc$/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:80$211'.
Found and cleaned up 3 empty switches in `\hash_final.$proc$Library.v:462$203'.
Removing empty process `hash_final.$proc$Library.v:462$203'.
Found and cleaned up 35 empty switches in `\abc_calculation.$proc$Library.v:346$95'.
Removing empty process `abc_calculation.$proc$Library.v:346$95'.
Removing empty process `abc_calculation.$proc$Library.v:338$94'.
Found and cleaned up 3 empty switches in `\mod_x_k.$proc$Library.v:255$88'.
Removing empty process `mod_x_k.$proc$Library.v:255$88'.
Found and cleaned up 1 empty switch in `\mux.$proc$Library.v:199$86'.
Removing empty process `mux.$proc$Library.v:199$86'.
Found and cleaned up 1 empty switch in `\mux.$proc$Library.v:188$84'.
Removing empty process `mux.$proc$Library.v:188$84'.
Found and cleaned up 18 empty switches in `\w_flops.$proc$Library.v:73$33'.
Removing empty process `w_flops.$proc$Library.v:73$33'.
Found and cleaned up 4 empty switches in `\couter.$proc$Library.v:16$27'.
Removing empty process `couter.$proc$Library.v:16$27'.
Found and cleaned up 6 empty switches in `\nonce_gen.$proc$nonce_gen.v:24$13'.
Removing empty process `nonce_gen.$proc$nonce_gen.v:24$13'.
Found and cleaned up 4 empty switches in `$paramod\loop_limit\LOOP_LIMIT=5000.$proc$loop_limit.v:19$229'.
Removing empty process `$paramod\loop_limit\LOOP_LIMIT=5000.$proc$loop_limit.v:19$229'.
Found and cleaned up 2 empty switches in `\validity_reg.$proc$validity_reg.v:14$4'.
Removing empty process `validity_reg.$proc$validity_reg.v:14$4'.
Found and cleaned up 3 empty switches in `\compare.$proc$compare.v:13$1'.
Removing empty process `compare.$proc$compare.v:13$1'.
Cleaned up 90 empty switches.

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module area_sys.
<suppressed ~11 debug messages>
Optimizing module micro_ucr_hash.
Optimizing module hash_final.
<suppressed ~5 debug messages>
Optimizing module abc_calculation.
<suppressed ~12 debug messages>
Optimizing module mod_x_k.
<suppressed ~1 debug messages>
Optimizing module mux.
<suppressed ~5 debug messages>
Optimizing module w_flops.
<suppressed ~2 debug messages>
Optimizing module couter.
<suppressed ~2 debug messages>
Optimizing module nonce_gen.
<suppressed ~13 debug messages>
Optimizing module $paramod\loop_limit\LOOP_LIMIT=5000.
<suppressed ~3 debug messages>
Optimizing module validity_reg.
Optimizing module compare.

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \area_sys..
Finding unused cells or wires in module \micro_ucr_hash..
Finding unused cells or wires in module \hash_final..
Finding unused cells or wires in module \abc_calculation..
Finding unused cells or wires in module \mod_x_k..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \w_flops..
Finding unused cells or wires in module \couter..
Finding unused cells or wires in module \nonce_gen..
Finding unused cells or wires in module $paramod\loop_limit\LOOP_LIMIT=5000..
Finding unused cells or wires in module \validity_reg..
Finding unused cells or wires in module \compare..
Removed 38 unused cells and 372 unused wires.
<suppressed ~72 debug messages>

3.5. Executing CHECK pass (checking for obvious problems).
checking module $paramod\loop_limit\LOOP_LIMIT=5000..
checking module abc_calculation..
checking module area_sys..
Warning: Wire area_sys.\nonce2_second_number is used but has no driver.
Warning: Wire area_sys.\nonce2_first_number is used but has no driver.
checking module compare..
checking module couter..
checking module hash_final..
checking module micro_ucr_hash..
checking module mod_x_k..
checking module mux..
checking module nonce_gen..
checking module validity_reg..
checking module w_flops..
found and reported 2 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\loop_limit\LOOP_LIMIT=5000.
Optimizing module abc_calculation.
Optimizing module area_sys.
Optimizing module compare.
Optimizing module couter.
Optimizing module hash_final.
Optimizing module micro_ucr_hash.
Optimizing module mod_x_k.
Optimizing module mux.
Optimizing module nonce_gen.
Optimizing module validity_reg.
Optimizing module w_flops.

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\loop_limit\LOOP_LIMIT=5000'.
Finding identical cells in module `\abc_calculation'.
<suppressed ~99 debug messages>
Finding identical cells in module `\area_sys'.
<suppressed ~9 debug messages>
Finding identical cells in module `\compare'.
Finding identical cells in module `\couter'.
Finding identical cells in module `\hash_final'.
Finding identical cells in module `\micro_ucr_hash'.
Finding identical cells in module `\mod_x_k'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\nonce_gen'.
<suppressed ~72 debug messages>
Finding identical cells in module `\validity_reg'.
Finding identical cells in module `\w_flops'.
Removed a total of 60 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\loop_limit\LOOP_LIMIT=5000..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \abc_calculation..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
dead port 1/2 on $mux $procmux$468.
dead port 2/2 on $mux $procmux$471.
dead port 1/2 on $mux $procmux$479.
dead port 2/2 on $mux $procmux$482.
dead port 1/2 on $mux $procmux$490.
dead port 2/2 on $mux $procmux$493.
dead port 2/2 on $mux $procmux$531.
dead port 2/2 on $mux $procmux$537.
dead port 2/2 on $mux $procmux$543.
Running muxtree optimizer on module \area_sys..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \compare..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \couter..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \hash_final..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \micro_ucr_hash..
Creating internal representation of mux trees.
No muxes found in this module.
Running muxtree optimizer on module \mod_x_k..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \mux..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
dead port 2/2 on $mux $procmux$580.
dead port 2/2 on $mux $procmux$583.
dead port 2/2 on $mux $procmux$586.
Running muxtree optimizer on module \nonce_gen..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \validity_reg..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \w_flops..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 12 multiplexer ports.
<suppressed ~56 debug messages>

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module $paramod\loop_limit\LOOP_LIMIT=5000.
Optimizing cells in module \abc_calculation.
Optimizing cells in module \area_sys.
Optimizing cells in module \compare.
Optimizing cells in module \couter.
Optimizing cells in module \hash_final.
Optimizing cells in module \micro_ucr_hash.
Optimizing cells in module \mod_x_k.
Optimizing cells in module \mux.
Optimizing cells in module \nonce_gen.
Optimizing cells in module \validity_reg.
Optimizing cells in module \w_flops.
Performed a total of 0 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\loop_limit\LOOP_LIMIT=5000'.
Finding identical cells in module `\abc_calculation'.
Finding identical cells in module `\area_sys'.
Finding identical cells in module `\compare'.
Finding identical cells in module `\couter'.
Finding identical cells in module `\hash_final'.
Finding identical cells in module `\micro_ucr_hash'.
Finding identical cells in module `\mod_x_k'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\nonce_gen'.
<suppressed ~18 debug messages>
Finding identical cells in module `\validity_reg'.
Finding identical cells in module `\w_flops'.
Removed a total of 6 cells.

3.6.6. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $procdff$948 ($dff) from module area_sys.
Removing $procdff$963 ($dff) from module w_flops.
Replaced 2 DFF cells.

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\loop_limit\LOOP_LIMIT=5000..
Finding unused cells or wires in module \abc_calculation..
Finding unused cells or wires in module \area_sys..
Finding unused cells or wires in module \compare..
Finding unused cells or wires in module \couter..
Finding unused cells or wires in module \hash_final..
Finding unused cells or wires in module \micro_ucr_hash..
Finding unused cells or wires in module \mod_x_k..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \nonce_gen..
Finding unused cells or wires in module \validity_reg..
Finding unused cells or wires in module \w_flops..
Removed 2 unused cells and 77 unused wires.
<suppressed ~6 debug messages>

3.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\loop_limit\LOOP_LIMIT=5000.
Optimizing module abc_calculation.
Optimizing module area_sys.
<suppressed ~2 debug messages>
Optimizing module compare.
Optimizing module couter.
Optimizing module hash_final.
Optimizing module micro_ucr_hash.
Optimizing module mod_x_k.
Optimizing module mux.
Optimizing module nonce_gen.
Optimizing module validity_reg.
Optimizing module w_flops.
<suppressed ~28 debug messages>

3.6.9. Rerunning OPT passes. (Maybe there is more to do..)

3.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\loop_limit\LOOP_LIMIT=5000..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \abc_calculation..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \area_sys..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \compare..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \couter..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \hash_final..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \micro_ucr_hash..
Creating internal representation of mux trees.
No muxes found in this module.
Running muxtree optimizer on module \mod_x_k..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \mux..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \nonce_gen..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \validity_reg..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \w_flops..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~59 debug messages>

3.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module $paramod\loop_limit\LOOP_LIMIT=5000.
Optimizing cells in module \abc_calculation.
Optimizing cells in module \area_sys.
Optimizing cells in module \compare.
Optimizing cells in module \couter.
Optimizing cells in module \hash_final.
Optimizing cells in module \micro_ucr_hash.
Optimizing cells in module \mod_x_k.
Optimizing cells in module \mux.
Optimizing cells in module \nonce_gen.
Optimizing cells in module \validity_reg.
Optimizing cells in module \w_flops.
Performed a total of 0 changes.

3.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\loop_limit\LOOP_LIMIT=5000'.
Finding identical cells in module `\abc_calculation'.
Finding identical cells in module `\area_sys'.
Finding identical cells in module `\compare'.
Finding identical cells in module `\couter'.
Finding identical cells in module `\hash_final'.
Finding identical cells in module `\micro_ucr_hash'.
Finding identical cells in module `\mod_x_k'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\nonce_gen'.
Finding identical cells in module `\validity_reg'.
Finding identical cells in module `\w_flops'.
<suppressed ~15 debug messages>
Removed a total of 5 cells.

3.6.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\loop_limit\LOOP_LIMIT=5000..
Finding unused cells or wires in module \abc_calculation..
Finding unused cells or wires in module \area_sys..
Finding unused cells or wires in module \compare..
Finding unused cells or wires in module \couter..
Finding unused cells or wires in module \hash_final..
Finding unused cells or wires in module \micro_ucr_hash..
Finding unused cells or wires in module \mod_x_k..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \nonce_gen..
Finding unused cells or wires in module \validity_reg..
Finding unused cells or wires in module \w_flops..
Removed 0 unused cells and 22 unused wires.
<suppressed ~9 debug messages>

3.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\loop_limit\LOOP_LIMIT=5000.
Optimizing module abc_calculation.
Optimizing module area_sys.
Optimizing module compare.
Optimizing module couter.
Optimizing module hash_final.
Optimizing module micro_ucr_hash.
Optimizing module mod_x_k.
Optimizing module mux.
Optimizing module nonce_gen.
Optimizing module validity_reg.
Optimizing module w_flops.

3.6.16. Rerunning OPT passes. (Maybe there is more to do..)

3.6.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\loop_limit\LOOP_LIMIT=5000..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \abc_calculation..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \area_sys..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \compare..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \couter..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \hash_final..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \micro_ucr_hash..
Creating internal representation of mux trees.
No muxes found in this module.
Running muxtree optimizer on module \mod_x_k..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \mux..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \nonce_gen..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \validity_reg..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \w_flops..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~59 debug messages>

3.6.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module $paramod\loop_limit\LOOP_LIMIT=5000.
Optimizing cells in module \abc_calculation.
Optimizing cells in module \area_sys.
Optimizing cells in module \compare.
Optimizing cells in module \couter.
Optimizing cells in module \hash_final.
Optimizing cells in module \micro_ucr_hash.
Optimizing cells in module \mod_x_k.
Optimizing cells in module \mux.
Optimizing cells in module \nonce_gen.
Optimizing cells in module \validity_reg.
Optimizing cells in module \w_flops.
Performed a total of 0 changes.

3.6.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\loop_limit\LOOP_LIMIT=5000'.
Finding identical cells in module `\abc_calculation'.
Finding identical cells in module `\area_sys'.
Finding identical cells in module `\compare'.
Finding identical cells in module `\couter'.
Finding identical cells in module `\hash_final'.
Finding identical cells in module `\micro_ucr_hash'.
Finding identical cells in module `\mod_x_k'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\nonce_gen'.
Finding identical cells in module `\validity_reg'.
Finding identical cells in module `\w_flops'.
Removed a total of 0 cells.

3.6.20. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\loop_limit\LOOP_LIMIT=5000..
Finding unused cells or wires in module \abc_calculation..
Finding unused cells or wires in module \area_sys..
Finding unused cells or wires in module \compare..
Finding unused cells or wires in module \couter..
Finding unused cells or wires in module \hash_final..
Finding unused cells or wires in module \micro_ucr_hash..
Finding unused cells or wires in module \mod_x_k..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \nonce_gen..
Finding unused cells or wires in module \validity_reg..
Finding unused cells or wires in module \w_flops..

3.6.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\loop_limit\LOOP_LIMIT=5000.
Optimizing module abc_calculation.
Optimizing module area_sys.
Optimizing module compare.
Optimizing module couter.
Optimizing module hash_final.
Optimizing module micro_ucr_hash.
Optimizing module mod_x_k.
Optimizing module mux.
Optimizing module nonce_gen.
Optimizing module validity_reg.
Optimizing module w_flops.

3.6.23. Finished OPT passes. (There is nothing left to do.)

3.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 2 bits (of 3) from port B of cell $paramod\loop_limit\LOOP_LIMIT=5000.$eq$loop_limit.v:31$232 ($eq).
Removed top 1 bits (of 3) from port B of cell $paramod\loop_limit\LOOP_LIMIT=5000.$eq$loop_limit.v:31$233 ($eq).
Removed top 31 bits (of 32) from port B of cell $paramod\loop_limit\LOOP_LIMIT=5000.$add$loop_limit.v:32$235 ($add).
Removed top 16 bits (of 32) from port Y of cell $paramod\loop_limit\LOOP_LIMIT=5000.$add$loop_limit.v:32$235 ($add).
Removed top 16 bits (of 32) from wire $paramod\loop_limit\LOOP_LIMIT=5000.$add$loop_limit.v:32$235_Y.
Removed top 28 bits (of 32) from port B of cell abc_calculation.$le$Library.v:357$97 ($le).
Removed top 4 bits (of 5) from port B of cell abc_calculation.$eq$Library.v:362$103 ($eq).
Removed top 3 bits (of 5) from port B of cell abc_calculation.$eq$Library.v:363$106 ($eq).
Removed top 3 bits (of 5) from port B of cell abc_calculation.$eq$Library.v:364$109 ($eq).
Removed top 2 bits (of 5) from port B of cell abc_calculation.$eq$Library.v:365$112 ($eq).
Removed top 2 bits (of 5) from port B of cell abc_calculation.$eq$Library.v:366$115 ($eq).
Removed top 2 bits (of 5) from port B of cell abc_calculation.$eq$Library.v:367$118 ($eq).
Removed top 2 bits (of 5) from port B of cell abc_calculation.$eq$Library.v:368$121 ($eq).
Removed top 1 bits (of 5) from port B of cell abc_calculation.$eq$Library.v:369$124 ($eq).
Removed top 1 bits (of 5) from port B of cell abc_calculation.$eq$Library.v:370$127 ($eq).
Removed top 1 bits (of 5) from port B of cell abc_calculation.$eq$Library.v:371$130 ($eq).
Removed top 1 bits (of 5) from port B of cell abc_calculation.$eq$Library.v:372$133 ($eq).
Removed top 1 bits (of 5) from port B of cell abc_calculation.$eq$Library.v:373$136 ($eq).
Removed top 1 bits (of 5) from port B of cell abc_calculation.$eq$Library.v:374$139 ($eq).
Removed top 1 bits (of 5) from port B of cell abc_calculation.$eq$Library.v:375$142 ($eq).
Removed top 1 bits (of 5) from port B of cell abc_calculation.$eq$Library.v:376$145 ($eq).
Removed top 27 bits (of 32) from port B of cell abc_calculation.$ge$Library.v:387$153 ($ge).
Removed top 27 bits (of 32) from port B of cell abc_calculation.$le$Library.v:387$154 ($le).
Removed top 31 bits (of 32) from port B of cell area_sys.$add$/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:83$212 ($add).
Removed top 24 bits (of 32) from port Y of cell area_sys.$add$/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:83$212 ($add).
Removed top 4 bits (of 8) from port B of cell area_sys.$eq$/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:84$213 ($eq).
Removed top 7 bits (of 8) from port A of cell area_sys.$not$/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:120$226 ($not).
Removed top 31 bits (of 32) from port A of cell area_sys.$procmux$306_CMP0 ($eq).
Removed top 31 bits (of 32) from port B of cell area_sys.$procmux$306_CMP0 ($eq).
Removed top 24 bits (of 32) from wire area_sys.$add$/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:83$212_Y.
Removed top 31 bits (of 32) from wire area_sys.$logic_and$/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:89$218_Y.
Removed top 31 bits (of 32) from port B of cell couter.$add$Library.v:20$31 ($add).
Removed top 27 bits (of 32) from port Y of cell couter.$add$Library.v:20$31 ($add).
Removed top 27 bits (of 32) from port B of cell couter.$lt$Library.v:19$30 ($lt).
Removed top 27 bits (of 32) from wire couter.$add$Library.v:20$31_Y.
Removed top 7 bits (of 8) from port B of cell hash_final.$add$Library.v:493$207 ($add).
Removed top 27 bits (of 32) from port B of cell hash_final.$lt$Library.v:499$210 ($lt).
Removed top 27 bits (of 32) from port B of cell mod_x_k.$gt$Library.v:266$92 ($gt).
Removed top 27 bits (of 32) from port B of cell mod_x_k.$le$Library.v:261$90 ($le).
Removed top 1 bits (of 2) from port B of cell nonce_gen.$eq$nonce_gen.v:41$19 ($eq).
Removed top 31 bits (of 32) from port A of cell nonce_gen.$procmux$737_CMP0 ($eq).
Removed top 31 bits (of 32) from port B of cell nonce_gen.$procmux$737_CMP0 ($eq).
Removed top 31 bits (of 32) from port A of cell nonce_gen.$procmux$735_CMP0 ($eq).
Removed top 31 bits (of 32) from port B of cell nonce_gen.$procmux$735_CMP0 ($eq).
Removed top 31 bits (of 32) from port A of cell nonce_gen.$procmux$739_CMP0 ($eq).
Removed top 31 bits (of 32) from port B of cell nonce_gen.$procmux$739_CMP0 ($eq).
Removed top 31 bits (of 32) from wire nonce_gen.$eq$nonce_gen.v:28$15_Y.
Removed top 31 bits (of 32) from wire nonce_gen.$eq$nonce_gen.v:41$19_Y.
Removed top 31 bits (of 32) from wire nonce_gen.$eq$nonce_gen.v:54$23_Y.
Removed top 28 bits (of 32) from port B of cell w_flops.$le$Library.v:76$35 ($le).
Removed top 4 bits (of 5) from port B of cell w_flops.$eq$Library.v:78$39 ($eq).
Removed top 3 bits (of 5) from port B of cell w_flops.$eq$Library.v:79$42 ($eq).
Removed top 3 bits (of 5) from port B of cell w_flops.$eq$Library.v:80$45 ($eq).
Removed top 2 bits (of 5) from port B of cell w_flops.$eq$Library.v:81$48 ($eq).
Removed top 2 bits (of 5) from port B of cell w_flops.$eq$Library.v:82$51 ($eq).
Removed top 2 bits (of 5) from port B of cell w_flops.$eq$Library.v:83$54 ($eq).
Removed top 2 bits (of 5) from port B of cell w_flops.$eq$Library.v:84$57 ($eq).
Removed top 1 bits (of 5) from port B of cell w_flops.$eq$Library.v:85$60 ($eq).
Removed top 1 bits (of 5) from port B of cell w_flops.$eq$Library.v:86$63 ($eq).
Removed top 1 bits (of 5) from port B of cell w_flops.$eq$Library.v:87$66 ($eq).
Removed top 1 bits (of 5) from port B of cell w_flops.$eq$Library.v:88$69 ($eq).
Removed top 1 bits (of 5) from port B of cell w_flops.$eq$Library.v:89$72 ($eq).
Removed top 1 bits (of 5) from port B of cell w_flops.$eq$Library.v:90$75 ($eq).
Removed top 1 bits (of 5) from port B of cell w_flops.$eq$Library.v:91$78 ($eq).
Removed top 1 bits (of 5) from port B of cell w_flops.$eq$Library.v:92$81 ($eq).

3.8. Executing PEEPOPT pass (run peephole optimizers).

3.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\loop_limit\LOOP_LIMIT=5000..
Finding unused cells or wires in module \abc_calculation..
Finding unused cells or wires in module \area_sys..
Finding unused cells or wires in module \compare..
Finding unused cells or wires in module \couter..
Finding unused cells or wires in module \hash_final..
Finding unused cells or wires in module \micro_ucr_hash..
Finding unused cells or wires in module \mod_x_k..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \nonce_gen..
Finding unused cells or wires in module \validity_reg..
Finding unused cells or wires in module \w_flops..
Removed 0 unused cells and 7 unused wires.
<suppressed ~4 debug messages>

3.10. Executing TECHMAP pass (map to technology primitives).

3.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

3.10.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~788 debug messages>

3.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module $paramod\loop_limit\LOOP_LIMIT=5000:
creating $macc model for $add$loop_limit.v:32$235 ($add).
creating $alu model for $macc $add$loop_limit.v:32$235.
creating $alu cell for $add$loop_limit.v:32$235: $auto$alumacc.cc:474:replace_alu$986
created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module abc_calculation:
creating $macc model for $add$Library.v:361$101 ($add).
creating $macc model for $add$Library.v:361$102 ($add).
creating $macc model for $add$Library.v:362$105 ($add).
creating $macc model for $add$Library.v:363$108 ($add).
creating $macc model for $add$Library.v:364$111 ($add).
creating $macc model for $add$Library.v:365$114 ($add).
creating $macc model for $add$Library.v:366$117 ($add).
creating $macc model for $add$Library.v:367$120 ($add).
creating $macc model for $add$Library.v:368$123 ($add).
creating $macc model for $add$Library.v:369$126 ($add).
creating $macc model for $add$Library.v:370$129 ($add).
creating $macc model for $add$Library.v:371$132 ($add).
creating $macc model for $add$Library.v:372$135 ($add).
creating $macc model for $add$Library.v:373$138 ($add).
creating $macc model for $add$Library.v:374$141 ($add).
creating $macc model for $add$Library.v:375$144 ($add).
creating $macc model for $add$Library.v:376$147 ($add).
creating $macc model for $add$Library.v:383$152 ($add).
creating $macc model for $add$Library.v:390$160 ($add).
creating $macc model for $add$Library.v:391$163 ($add).
creating $macc model for $add$Library.v:392$166 ($add).
creating $macc model for $add$Library.v:393$169 ($add).
creating $macc model for $add$Library.v:394$172 ($add).
creating $macc model for $add$Library.v:395$175 ($add).
creating $macc model for $add$Library.v:396$178 ($add).
creating $macc model for $add$Library.v:397$181 ($add).
creating $macc model for $add$Library.v:398$184 ($add).
creating $macc model for $add$Library.v:399$187 ($add).
creating $macc model for $add$Library.v:400$190 ($add).
creating $macc model for $add$Library.v:401$193 ($add).
creating $macc model for $add$Library.v:402$196 ($add).
creating $macc model for $add$Library.v:403$199 ($add).
creating $macc model for $add$Library.v:404$202 ($add).
creating $alu model for $macc $add$Library.v:404$202.
creating $alu model for $macc $add$Library.v:403$199.
creating $alu model for $macc $add$Library.v:402$196.
creating $alu model for $macc $add$Library.v:401$193.
creating $alu model for $macc $add$Library.v:400$190.
creating $alu model for $macc $add$Library.v:399$187.
creating $alu model for $macc $add$Library.v:398$184.
creating $alu model for $macc $add$Library.v:397$181.
creating $alu model for $macc $add$Library.v:396$178.
creating $alu model for $macc $add$Library.v:395$175.
creating $alu model for $macc $add$Library.v:394$172.
creating $alu model for $macc $add$Library.v:393$169.
creating $alu model for $macc $add$Library.v:392$166.
creating $alu model for $macc $add$Library.v:391$163.
creating $alu model for $macc $add$Library.v:390$160.
creating $alu model for $macc $add$Library.v:383$152.
creating $alu model for $macc $add$Library.v:376$147.
creating $alu model for $macc $add$Library.v:375$144.
creating $alu model for $macc $add$Library.v:374$141.
creating $alu model for $macc $add$Library.v:373$138.
creating $alu model for $macc $add$Library.v:372$135.
creating $alu model for $macc $add$Library.v:371$132.
creating $alu model for $macc $add$Library.v:370$129.
creating $alu model for $macc $add$Library.v:369$126.
creating $alu model for $macc $add$Library.v:368$123.
creating $alu model for $macc $add$Library.v:367$120.
creating $alu model for $macc $add$Library.v:366$117.
creating $alu model for $macc $add$Library.v:365$114.
creating $alu model for $macc $add$Library.v:364$111.
creating $alu model for $macc $add$Library.v:363$108.
creating $alu model for $macc $add$Library.v:362$105.
creating $alu model for $macc $add$Library.v:361$102.
creating $alu model for $macc $add$Library.v:361$101.
creating $alu model for $ge$Library.v:387$153 ($ge): new $alu
creating $alu model for $le$Library.v:357$97 ($le): new $alu
creating $alu model for $le$Library.v:387$154 ($le): new $alu
creating $alu model for $eq$Library.v:376$145 ($eq): merged with $le$Library.v:357$97.
creating $alu model for $eq$Library.v:390$158 ($eq): merged with $ge$Library.v:387$153.
creating $alu model for $eq$Library.v:404$200 ($eq): merged with $le$Library.v:387$154.
creating $alu cell for $le$Library.v:387$154, $eq$Library.v:404$200: $auto$alumacc.cc:474:replace_alu$992
creating $alu cell for $le$Library.v:357$97, $eq$Library.v:376$145: $auto$alumacc.cc:474:replace_alu$1005
creating $alu cell for $ge$Library.v:387$153, $eq$Library.v:390$158: $auto$alumacc.cc:474:replace_alu$1018
creating $alu cell for $add$Library.v:361$101: $auto$alumacc.cc:474:replace_alu$1027
creating $alu cell for $add$Library.v:361$102: $auto$alumacc.cc:474:replace_alu$1030
creating $alu cell for $add$Library.v:362$105: $auto$alumacc.cc:474:replace_alu$1033
creating $alu cell for $add$Library.v:363$108: $auto$alumacc.cc:474:replace_alu$1036
creating $alu cell for $add$Library.v:364$111: $auto$alumacc.cc:474:replace_alu$1039
creating $alu cell for $add$Library.v:365$114: $auto$alumacc.cc:474:replace_alu$1042
creating $alu cell for $add$Library.v:366$117: $auto$alumacc.cc:474:replace_alu$1045
creating $alu cell for $add$Library.v:367$120: $auto$alumacc.cc:474:replace_alu$1048
creating $alu cell for $add$Library.v:368$123: $auto$alumacc.cc:474:replace_alu$1051
creating $alu cell for $add$Library.v:369$126: $auto$alumacc.cc:474:replace_alu$1054
creating $alu cell for $add$Library.v:370$129: $auto$alumacc.cc:474:replace_alu$1057
creating $alu cell for $add$Library.v:371$132: $auto$alumacc.cc:474:replace_alu$1060
creating $alu cell for $add$Library.v:372$135: $auto$alumacc.cc:474:replace_alu$1063
creating $alu cell for $add$Library.v:373$138: $auto$alumacc.cc:474:replace_alu$1066
creating $alu cell for $add$Library.v:374$141: $auto$alumacc.cc:474:replace_alu$1069
creating $alu cell for $add$Library.v:375$144: $auto$alumacc.cc:474:replace_alu$1072
creating $alu cell for $add$Library.v:376$147: $auto$alumacc.cc:474:replace_alu$1075
creating $alu cell for $add$Library.v:383$152: $auto$alumacc.cc:474:replace_alu$1078
creating $alu cell for $add$Library.v:390$160: $auto$alumacc.cc:474:replace_alu$1081
creating $alu cell for $add$Library.v:391$163: $auto$alumacc.cc:474:replace_alu$1084
creating $alu cell for $add$Library.v:392$166: $auto$alumacc.cc:474:replace_alu$1087
creating $alu cell for $add$Library.v:393$169: $auto$alumacc.cc:474:replace_alu$1090
creating $alu cell for $add$Library.v:394$172: $auto$alumacc.cc:474:replace_alu$1093
creating $alu cell for $add$Library.v:395$175: $auto$alumacc.cc:474:replace_alu$1096
creating $alu cell for $add$Library.v:396$178: $auto$alumacc.cc:474:replace_alu$1099
creating $alu cell for $add$Library.v:397$181: $auto$alumacc.cc:474:replace_alu$1102
creating $alu cell for $add$Library.v:398$184: $auto$alumacc.cc:474:replace_alu$1105
creating $alu cell for $add$Library.v:399$187: $auto$alumacc.cc:474:replace_alu$1108
creating $alu cell for $add$Library.v:400$190: $auto$alumacc.cc:474:replace_alu$1111
creating $alu cell for $add$Library.v:401$193: $auto$alumacc.cc:474:replace_alu$1114
creating $alu cell for $add$Library.v:402$196: $auto$alumacc.cc:474:replace_alu$1117
creating $alu cell for $add$Library.v:403$199: $auto$alumacc.cc:474:replace_alu$1120
creating $alu cell for $add$Library.v:404$202: $auto$alumacc.cc:474:replace_alu$1123
created 36 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module area_sys:
creating $macc model for $add$/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:83$212 ($add).
creating $alu model for $macc $add$/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:83$212.
creating $alu cell for $add$/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:83$212: $auto$alumacc.cc:474:replace_alu$1126
created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module compare:
creating $alu model for $lt$compare.v:15$2 ($lt): new $alu
creating $alu model for $eq$compare.v:17$3 ($eq): merged with $lt$compare.v:15$2.
creating $alu cell for $lt$compare.v:15$2, $eq$compare.v:17$3: $auto$alumacc.cc:474:replace_alu$1130
created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module couter:
creating $macc model for $add$Library.v:20$31 ($add).
creating $alu model for $macc $add$Library.v:20$31.
creating $alu model for $lt$Library.v:19$30 ($lt): new $alu
creating $alu cell for $lt$Library.v:19$30: $auto$alumacc.cc:474:replace_alu$1142
creating $alu cell for $add$Library.v:20$31: $auto$alumacc.cc:474:replace_alu$1153
created 2 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module hash_final:
creating $macc model for $add$Library.v:493$207 ($add).
creating $macc model for $add$Library.v:494$208 ($add).
creating $macc model for $add$Library.v:495$209 ($add).
creating $alu model for $macc $add$Library.v:495$209.
creating $alu model for $macc $add$Library.v:494$208.
creating $alu model for $macc $add$Library.v:493$207.
creating $alu model for $lt$Library.v:499$210 ($lt): new $alu
creating $alu model for $eq$Library.v:492$205 ($eq): merged with $lt$Library.v:499$210.
creating $alu cell for $lt$Library.v:499$210, $eq$Library.v:492$205: $auto$alumacc.cc:474:replace_alu$1157
creating $alu cell for $add$Library.v:493$207: $auto$alumacc.cc:474:replace_alu$1168
creating $alu cell for $add$Library.v:494$208: $auto$alumacc.cc:474:replace_alu$1171
creating $alu cell for $add$Library.v:495$209: $auto$alumacc.cc:474:replace_alu$1174
created 4 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module micro_ucr_hash:
created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module mod_x_k:
creating $alu model for $gt$Library.v:266$92 ($gt): new $alu
creating $alu model for $le$Library.v:261$90 ($le): merged with $gt$Library.v:266$92.
creating $alu cell for $gt$Library.v:266$92, $le$Library.v:261$90: $auto$alumacc.cc:474:replace_alu$1178
created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module mux:
created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module nonce_gen:
creating $macc model for $add$nonce_gen.v:32$17 ($add).
creating $macc model for $add$nonce_gen.v:33$18 ($add).
creating $macc model for $add$nonce_gen.v:46$22 ($add).
creating $macc model for $add$nonce_gen.v:58$26 ($add).
creating $alu model for $macc $add$nonce_gen.v:58$26.
creating $alu model for $macc $add$nonce_gen.v:46$22.
creating $alu model for $macc $add$nonce_gen.v:33$18.
creating $alu model for $macc $add$nonce_gen.v:32$17.
creating $alu cell for $add$nonce_gen.v:32$17: $auto$alumacc.cc:474:replace_alu$1191
creating $alu cell for $add$nonce_gen.v:33$18: $auto$alumacc.cc:474:replace_alu$1194
creating $alu cell for $add$nonce_gen.v:46$22: $auto$alumacc.cc:474:replace_alu$1197
creating $alu cell for $add$nonce_gen.v:58$26: $auto$alumacc.cc:474:replace_alu$1200
created 4 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module validity_reg:
created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module w_flops:
creating $alu model for $le$Library.v:76$35 ($le): new $alu
creating $alu model for $eq$Library.v:92$81 ($eq): merged with $le$Library.v:76$35.
creating $alu cell for $le$Library.v:76$35, $eq$Library.v:92$81: $auto$alumacc.cc:474:replace_alu$1204
created 1 $alu and 0 $macc cells.

3.12. Executing SHARE pass (SAT-based resource sharing).

3.13. Executing OPT pass (performing simple optimizations).

3.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\loop_limit\LOOP_LIMIT=5000.
Optimizing module abc_calculation.
Optimizing module area_sys.
<suppressed ~1 debug messages>
Optimizing module compare.
<suppressed ~1 debug messages>
Optimizing module couter.
<suppressed ~1 debug messages>
Optimizing module hash_final.
<suppressed ~4 debug messages>
Optimizing module micro_ucr_hash.
Optimizing module mod_x_k.
<suppressed ~2 debug messages>
Optimizing module mux.
Optimizing module nonce_gen.
<suppressed ~3 debug messages>
Optimizing module validity_reg.
Optimizing module w_flops.

3.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\loop_limit\LOOP_LIMIT=5000'.
Finding identical cells in module `\abc_calculation'.
Finding identical cells in module `\area_sys'.
<suppressed ~3 debug messages>
Finding identical cells in module `\compare'.
Finding identical cells in module `\couter'.
Finding identical cells in module `\hash_final'.
Finding identical cells in module `\micro_ucr_hash'.
Finding identical cells in module `\mod_x_k'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\nonce_gen'.
Finding identical cells in module `\validity_reg'.
Finding identical cells in module `\w_flops'.
Removed a total of 1 cells.

3.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\loop_limit\LOOP_LIMIT=5000..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \abc_calculation..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \area_sys..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \compare..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \couter..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \hash_final..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \micro_ucr_hash..
Creating internal representation of mux trees.
No muxes found in this module.
Running muxtree optimizer on module \mod_x_k..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \mux..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \nonce_gen..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \validity_reg..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \w_flops..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~59 debug messages>

3.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module $paramod\loop_limit\LOOP_LIMIT=5000.
Optimizing cells in module \abc_calculation.
New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$1025: { $auto$rtlil.cc:1832:Not$1022 $auto$rtlil.cc:1835:ReduceAnd$1024 }
New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1023: { $auto$alumacc.cc:490:replace_alu$1019 [0] $auto$alumacc.cc:490:replace_alu$1019 [1] $auto$alumacc.cc:490:replace_alu$1019 [2] $auto$alumacc.cc:490:replace_alu$1019 [3] $auto$alumacc.cc:490:replace_alu$1019 [4] }
New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$995: { $auto$alumacc.cc:490:replace_alu$993 [0] $auto$alumacc.cc:490:replace_alu$993 [1] $auto$alumacc.cc:490:replace_alu$993 [2] $auto$alumacc.cc:490:replace_alu$993 [3] $auto$alumacc.cc:490:replace_alu$993 [4] }
New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1008: { $auto$alumacc.cc:490:replace_alu$1006 [0] $auto$alumacc.cc:490:replace_alu$1006 [1] $auto$alumacc.cc:490:replace_alu$1006 [2] $auto$alumacc.cc:490:replace_alu$1006 [3] $auto$alumacc.cc:490:replace_alu$1006 [4] }
Optimizing cells in module \abc_calculation.
Optimizing cells in module \area_sys.
Optimizing cells in module \compare.
New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1133: { $auto$alumacc.cc:490:replace_alu$1131 [0] $auto$alumacc.cc:490:replace_alu$1131 [1] $auto$alumacc.cc:490:replace_alu$1131 [2] $auto$alumacc.cc:490:replace_alu$1131 [3] $auto$alumacc.cc:490:replace_alu$1131 [4] $auto$alumacc.cc:490:replace_alu$1131 [5] $auto$alumacc.cc:490:replace_alu$1131 [6] $auto$alumacc.cc:490:replace_alu$1131 [7] $auto$alumacc.cc:490:replace_alu$1131 [8] $auto$alumacc.cc:490:replace_alu$1131 [9] $auto$alumacc.cc:490:replace_alu$1131 [10] $auto$alumacc.cc:490:replace_alu$1131 [11] $auto$alumacc.cc:490:replace_alu$1131 [12] $auto$alumacc.cc:490:replace_alu$1131 [13] $auto$alumacc.cc:490:replace_alu$1131 [14] $auto$alumacc.cc:490:replace_alu$1131 [15] }
Optimizing cells in module \compare.
Optimizing cells in module \couter.
New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1145: { $auto$alumacc.cc:490:replace_alu$1143 [0] $auto$alumacc.cc:490:replace_alu$1143 [1] $auto$alumacc.cc:490:replace_alu$1143 [2] $auto$alumacc.cc:490:replace_alu$1143 [3] $auto$alumacc.cc:490:replace_alu$1143 [4] }
Optimizing cells in module \couter.
Optimizing cells in module \hash_final.
New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1160: { $auto$alumacc.cc:490:replace_alu$1158 [0] $auto$alumacc.cc:490:replace_alu$1158 [1] $auto$alumacc.cc:490:replace_alu$1158 [2] $auto$alumacc.cc:490:replace_alu$1158 [3] $auto$alumacc.cc:490:replace_alu$1158 [4] }
Optimizing cells in module \hash_final.
Optimizing cells in module \micro_ucr_hash.
Optimizing cells in module \mod_x_k.
New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$1189: { $auto$rtlil.cc:1832:Not$1188 $auto$rtlil.cc:1835:ReduceAnd$1184 }
New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1183: { $auto$alumacc.cc:490:replace_alu$1179 [0] $auto$alumacc.cc:490:replace_alu$1179 [1] $auto$alumacc.cc:490:replace_alu$1179 [2] $auto$alumacc.cc:490:replace_alu$1179 [3] $auto$alumacc.cc:490:replace_alu$1179 [4] }
Optimizing cells in module \mod_x_k.
Optimizing cells in module \mux.
Optimizing cells in module \nonce_gen.
Optimizing cells in module \validity_reg.
Optimizing cells in module \w_flops.
New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$1215: { $auto$rtlil.cc:1832:Not$1214 $auto$rtlil.cc:1835:ReduceAnd$1208 }
New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1207: { $auto$alumacc.cc:490:replace_alu$1205 [0] $auto$alumacc.cc:490:replace_alu$1205 [1] $auto$alumacc.cc:490:replace_alu$1205 [2] $auto$alumacc.cc:490:replace_alu$1205 [3] $auto$alumacc.cc:490:replace_alu$1205 [4] }
Optimizing cells in module \w_flops.
Performed a total of 11 changes.

3.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\loop_limit\LOOP_LIMIT=5000'.
Finding identical cells in module `\abc_calculation'.
Finding identical cells in module `\area_sys'.
Finding identical cells in module `\compare'.
Finding identical cells in module `\couter'.
Finding identical cells in module `\hash_final'.
Finding identical cells in module `\micro_ucr_hash'.
Finding identical cells in module `\mod_x_k'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\nonce_gen'.
Finding identical cells in module `\validity_reg'.
Finding identical cells in module `\w_flops'.
Removed a total of 0 cells.

3.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\loop_limit\LOOP_LIMIT=5000..
Finding unused cells or wires in module \abc_calculation..
Finding unused cells or wires in module \area_sys..
Finding unused cells or wires in module \compare..
Finding unused cells or wires in module \couter..
Finding unused cells or wires in module \hash_final..
Finding unused cells or wires in module \micro_ucr_hash..
Finding unused cells or wires in module \mod_x_k..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \nonce_gen..
Finding unused cells or wires in module \validity_reg..
Finding unused cells or wires in module \w_flops..
Removed 3 unused cells and 23 unused wires.
<suppressed ~11 debug messages>

3.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\loop_limit\LOOP_LIMIT=5000.
Optimizing module abc_calculation.
Optimizing module area_sys.
Optimizing module compare.
Optimizing module couter.
Optimizing module hash_final.
Optimizing module micro_ucr_hash.
Optimizing module mod_x_k.
Optimizing module mux.
Optimizing module nonce_gen.
Optimizing module validity_reg.
Optimizing module w_flops.

3.13.9. Rerunning OPT passes. (Maybe there is more to do..)

3.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\loop_limit\LOOP_LIMIT=5000..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \abc_calculation..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \area_sys..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \compare..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \couter..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \hash_final..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \micro_ucr_hash..
Creating internal representation of mux trees.
No muxes found in this module.
Running muxtree optimizer on module \mod_x_k..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \mux..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \nonce_gen..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \validity_reg..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \w_flops..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~59 debug messages>

3.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module $paramod\loop_limit\LOOP_LIMIT=5000.
Optimizing cells in module \abc_calculation.
Optimizing cells in module \area_sys.
Optimizing cells in module \compare.
Optimizing cells in module \couter.
Optimizing cells in module \hash_final.
Optimizing cells in module \micro_ucr_hash.
Optimizing cells in module \mod_x_k.
Optimizing cells in module \mux.
Optimizing cells in module \nonce_gen.
Optimizing cells in module \validity_reg.
Optimizing cells in module \w_flops.
Performed a total of 0 changes.

3.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\loop_limit\LOOP_LIMIT=5000'.
Finding identical cells in module `\abc_calculation'.
Finding identical cells in module `\area_sys'.
Finding identical cells in module `\compare'.
Finding identical cells in module `\couter'.
Finding identical cells in module `\hash_final'.
Finding identical cells in module `\micro_ucr_hash'.
Finding identical cells in module `\mod_x_k'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\nonce_gen'.
Finding identical cells in module `\validity_reg'.
Finding identical cells in module `\w_flops'.
Removed a total of 0 cells.

3.13.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\loop_limit\LOOP_LIMIT=5000..
Finding unused cells or wires in module \abc_calculation..
Finding unused cells or wires in module \area_sys..
Finding unused cells or wires in module \compare..
Finding unused cells or wires in module \couter..
Finding unused cells or wires in module \hash_final..
Finding unused cells or wires in module \micro_ucr_hash..
Finding unused cells or wires in module \mod_x_k..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \nonce_gen..
Finding unused cells or wires in module \validity_reg..
Finding unused cells or wires in module \w_flops..

3.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\loop_limit\LOOP_LIMIT=5000.
Optimizing module abc_calculation.
Optimizing module area_sys.
Optimizing module compare.
Optimizing module couter.
Optimizing module hash_final.
Optimizing module micro_ucr_hash.
Optimizing module mod_x_k.
Optimizing module mux.
Optimizing module nonce_gen.
Optimizing module validity_reg.
Optimizing module w_flops.

3.13.16. Finished OPT passes. (There is nothing left to do.)

3.14. Executing FSM pass (extract and optimize FSM).

3.14.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking $paramod\loop_limit\LOOP_LIMIT=5000.loop_limit as FSM state register:
Users of register don't seem to benefit from recoding.
Not marking compare.compare_var as FSM state register:
Register is connected to module port.
Users of register don't seem to benefit from recoding.
Not marking mod_x_k.k as FSM state register:
Register is connected to module port.
Users of register don't seem to benefit from recoding.

3.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\loop_limit\LOOP_LIMIT=5000..
Finding unused cells or wires in module \abc_calculation..
Finding unused cells or wires in module \area_sys..
Finding unused cells or wires in module \compare..
Finding unused cells or wires in module \couter..
Finding unused cells or wires in module \hash_final..
Finding unused cells or wires in module \micro_ucr_hash..
Finding unused cells or wires in module \mod_x_k..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \nonce_gen..
Finding unused cells or wires in module \validity_reg..
Finding unused cells or wires in module \w_flops..

3.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.15. Executing OPT pass (performing simple optimizations).

3.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\loop_limit\LOOP_LIMIT=5000.
Optimizing module abc_calculation.
Optimizing module area_sys.
Optimizing module compare.
Optimizing module couter.
Optimizing module hash_final.
Optimizing module micro_ucr_hash.
Optimizing module mod_x_k.
Optimizing module mux.
Optimizing module nonce_gen.
Optimizing module validity_reg.
Optimizing module w_flops.

3.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\loop_limit\LOOP_LIMIT=5000'.
Finding identical cells in module `\abc_calculation'.
Finding identical cells in module `\area_sys'.
Finding identical cells in module `\compare'.
Finding identical cells in module `\couter'.
Finding identical cells in module `\hash_final'.
Finding identical cells in module `\micro_ucr_hash'.
Finding identical cells in module `\mod_x_k'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\nonce_gen'.
Finding identical cells in module `\validity_reg'.
Finding identical cells in module `\w_flops'.
Removed a total of 0 cells.

3.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\loop_limit\LOOP_LIMIT=5000..
Finding unused cells or wires in module \abc_calculation..
Finding unused cells or wires in module \area_sys..
Finding unused cells or wires in module \compare..
Finding unused cells or wires in module \couter..
Finding unused cells or wires in module \hash_final..
Finding unused cells or wires in module \micro_ucr_hash..
Finding unused cells or wires in module \mod_x_k..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \nonce_gen..
Finding unused cells or wires in module \validity_reg..
Finding unused cells or wires in module \w_flops..

3.15.5. Finished fast OPT passes.

3.16. Executing MEMORY pass.

3.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

3.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\loop_limit\LOOP_LIMIT=5000..
Finding unused cells or wires in module \abc_calculation..
Finding unused cells or wires in module \area_sys..
Finding unused cells or wires in module \compare..
Finding unused cells or wires in module \couter..
Finding unused cells or wires in module \hash_final..
Finding unused cells or wires in module \micro_ucr_hash..
Finding unused cells or wires in module \mod_x_k..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \nonce_gen..
Finding unused cells or wires in module \validity_reg..
Finding unused cells or wires in module \w_flops..

3.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\loop_limit\LOOP_LIMIT=5000..
Finding unused cells or wires in module \abc_calculation..
Finding unused cells or wires in module \area_sys..
Finding unused cells or wires in module \compare..
Finding unused cells or wires in module \couter..
Finding unused cells or wires in module \hash_final..
Finding unused cells or wires in module \micro_ucr_hash..
Finding unused cells or wires in module \mod_x_k..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \nonce_gen..
Finding unused cells or wires in module \validity_reg..
Finding unused cells or wires in module \w_flops..

3.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

3.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\loop_limit\LOOP_LIMIT=5000..
Finding unused cells or wires in module \abc_calculation..
Finding unused cells or wires in module \area_sys..
Finding unused cells or wires in module \compare..
Finding unused cells or wires in module \couter..
Finding unused cells or wires in module \hash_final..
Finding unused cells or wires in module \micro_ucr_hash..
Finding unused cells or wires in module \mod_x_k..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \nonce_gen..
Finding unused cells or wires in module \validity_reg..
Finding unused cells or wires in module \w_flops..

3.18. Executing OPT pass (performing simple optimizations).

3.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\loop_limit\LOOP_LIMIT=5000.
<suppressed ~2 debug messages>
Optimizing module abc_calculation.
Optimizing module area_sys.
<suppressed ~16 debug messages>
Optimizing module compare.
Optimizing module couter.
Optimizing module hash_final.
Optimizing module micro_ucr_hash.
Optimizing module mod_x_k.
Optimizing module mux.
Optimizing module nonce_gen.
<suppressed ~1 debug messages>
Optimizing module validity_reg.
<suppressed ~2 debug messages>
Optimizing module w_flops.

3.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\loop_limit\LOOP_LIMIT=5000'.
Finding identical cells in module `\abc_calculation'.
Finding identical cells in module `\area_sys'.
Finding identical cells in module `\compare'.
Finding identical cells in module `\couter'.
Finding identical cells in module `\hash_final'.
Finding identical cells in module `\micro_ucr_hash'.
Finding identical cells in module `\mod_x_k'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\nonce_gen'.
Finding identical cells in module `\validity_reg'.
Finding identical cells in module `\w_flops'.
Removed a total of 0 cells.

3.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\loop_limit\LOOP_LIMIT=5000..
Finding unused cells or wires in module \abc_calculation..
Finding unused cells or wires in module \area_sys..
Finding unused cells or wires in module \compare..
Finding unused cells or wires in module \couter..
Finding unused cells or wires in module \hash_final..
Finding unused cells or wires in module \micro_ucr_hash..
Finding unused cells or wires in module \mod_x_k..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \nonce_gen..
Finding unused cells or wires in module \validity_reg..
Finding unused cells or wires in module \w_flops..
Removed 0 unused cells and 5 unused wires.
<suppressed ~3 debug messages>

3.18.5. Finished fast OPT passes.

3.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

3.20. Executing OPT pass (performing simple optimizations).

3.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\loop_limit\LOOP_LIMIT=5000.
Optimizing module abc_calculation.
Optimizing module area_sys.
Optimizing module compare.
Optimizing module couter.
Optimizing module hash_final.
Optimizing module micro_ucr_hash.
Optimizing module mod_x_k.
Optimizing module mux.
Optimizing module nonce_gen.
Optimizing module validity_reg.
Optimizing module w_flops.

3.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\loop_limit\LOOP_LIMIT=5000'.
Finding identical cells in module `\abc_calculation'.
Finding identical cells in module `\area_sys'.
Finding identical cells in module `\compare'.
Finding identical cells in module `\couter'.
Finding identical cells in module `\hash_final'.
Finding identical cells in module `\micro_ucr_hash'.
Finding identical cells in module `\mod_x_k'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\nonce_gen'.
Finding identical cells in module `\validity_reg'.
Finding identical cells in module `\w_flops'.
Removed a total of 0 cells.

3.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\loop_limit\LOOP_LIMIT=5000..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \abc_calculation..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \area_sys..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \compare..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \couter..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \hash_final..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \micro_ucr_hash..
Creating internal representation of mux trees.
No muxes found in this module.
Running muxtree optimizer on module \mod_x_k..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \mux..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \nonce_gen..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \validity_reg..
Creating internal representation of mux trees.
No muxes found in this module.
Running muxtree optimizer on module \w_flops..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~57 debug messages>

3.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module $paramod\loop_limit\LOOP_LIMIT=5000.
Optimizing cells in module \abc_calculation.
Optimizing cells in module \area_sys.
Optimizing cells in module \compare.
Consolidated identical input bits for $mux cell $procmux$929:
Old ports: A=3'100, B=3'010, Y=$procmux$929_Y
New ports: A=2'10, B=2'01, Y=$procmux$929_Y [2:1]
New connections: $procmux$929_Y [0] = 1'0
Optimizing cells in module \compare.
Optimizing cells in module \couter.
Optimizing cells in module \hash_final.
Optimizing cells in module \micro_ucr_hash.
Optimizing cells in module \mod_x_k.
Optimizing cells in module \mux.
Optimizing cells in module \nonce_gen.
Optimizing cells in module \validity_reg.
Optimizing cells in module \w_flops.
Performed a total of 1 changes.

3.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\loop_limit\LOOP_LIMIT=5000'.
Finding identical cells in module `\abc_calculation'.
Finding identical cells in module `\area_sys'.
Finding identical cells in module `\compare'.
Finding identical cells in module `\couter'.
Finding identical cells in module `\hash_final'.
Finding identical cells in module `\micro_ucr_hash'.
Finding identical cells in module `\mod_x_k'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\nonce_gen'.
Finding identical cells in module `\validity_reg'.
Finding identical cells in module `\w_flops'.
Removed a total of 0 cells.

3.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\loop_limit\LOOP_LIMIT=5000..
Finding unused cells or wires in module \abc_calculation..
Finding unused cells or wires in module \area_sys..
Finding unused cells or wires in module \compare..
Finding unused cells or wires in module \couter..
Finding unused cells or wires in module \hash_final..
Finding unused cells or wires in module \micro_ucr_hash..
Finding unused cells or wires in module \mod_x_k..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \nonce_gen..
Finding unused cells or wires in module \validity_reg..
Finding unused cells or wires in module \w_flops..

3.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\loop_limit\LOOP_LIMIT=5000.
Optimizing module abc_calculation.
Optimizing module area_sys.
Optimizing module compare.
Optimizing module couter.
Optimizing module hash_final.
Optimizing module micro_ucr_hash.
Optimizing module mod_x_k.
Optimizing module mux.
Optimizing module nonce_gen.
Optimizing module validity_reg.
Optimizing module w_flops.

3.20.9. Rerunning OPT passes. (Maybe there is more to do..)

3.20.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\loop_limit\LOOP_LIMIT=5000..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \abc_calculation..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \area_sys..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \compare..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \couter..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \hash_final..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \micro_ucr_hash..
Creating internal representation of mux trees.
No muxes found in this module.
Running muxtree optimizer on module \mod_x_k..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \mux..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \nonce_gen..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \validity_reg..
Creating internal representation of mux trees.
No muxes found in this module.
Running muxtree optimizer on module \w_flops..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~57 debug messages>

3.20.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module $paramod\loop_limit\LOOP_LIMIT=5000.
Optimizing cells in module \abc_calculation.
Optimizing cells in module \area_sys.
Optimizing cells in module \compare.
Optimizing cells in module \couter.
Optimizing cells in module \hash_final.
Optimizing cells in module \micro_ucr_hash.
Optimizing cells in module \mod_x_k.
Optimizing cells in module \mux.
Optimizing cells in module \nonce_gen.
Optimizing cells in module \validity_reg.
Optimizing cells in module \w_flops.
Performed a total of 0 changes.

3.20.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\loop_limit\LOOP_LIMIT=5000'.
Finding identical cells in module `\abc_calculation'.
Finding identical cells in module `\area_sys'.
Finding identical cells in module `\compare'.
Finding identical cells in module `\couter'.
Finding identical cells in module `\hash_final'.
Finding identical cells in module `\micro_ucr_hash'.
Finding identical cells in module `\mod_x_k'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\nonce_gen'.
Finding identical cells in module `\validity_reg'.
Finding identical cells in module `\w_flops'.
Removed a total of 0 cells.

3.20.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.20.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\loop_limit\LOOP_LIMIT=5000..
Finding unused cells or wires in module \abc_calculation..
Finding unused cells or wires in module \area_sys..
Finding unused cells or wires in module \compare..
Finding unused cells or wires in module \couter..
Finding unused cells or wires in module \hash_final..
Finding unused cells or wires in module \micro_ucr_hash..
Finding unused cells or wires in module \mod_x_k..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \nonce_gen..
Finding unused cells or wires in module \validity_reg..
Finding unused cells or wires in module \w_flops..

3.20.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\loop_limit\LOOP_LIMIT=5000.
Optimizing module abc_calculation.
Optimizing module area_sys.
Optimizing module compare.
Optimizing module couter.
Optimizing module hash_final.
Optimizing module micro_ucr_hash.
Optimizing module mod_x_k.
Optimizing module mux.
Optimizing module nonce_gen.
Optimizing module validity_reg.
Optimizing module w_flops.

3.20.16. Finished OPT passes. (There is nothing left to do.)

3.21. Executing TECHMAP pass (map to technology primitives).

3.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.21.2. Continuing TECHMAP pass.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=16\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=16 for cells of type $lcu.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=8 for cells of type $lcu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=5\Y_WIDTH=5 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=5\B_WIDTH=5\Y_WIDTH=5 for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=5 for cells of type $lcu.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=4\B_WIDTH=5\Y_WIDTH=5 for cells of type $alu.
Using extmapper simplemap for cells of type $logic_and.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
Using extmapper simplemap for cells of type $logic_or.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
No more expansions possible.
<suppressed ~2644 debug messages>

3.22. Executing OPT pass (performing simple optimizations).

3.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\loop_limit\LOOP_LIMIT=5000.
<suppressed ~94 debug messages>
Optimizing module abc_calculation.
<suppressed ~761 debug messages>
Optimizing module area_sys.
<suppressed ~48 debug messages>
Optimizing module compare.
<suppressed ~19 debug messages>
Optimizing module couter.
<suppressed ~36 debug messages>
Optimizing module hash_final.
<suppressed ~132 debug messages>
Optimizing module micro_ucr_hash.
Optimizing module mod_x_k.
<suppressed ~22 debug messages>
Optimizing module mux.
Optimizing module nonce_gen.
<suppressed ~229 debug messages>
Optimizing module validity_reg.
Optimizing module w_flops.
<suppressed ~176 debug messages>

3.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\loop_limit\LOOP_LIMIT=5000'.
Finding identical cells in module `\abc_calculation'.
<suppressed ~1227 debug messages>
Finding identical cells in module `\area_sys'.
<suppressed ~3 debug messages>
Finding identical cells in module `\compare'.
<suppressed ~33 debug messages>
Finding identical cells in module `\couter'.
<suppressed ~15 debug messages>
Finding identical cells in module `\hash_final'.
Finding identical cells in module `\micro_ucr_hash'.
Finding identical cells in module `\mod_x_k'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\nonce_gen'.
Finding identical cells in module `\validity_reg'.
Finding identical cells in module `\w_flops'.
<suppressed ~138 debug messages>
Removed a total of 472 cells.

3.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\loop_limit\LOOP_LIMIT=5000..
Finding unused cells or wires in module \abc_calculation..
Finding unused cells or wires in module \area_sys..
Finding unused cells or wires in module \compare..
Finding unused cells or wires in module \couter..
Finding unused cells or wires in module \hash_final..
Finding unused cells or wires in module \micro_ucr_hash..
Finding unused cells or wires in module \mod_x_k..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \nonce_gen..
Finding unused cells or wires in module \validity_reg..
Finding unused cells or wires in module \w_flops..
Removed 561 unused cells and 1885 unused wires.
<suppressed ~571 debug messages>

3.22.5. Finished fast OPT passes.

3.23. Executing ABC pass (technology mapping using ABC).

3.23.1. Extracting gate netlist of module `$paramod\loop_limit\LOOP_LIMIT=5000' to `<abc-temp-dir>/input.blif'..
Extracted 133 gates and 173 wires to a netlist network with 38 inputs and 33 outputs.

3.23.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC:
ABC: + read_blif <abc-temp-dir>/input.blif
ABC: + read_library <abc-temp-dir>/stdcells.genlib
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash
ABC: + dretime
ABC: + retime
ABC: + map
ABC: + write_blif <abc-temp-dir>/output.blif

3.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:            ANDNOT cells:       22
ABC RESULTS:              AOI3 cells:       11
ABC RESULTS:               MUX cells:        1
ABC RESULTS:              NAND cells:       10
ABC RESULTS:               NOT cells:       19
ABC RESULTS:              OAI3 cells:        6
ABC RESULTS:                OR cells:       41
ABC RESULTS:             ORNOT cells:        4
ABC RESULTS:              XNOR cells:        1
ABC RESULTS:               XOR cells:       14
ABC RESULTS:        internal signals:      102
ABC RESULTS:           input signals:       38
ABC RESULTS:          output signals:       33
Removing temp directory.

3.23.2. Extracting gate netlist of module `\abc_calculation' to `<abc-temp-dir>/input.blif'..
Extracted 1777 gates and 2097 wires to a netlist network with 318 inputs and 24 outputs.

3.23.2.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC:
ABC: + read_blif <abc-temp-dir>/input.blif
ABC: + read_library <abc-temp-dir>/stdcells.genlib
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash
ABC: + dretime
ABC: + retime
ABC: + map
ABC: + write_blif <abc-temp-dir>/output.blif

3.23.2.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       31
ABC RESULTS:            ANDNOT cells:      468
ABC RESULTS:              AOI3 cells:       54
ABC RESULTS:               MUX cells:      308
ABC RESULTS:              NAND cells:       35
ABC RESULTS:               NOR cells:       80
ABC RESULTS:               NOT cells:      163
ABC RESULTS:              OAI3 cells:       52
ABC RESULTS:                OR cells:       55
ABC RESULTS:             ORNOT cells:       57
ABC RESULTS:              XNOR cells:      132
ABC RESULTS:               XOR cells:      377
ABC RESULTS:        internal signals:     1755
ABC RESULTS:           input signals:      318
ABC RESULTS:          output signals:       24
Removing temp directory.

3.23.3. Extracting gate netlist of module `\area_sys' to `<abc-temp-dir>/input.blif'..
Extracted 235 gates and 320 wires to a netlist network with 83 inputs and 60 outputs.

3.23.3.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC:
ABC: + read_blif <abc-temp-dir>/input.blif
ABC: + read_library <abc-temp-dir>/stdcells.genlib
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash
ABC: + dretime
ABC: + retime
ABC: + map
ABC: + write_blif <abc-temp-dir>/output.blif

3.23.3.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:       62
ABC RESULTS:              AOI3 cells:        1
ABC RESULTS:               MUX cells:       96
ABC RESULTS:              NAND cells:        3
ABC RESULTS:               NOR cells:        8
ABC RESULTS:               NOT cells:       45
ABC RESULTS:              OAI3 cells:        9
ABC RESULTS:                OR cells:       10
ABC RESULTS:             ORNOT cells:       25
ABC RESULTS:               XOR cells:        7
ABC RESULTS:        internal signals:      177
ABC RESULTS:           input signals:       83
ABC RESULTS:          output signals:       60
Removing temp directory.

3.23.4. Extracting gate netlist of module `\compare' to `<abc-temp-dir>/input.blif'..
Extracted 103 gates and 140 wires to a netlist network with 36 inputs and 3 outputs.

3.23.4.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC:
ABC: + read_blif <abc-temp-dir>/input.blif
ABC: + read_library <abc-temp-dir>/stdcells.genlib
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash
ABC: + dretime
ABC: + retime
ABC: + map
ABC: + write_blif <abc-temp-dir>/output.blif

3.23.4.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:       26
ABC RESULTS:              AOI3 cells:        5
ABC RESULTS:               MUX cells:        3
ABC RESULTS:               NOR cells:        2
ABC RESULTS:               NOT cells:        1
ABC RESULTS:              OAI3 cells:        5
ABC RESULTS:                OR cells:        8
ABC RESULTS:             ORNOT cells:        8
ABC RESULTS:              XNOR cells:        2
ABC RESULTS:               XOR cells:       14
ABC RESULTS:        internal signals:      101
ABC RESULTS:           input signals:       36
ABC RESULTS:          output signals:        3
Removing temp directory.

3.23.5. Extracting gate netlist of module `\couter' to `<abc-temp-dir>/input.blif'..
Extracted 50 gates and 59 wires to a netlist network with 7 inputs and 5 outputs.

3.23.5.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC:
ABC: + read_blif <abc-temp-dir>/input.blif
ABC: + read_library <abc-temp-dir>/stdcells.genlib
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash
ABC: + dretime
ABC: + retime
ABC: + map
ABC: + write_blif <abc-temp-dir>/output.blif

3.23.5.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        3
ABC RESULTS:            ANDNOT cells:        7
ABC RESULTS:               MUX cells:        4
ABC RESULTS:              NAND cells:        2
ABC RESULTS:               NOT cells:        6
ABC RESULTS:              OAI4 cells:        1
ABC RESULTS:                OR cells:        5
ABC RESULTS:             ORNOT cells:        2
ABC RESULTS:              XNOR cells:        1
ABC RESULTS:               XOR cells:        4
ABC RESULTS:        internal signals:       47
ABC RESULTS:           input signals:        7
ABC RESULTS:          output signals:        5
Removing temp directory.

3.23.6. Extracting gate netlist of module `\hash_final' to `<abc-temp-dir>/input.blif'..
Extracted 166 gates and 223 wires to a netlist network with 55 inputs and 25 outputs.

3.23.6.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC:
ABC: + read_blif <abc-temp-dir>/input.blif
ABC: + read_library <abc-temp-dir>/stdcells.genlib
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash
ABC: + dretime
ABC: + retime
ABC: + map
ABC: + write_blif <abc-temp-dir>/output.blif

3.23.6.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        8
ABC RESULTS:            ANDNOT cells:       31
ABC RESULTS:              AOI3 cells:        2
ABC RESULTS:               MUX cells:       49
ABC RESULTS:              NAND cells:        6
ABC RESULTS:               NOR cells:        3
ABC RESULTS:               NOT cells:       43
ABC RESULTS:              OAI3 cells:        1
ABC RESULTS:                OR cells:        6
ABC RESULTS:             ORNOT cells:        3
ABC RESULTS:              XNOR cells:        2
ABC RESULTS:               XOR cells:       18
ABC RESULTS:        internal signals:      143
ABC RESULTS:           input signals:       55
ABC RESULTS:          output signals:       25
Removing temp directory.

3.23.7. Extracting gate netlist of module `\micro_ucr_hash' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

3.23.8. Extracting gate netlist of module `\mod_x_k' to `<abc-temp-dir>/input.blif'..
Extracted 99 gates and 155 wires to a netlist network with 54 inputs and 32 outputs.

3.23.8.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC:
ABC: + read_blif <abc-temp-dir>/input.blif
ABC: + read_library <abc-temp-dir>/stdcells.genlib
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash
ABC: + dretime
ABC: + retime
ABC: + map
ABC: + write_blif <abc-temp-dir>/output.blif

3.23.8.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       16
ABC RESULTS:            ANDNOT cells:       16
ABC RESULTS:              AOI3 cells:        6
ABC RESULTS:               MUX cells:       16
ABC RESULTS:              NAND cells:        5
ABC RESULTS:               NOR cells:       10
ABC RESULTS:               NOT cells:       11
ABC RESULTS:              OAI3 cells:        3
ABC RESULTS:                OR cells:        6
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:              XNOR cells:        8
ABC RESULTS:        internal signals:       69
ABC RESULTS:           input signals:       54
ABC RESULTS:          output signals:       32
Removing temp directory.

3.23.9. Extracting gate netlist of module `\mux' to `<abc-temp-dir>/input.blif'..
Extracted 24 gates and 51 wires to a netlist network with 25 inputs and 24 outputs.

3.23.9.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC:
ABC: + read_blif <abc-temp-dir>/input.blif
ABC: + read_library <abc-temp-dir>/stdcells.genlib
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash
ABC: + dretime
ABC: + retime
ABC: + map
ABC: + write_blif <abc-temp-dir>/output.blif

3.23.9.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       13
ABC RESULTS:             ORNOT cells:       11
ABC RESULTS:        internal signals:        2
ABC RESULTS:           input signals:       25
ABC RESULTS:          output signals:       24
Removing temp directory.

3.23.10. Extracting gate netlist of module `\nonce_gen' to `<abc-temp-dir>/input.blif'..
Extracted 587 gates and 674 wires to a netlist network with 85 inputs and 65 outputs.

3.23.10.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC:
ABC: + read_blif <abc-temp-dir>/input.blif
ABC: + read_library <abc-temp-dir>/stdcells.genlib
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash
ABC: + dretime
ABC: + retime
ABC: + map
ABC: + write_blif <abc-temp-dir>/output.blif

3.23.10.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        7
ABC RESULTS:            ANDNOT cells:       45
ABC RESULTS:              AOI3 cells:       16
ABC RESULTS:               MUX cells:      346
ABC RESULTS:              NAND cells:       32
ABC RESULTS:               NOR cells:        1
ABC RESULTS:               NOT cells:       50
ABC RESULTS:              OAI3 cells:       24
ABC RESULTS:                OR cells:       21
ABC RESULTS:             ORNOT cells:       13
ABC RESULTS:              XNOR cells:       25
ABC RESULTS:               XOR cells:       37
ABC RESULTS:        internal signals:      524
ABC RESULTS:           input signals:       85
ABC RESULTS:          output signals:       65
Removing temp directory.

3.23.11. Extracting gate netlist of module `\validity_reg' to `<abc-temp-dir>/input.blif'..
Extracted 7 gates and 14 wires to a netlist network with 7 inputs and 1 outputs.

3.23.11.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC:
ABC: + read_blif <abc-temp-dir>/input.blif
ABC: + read_library <abc-temp-dir>/stdcells.genlib
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash
ABC: + dretime
ABC: + retime
ABC: + map
ABC: + write_blif <abc-temp-dir>/output.blif

3.23.11.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:                OR cells:        2
ABC RESULTS:               XOR cells:        3
ABC RESULTS:        internal signals:        6
ABC RESULTS:           input signals:        7
ABC RESULTS:          output signals:        1
Removing temp directory.

3.23.12. Extracting gate netlist of module `\w_flops' to `<abc-temp-dir>/input.blif'..
Extracted 548 gates and 796 wires to a netlist network with 246 inputs and 128 outputs.

3.23.12.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC:
ABC: + read_blif <abc-temp-dir>/input.blif
ABC: + read_library <abc-temp-dir>/stdcells.genlib
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash
ABC: + dretime
ABC: + retime
ABC: + map
ABC: + write_blif <abc-temp-dir>/output.blif

3.23.12.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       49
ABC RESULTS:            ANDNOT cells:       87
ABC RESULTS:              AOI3 cells:        1
ABC RESULTS:               MUX cells:      240
ABC RESULTS:              NAND cells:       12
ABC RESULTS:               NOR cells:       25
ABC RESULTS:               NOT cells:       73
ABC RESULTS:                OR cells:       26
ABC RESULTS:             ORNOT cells:        5
ABC RESULTS:              XNOR cells:       48
ABC RESULTS:               XOR cells:       24
ABC RESULTS:        internal signals:      422
ABC RESULTS:           input signals:      246
ABC RESULTS:          output signals:      128
Removing temp directory.

3.24. Executing OPT pass (performing simple optimizations).

3.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\loop_limit\LOOP_LIMIT=5000.
Optimizing module abc_calculation.
<suppressed ~31 debug messages>
Optimizing module area_sys.
<suppressed ~59 debug messages>
Optimizing module compare.
<suppressed ~3 debug messages>
Optimizing module couter.
Optimizing module hash_final.
Optimizing module micro_ucr_hash.
Optimizing module mod_x_k.
Optimizing module mux.
Optimizing module nonce_gen.
<suppressed ~104 debug messages>
Optimizing module validity_reg.
Optimizing module w_flops.

3.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\loop_limit\LOOP_LIMIT=5000'.
Finding identical cells in module `\abc_calculation'.
Finding identical cells in module `\area_sys'.
Finding identical cells in module `\compare'.
Finding identical cells in module `\couter'.
<suppressed ~3 debug messages>
Finding identical cells in module `\hash_final'.
<suppressed ~3 debug messages>
Finding identical cells in module `\micro_ucr_hash'.
Finding identical cells in module `\mod_x_k'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\nonce_gen'.
Finding identical cells in module `\validity_reg'.
Finding identical cells in module `\w_flops'.
Removed a total of 2 cells.

3.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\loop_limit\LOOP_LIMIT=5000..
Finding unused cells or wires in module \abc_calculation..
Finding unused cells or wires in module \area_sys..
Finding unused cells or wires in module \compare..
Finding unused cells or wires in module \couter..
Finding unused cells or wires in module \hash_final..
Finding unused cells or wires in module \micro_ucr_hash..
Finding unused cells or wires in module \mod_x_k..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \nonce_gen..
Finding unused cells or wires in module \validity_reg..
Finding unused cells or wires in module \w_flops..
Removed 7 unused cells and 2429 unused wires.
<suppressed ~18 debug messages>

3.24.5. Finished fast OPT passes.

3.25. Executing HIERARCHY pass (managing design hierarchy).

3.25.1. Analyzing design hierarchy..
Top module:  \area_sys
Used module:     \compare
Used module:     $paramod\loop_limit\LOOP_LIMIT=5000
Used module:     \micro_ucr_hash
Used module:         \abc_calculation
Used module:         \couter
Used module:         \hash_final
Used module:         \mod_x_k
Used module:         \mux
Used module:         \w_flops
Used module:     \nonce_gen
Used module:     \validity_reg

3.25.2. Analyzing design hierarchy..
Top module:  \area_sys
Used module:     \compare
Used module:     $paramod\loop_limit\LOOP_LIMIT=5000
Used module:     \micro_ucr_hash
Used module:         \abc_calculation
Used module:         \couter
Used module:         \hash_final
Used module:         \mod_x_k
Used module:         \mux
Used module:         \w_flops
Used module:     \nonce_gen
Used module:     \validity_reg
Removed 0 unused modules.

3.26. Printing statistics.

=== $paramod\loop_limit\LOOP_LIMIT=5000 ===

Number of wires:                108
Number of wire bits:            185
Number of public wires:           8
Number of public wire bits:      55
Number of memories:               0
Number of memory bits:            0
Number of processes:              0
Number of cells:                164
$_ANDNOT_                      22
$_AND_                          1
$_AOI3_                        11
$_DFF_P_                       33
$_MUX_                          1
$_NAND_                        10
$_NOT_                         19
$_OAI3_                         6
$_ORNOT_                        4
$_OR_                          41
$_XNOR_                         1
$_XOR_                         14
compare                         1

=== abc_calculation ===

Number of wires:               1812
Number of wire bits:           2159
Number of public wires:          27
Number of public wire bits:     351
Number of memories:               0
Number of memory bits:            0
Number of processes:              0
Number of cells:               1832
$_ANDNOT_                     468
$_AND_                         31
$_AOI3_                        54
$_DFF_P_                       24
$_MUX_                        308
$_NAND_                        35
$_NOR_                         80
$_NOT_                        159
$_OAI3_                        52
$_ORNOT_                       57
$_OR_                          55
$_XNOR_                       132
$_XOR_                        377

=== area_sys ===

Number of wires:                264
Number of wire bits:            524
Number of public wires:          41
Number of public wire bits:     209
Number of memories:               0
Number of memory bits:            0
Number of processes:              0
Number of cells:                332
$_ANDNOT_                      62
$_AOI3_                         1
$_DFF_P_                       60
$_MUX_                         96
$_NAND_                         3
$_NOR_                          8
$_NOT_                         45
$_OAI3_                         9
$_ORNOT_                       25
$_OR_                          10
$_XOR_                          7
$paramod\loop_limit\LOOP_LIMIT=5000      1
compare                         2
micro_ucr_hash                  1
nonce_gen                       1
validity_reg                    1

=== compare ===

Number of wires:                 76
Number of wire bits:            110
Number of public wires:           5
Number of public wire bits:      37
Number of memories:               0
Number of memory bits:            0
Number of processes:              0
Number of cells:                 76
$_ANDNOT_                      26
$_AOI3_                         5
$_DFF_P_                        3
$_MUX_                          3
$_NOR_                          2
$_OAI3_                         5
$_ORNOT_                        8
$_OR_                           8
$_XNOR_                         2
$_XOR_                         14

=== couter ===

Number of wires:                 34
Number of wire bits:             42
Number of public wires:           4
Number of public wire bits:       8
Number of memories:               0
Number of memory bits:            0
Number of processes:              0
Number of cells:                 39
$_ANDNOT_                       7
$_AND_                          2
$_DFF_P_                        5
$_MUX_                          4
$_NAND_                         2
$_NOT_                          6
$_OAI4_                         1
$_ORNOT_                        2
$_OR_                           5
$_XNOR_                         1
$_XOR_                          4

=== hash_final ===

Number of wires:                158
Number of wire bits:            227
Number of public wires:           8
Number of public wire bits:      56
Number of memories:               0
Number of memory bits:            0
Number of processes:              0
Number of cells:                196
$_ANDNOT_                      31
$_AND_                          7
$_AOI3_                         2
$_DFF_P_                       25
$_MUX_                         49
$_NAND_                         6
$_NOR_                          3
$_NOT_                         43
$_OAI3_                         1
$_ORNOT_                        3
$_OR_                           6
$_XNOR_                         2
$_XOR_                         18

=== micro_ucr_hash ===

Number of wires:                 28
Number of wire bits:            352
Number of public wires:          28
Number of public wire bits:     352
Number of memories:               0
Number of memory bits:            0
Number of processes:              0
Number of cells:                  6
abc_calculation                 1
couter                          1
hash_final                      1
mod_x_k                         1
mux                             1
w_flops                         1

=== mod_x_k ===

Number of wires:                 78
Number of wire bits:            161
Number of public wires:           8
Number of public wire bits:      63
Number of memories:               0
Number of memory bits:            0
Number of processes:              0
Number of cells:                130
$_ANDNOT_                      16
$_AND_                         16
$_AOI3_                         6
$_DFF_P_                       32
$_MUX_                         16
$_NAND_                         5
$_NOR_                         10
$_NOT_                         11
$_OAI3_                         3
$_ORNOT_                        1
$_OR_                           6
$_XNOR_                         8

=== mux ===

Number of wires:                  8
Number of wire bits:             98
Number of public wires:           7
Number of public wire bits:      74
Number of memories:               0
Number of memory bits:            0
Number of processes:              0
Number of cells:                 48
$_AND_                         13
$_DFF_P_                       24
$_ORNOT_                       11

=== nonce_gen ===

Number of wires:                574
Number of wire bits:            701
Number of public wires:          15
Number of public wire bits:      86
Number of memories:               0
Number of memory bits:            0
Number of processes:              0
Number of cells:                680
$_ANDNOT_                      45
$_AND_                          7
$_AOI3_                        16
$_DFF_P_                       65
$_MUX_                        346
$_NAND_                        32
$_NOR_                          1
$_NOT_                         48
$_OAI3_                        24
$_ORNOT_                       13
$_OR_                          21
$_XNOR_                        25
$_XOR_                         37

=== validity_reg ===

Number of wires:                 11
Number of wire bits:             15
Number of public wires:           5
Number of public wire bits:       9
Number of memories:               0
Number of memory bits:            0
Number of processes:              0
Number of cells:                  7
$_ANDNOT_                       1
$_DFF_P_                        1
$_OR_                           2
$_XOR_                          3

=== w_flops ===

Number of wires:                484
Number of wire bits:            981
Number of public wires:          21
Number of public wire bits:     391
Number of memories:               0
Number of memory bits:            0
Number of processes:              0
Number of cells:                718
$_ANDNOT_                      87
$_AND_                         49
$_AOI3_                         1
$_DFF_P_                      128
$_MUX_                        240
$_NAND_                        12
$_NOR_                         25
$_NOT_                         73
$_ORNOT_                        5
$_OR_                          26
$_XNOR_                        48
$_XOR_                         24

=== design hierarchy ===

area_sys                          1
$paramod\loop_limit\LOOP_LIMIT=5000      1
compare                       1
compare                         2
micro_ucr_hash                  1
abc_calculation               1
couter                        1
hash_final                    1
mod_x_k                       1
mux                           1
w_flops                       1
nonce_gen                       1
validity_reg                    1

Number of wires:               3787
Number of wire bits:           5775
Number of public wires:         187
Number of public wire bits:    1765
Number of memories:               0
Number of memory bits:            0
Number of processes:              0
Number of cells:               4367
$_ANDNOT_                     817
$_AND_                        126
$_AOI3_                       106
$_DFF_P_                      406
$_MUX_                       1069
$_NAND_                       105
$_NOR_                        133
$_NOT_                        404
$_OAI3_                       110
$_OAI4_                         1
$_ORNOT_                      145
$_OR_                         196
$_XNOR_                       223
$_XOR_                        526

3.27. Executing CHECK pass (checking for obvious problems).
checking module $paramod\loop_limit\LOOP_LIMIT=5000..
checking module abc_calculation..
checking module area_sys..
checking module compare..
checking module couter..
checking module hash_final..
checking module micro_ucr_hash..
checking module mod_x_k..
checking module mux..
checking module nonce_gen..
checking module validity_reg..
checking module w_flops..
found and reported 0 problems.

4. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
cell DFFNEGX1 (noninv, pins=3, area=96.00) is a direct match for cell type $_DFF_N_.
cell DFFPOSX1 (noninv, pins=3, area=96.00) is a direct match for cell type $_DFF_P_.
cell DFFSR (noninv, pins=5, area=176.00) is a direct match for cell type $_DFFSR_PNN_.
create mapping for $_DFFSR_PPN_ from mapping for $_DFFSR_PNN_.
create mapping for $_DFFSR_PNP_ from mapping for $_DFFSR_PNN_.
create mapping for $_DFFSR_PPP_ from mapping for $_DFFSR_PNP_.
create mapping for $_DFFSR_NNN_ from mapping for $_DFFSR_PNN_.
create mapping for $_DFFSR_NPN_ from mapping for $_DFFSR_NNN_.
create mapping for $_DFFSR_NNP_ from mapping for $_DFFSR_NNN_.
create mapping for $_DFFSR_NPP_ from mapping for $_DFFSR_NNP_.
create mapping for $_DFF_NN0_ from mapping for $_DFFSR_NNN_.
create mapping for $_DFF_NN1_ from mapping for $_DFFSR_NNN_.
create mapping for $_DFF_NP0_ from mapping for $_DFFSR_NPP_.
create mapping for $_DFF_NP1_ from mapping for $_DFFSR_NPP_.
create mapping for $_DFF_PN0_ from mapping for $_DFFSR_PNN_.
create mapping for $_DFF_PN1_ from mapping for $_DFFSR_PNN_.
create mapping for $_DFF_PP0_ from mapping for $_DFFSR_PPP_.
create mapping for $_DFF_PP1_ from mapping for $_DFFSR_PPP_.
final dff cell mappings:
DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
DFFSR _DFF_NN0_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( 1));
DFFSR _DFF_NN1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S( R));
DFFSR _DFF_NP0_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( 1));
DFFSR _DFF_NP1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S(~R));
DFFSR _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( 1));
DFFSR _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S( R));
DFFSR _DFF_PP0_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( 1));
DFFSR _DFF_PP1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S(~R));
DFFSR _DFFSR_NNN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( S));
DFFSR _DFFSR_NNP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( S));
DFFSR _DFFSR_NPN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S(~S));
DFFSR _DFFSR_NPP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S(~S));
DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
DFFSR _DFFSR_PNP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( S));
DFFSR _DFFSR_PPN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S(~S));
DFFSR _DFFSR_PPP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S(~S));
Mapping DFF cells in module `$paramod\loop_limit\LOOP_LIMIT=5000':
mapped 33 $_DFF_P_ cells to \DFFPOSX1 cells.
Mapping DFF cells in module `\abc_calculation':
mapped 24 $_DFF_P_ cells to \DFFPOSX1 cells.
Mapping DFF cells in module `\area_sys':
mapped 60 $_DFF_P_ cells to \DFFPOSX1 cells.
Mapping DFF cells in module `\compare':
mapped 3 $_DFF_P_ cells to \DFFPOSX1 cells.
Mapping DFF cells in module `\couter':
mapped 5 $_DFF_P_ cells to \DFFPOSX1 cells.
Mapping DFF cells in module `\hash_final':
mapped 25 $_DFF_P_ cells to \DFFPOSX1 cells.
Mapping DFF cells in module `\micro_ucr_hash':
Mapping DFF cells in module `\mod_x_k':
mapped 32 $_DFF_P_ cells to \DFFPOSX1 cells.
Mapping DFF cells in module `\mux':
mapped 24 $_DFF_P_ cells to \DFFPOSX1 cells.
Mapping DFF cells in module `\nonce_gen':
mapped 65 $_DFF_P_ cells to \DFFPOSX1 cells.
Mapping DFF cells in module `\validity_reg':
mapped 1 $_DFF_P_ cells to \DFFPOSX1 cells.
Mapping DFF cells in module `\w_flops':
mapped 128 $_DFF_P_ cells to \DFFPOSX1 cells.

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\loop_limit\LOOP_LIMIT=5000.
Optimizing module abc_calculation.
Optimizing module area_sys.
Optimizing module compare.
Optimizing module couter.
Optimizing module hash_final.
Optimizing module micro_ucr_hash.
Optimizing module mod_x_k.
Optimizing module mux.
Optimizing module nonce_gen.
Optimizing module validity_reg.
Optimizing module w_flops.

5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\loop_limit\LOOP_LIMIT=5000'.
Finding identical cells in module `\abc_calculation'.
Finding identical cells in module `\area_sys'.
Finding identical cells in module `\compare'.
Finding identical cells in module `\couter'.
Finding identical cells in module `\hash_final'.
Finding identical cells in module `\micro_ucr_hash'.
Finding identical cells in module `\mod_x_k'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\nonce_gen'.
Finding identical cells in module `\validity_reg'.
Finding identical cells in module `\w_flops'.
Removed a total of 0 cells.

5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\loop_limit\LOOP_LIMIT=5000..
Creating internal representation of mux trees.
No muxes found in this module.
Running muxtree optimizer on module \abc_calculation..
Creating internal representation of mux trees.
No muxes found in this module.
Running muxtree optimizer on module \area_sys..
Creating internal representation of mux trees.
No muxes found in this module.
Running muxtree optimizer on module \compare..
Creating internal representation of mux trees.
No muxes found in this module.
Running muxtree optimizer on module \couter..
Creating internal representation of mux trees.
No muxes found in this module.
Running muxtree optimizer on module \hash_final..
Creating internal representation of mux trees.
No muxes found in this module.
Running muxtree optimizer on module \micro_ucr_hash..
Creating internal representation of mux trees.
No muxes found in this module.
Running muxtree optimizer on module \mod_x_k..
Creating internal representation of mux trees.
No muxes found in this module.
Running muxtree optimizer on module \mux..
Creating internal representation of mux trees.
No muxes found in this module.
Running muxtree optimizer on module \nonce_gen..
Creating internal representation of mux trees.
No muxes found in this module.
Running muxtree optimizer on module \validity_reg..
Creating internal representation of mux trees.
No muxes found in this module.
Running muxtree optimizer on module \w_flops..
Creating internal representation of mux trees.
No muxes found in this module.
Removed 0 multiplexer ports.

5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module $paramod\loop_limit\LOOP_LIMIT=5000.
Optimizing cells in module \abc_calculation.
Optimizing cells in module \area_sys.
Optimizing cells in module \compare.
Optimizing cells in module \couter.
Optimizing cells in module \hash_final.
Optimizing cells in module \micro_ucr_hash.
Optimizing cells in module \mod_x_k.
Optimizing cells in module \mux.
Optimizing cells in module \nonce_gen.
Optimizing cells in module \validity_reg.
Optimizing cells in module \w_flops.
Performed a total of 0 changes.

5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\loop_limit\LOOP_LIMIT=5000'.
Finding identical cells in module `\abc_calculation'.
Finding identical cells in module `\area_sys'.
Finding identical cells in module `\compare'.
Finding identical cells in module `\couter'.
Finding identical cells in module `\hash_final'.
Finding identical cells in module `\micro_ucr_hash'.
Finding identical cells in module `\mod_x_k'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\nonce_gen'.
Finding identical cells in module `\validity_reg'.
Finding identical cells in module `\w_flops'.
Removed a total of 0 cells.

5.6. Executing OPT_RMDFF pass (remove dff with constant values).

5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\loop_limit\LOOP_LIMIT=5000..
Finding unused cells or wires in module \abc_calculation..
Finding unused cells or wires in module \area_sys..
Finding unused cells or wires in module \compare..
Finding unused cells or wires in module \couter..
Finding unused cells or wires in module \hash_final..
Finding unused cells or wires in module \micro_ucr_hash..
Finding unused cells or wires in module \mod_x_k..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \nonce_gen..
Finding unused cells or wires in module \validity_reg..
Finding unused cells or wires in module \w_flops..

5.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\loop_limit\LOOP_LIMIT=5000.
Optimizing module abc_calculation.
Optimizing module area_sys.
Optimizing module compare.
Optimizing module couter.
Optimizing module hash_final.
Optimizing module micro_ucr_hash.
Optimizing module mod_x_k.
Optimizing module mux.
Optimizing module nonce_gen.
Optimizing module validity_reg.
Optimizing module w_flops.

5.9. Finished OPT passes. (There is nothing left to do.)

6. Executing ABC pass (technology mapping using ABC).

6.1. Extracting gate netlist of module `$paramod\loop_limit\LOOP_LIMIT=5000' to `<abc-temp-dir>/input.blif'..
Extracted 130 gates and 168 wires to a netlist network with 38 inputs and 33 outputs.

6.1.1. Executing ABC.
Running ABC command: /usr/lib/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC:
ABC: + read_blif <abc-temp-dir>/input.blif
ABC: + read_lib -w /usr/share/qflow/tech/osu018/osu018_stdcells.lib
ABC: Parsing finished successfully.  Parsing time =     0.02 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.03 sec
ABC: Memory =    0.36 MB. Time =     0.03 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash
ABC: + scorr
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig
ABC: + retime
ABC: + strash
ABC: + dch -f
ABC: + map -M 1
ABC: + write_blif <abc-temp-dir>/output.blif

6.1.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        1
ABC RESULTS:           AOI21X1 cells:        7
ABC RESULTS:             INVX1 cells:       26
ABC RESULTS:           NAND2X1 cells:        8
ABC RESULTS:           NAND3X1 cells:        4
ABC RESULTS:            NOR2X1 cells:       27
ABC RESULTS:            NOR3X1 cells:        3
ABC RESULTS:           OAI21X1 cells:       14
ABC RESULTS:             OR2X2 cells:        6
ABC RESULTS:        internal signals:       97
ABC RESULTS:           input signals:       38
ABC RESULTS:          output signals:       33
Removing temp directory.

6.2. Extracting gate netlist of module `\abc_calculation' to `<abc-temp-dir>/input.blif'..
Extracted 1808 gates and 2126 wires to a netlist network with 318 inputs and 24 outputs.

6.2.1. Executing ABC.
Running ABC command: /usr/lib/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC:
ABC: + read_blif <abc-temp-dir>/input.blif
ABC: + read_lib -w /usr/share/qflow/tech/osu018/osu018_stdcells.lib
ABC: Parsing finished successfully.  Parsing time =     0.02 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.03 sec
ABC: Memory =    0.36 MB. Time =     0.03 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash
ABC: + scorr
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig
ABC: + retime
ABC: + strash
ABC: + dch -f
ABC: + map -M 1
ABC: + write_blif <abc-temp-dir>/output.blif

6.2.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:       82
ABC RESULTS:           AOI21X1 cells:      280
ABC RESULTS:           AOI22X1 cells:        7
ABC RESULTS:             INVX1 cells:      319
ABC RESULTS:            MUX2X1 cells:        7
ABC RESULTS:           NAND2X1 cells:      247
ABC RESULTS:           NAND3X1 cells:       44
ABC RESULTS:            NOR2X1 cells:      337
ABC RESULTS:            NOR3X1 cells:        8
ABC RESULTS:           OAI21X1 cells:      474
ABC RESULTS:           OAI22X1 cells:        9
ABC RESULTS:             OR2X2 cells:       21
ABC RESULTS:           XNOR2X1 cells:      167
ABC RESULTS:            XOR2X1 cells:       70
ABC RESULTS:          _const0_ cells:        4
ABC RESULTS:        internal signals:     1784
ABC RESULTS:           input signals:      318
ABC RESULTS:          output signals:       24
Removing temp directory.

6.3. Extracting gate netlist of module `\area_sys' to `<abc-temp-dir>/input.blif'..
Extracted 266 gates and 349 wires to a netlist network with 83 inputs and 60 outputs.

6.3.1. Executing ABC.
Running ABC command: /usr/lib/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC:
ABC: + read_blif <abc-temp-dir>/input.blif
ABC: + read_lib -w /usr/share/qflow/tech/osu018/osu018_stdcells.lib
ABC: Parsing finished successfully.  Parsing time =     0.02 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.03 sec
ABC: Memory =    0.36 MB. Time =     0.03 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash
ABC: + scorr
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig
ABC: + retime
ABC: + strash
ABC: + dch -f
ABC: + map -M 1
ABC: + write_blif <abc-temp-dir>/output.blif

6.3.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        3
ABC RESULTS:           AOI21X1 cells:       31
ABC RESULTS:           AOI22X1 cells:        4
ABC RESULTS:             INVX1 cells:       46
ABC RESULTS:           NAND2X1 cells:       11
ABC RESULTS:           NAND3X1 cells:       20
ABC RESULTS:            NOR2X1 cells:       36
ABC RESULTS:            NOR3X1 cells:        1
ABC RESULTS:           OAI21X1 cells:       31
ABC RESULTS:             OR2X2 cells:        2
ABC RESULTS:        internal signals:      206
ABC RESULTS:           input signals:       83
ABC RESULTS:          output signals:       60
Removing temp directory.

6.4. Extracting gate netlist of module `\compare' to `<abc-temp-dir>/input.blif'..
Extracted 73 gates and 109 wires to a netlist network with 36 inputs and 3 outputs.

6.4.1. Executing ABC.
Running ABC command: /usr/lib/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC:
ABC: + read_blif <abc-temp-dir>/input.blif
ABC: + read_lib -w /usr/share/qflow/tech/osu018/osu018_stdcells.lib
ABC: Parsing finished successfully.  Parsing time =     0.03 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.04 sec
ABC: Memory =    0.36 MB. Time =     0.04 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash
ABC: + scorr
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig
ABC: + retime
ABC: + strash
ABC: + dch -f
ABC: + map -M 1
ABC: + write_blif <abc-temp-dir>/output.blif

6.4.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        3
ABC RESULTS:           AOI21X1 cells:        9
ABC RESULTS:           AOI22X1 cells:        6
ABC RESULTS:             INVX1 cells:       30
ABC RESULTS:           NAND2X1 cells:       20
ABC RESULTS:           NAND3X1 cells:        4
ABC RESULTS:            NOR2X1 cells:       17
ABC RESULTS:           OAI21X1 cells:       13
ABC RESULTS:           OAI22X1 cells:        2
ABC RESULTS:             OR2X2 cells:        3
ABC RESULTS:           XNOR2X1 cells:        6
ABC RESULTS:            XOR2X1 cells:        3
ABC RESULTS:        internal signals:       70
ABC RESULTS:           input signals:       36
ABC RESULTS:          output signals:        3
Removing temp directory.

6.5. Extracting gate netlist of module `\couter' to `<abc-temp-dir>/input.blif'..
Extracted 34 gates and 41 wires to a netlist network with 7 inputs and 5 outputs.

6.5.1. Executing ABC.
Running ABC command: /usr/lib/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC:
ABC: + read_blif <abc-temp-dir>/input.blif
ABC: + read_lib -w /usr/share/qflow/tech/osu018/osu018_stdcells.lib
ABC: Parsing finished successfully.  Parsing time =     0.02 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.03 sec
ABC: Memory =    0.36 MB. Time =     0.03 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash
ABC: + scorr
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig
ABC: + retime
ABC: + strash
ABC: + dch -f
ABC: + map -M 1
ABC: + write_blif <abc-temp-dir>/output.blif

6.5.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        3
ABC RESULTS:           AOI21X1 cells:        4
ABC RESULTS:             INVX1 cells:        3
ABC RESULTS:           NAND2X1 cells:        4
ABC RESULTS:           NAND3X1 cells:        2
ABC RESULTS:            NOR3X1 cells:        2
ABC RESULTS:             OR2X2 cells:        1
ABC RESULTS:           XNOR2X1 cells:        1
ABC RESULTS:        internal signals:       29
ABC RESULTS:           input signals:        7
ABC RESULTS:          output signals:        5
Removing temp directory.

6.6. Extracting gate netlist of module `\hash_final' to `<abc-temp-dir>/input.blif'..
Extracted 171 gates and 226 wires to a netlist network with 55 inputs and 25 outputs.

6.6.1. Executing ABC.
Running ABC command: /usr/lib/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC:
ABC: + read_blif <abc-temp-dir>/input.blif
ABC: + read_lib -w /usr/share/qflow/tech/osu018/osu018_stdcells.lib
ABC: Parsing finished successfully.  Parsing time =     0.02 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.03 sec
ABC: Memory =    0.36 MB. Time =     0.03 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash
ABC: + scorr
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig
ABC: + retime
ABC: + strash
ABC: + dch -f
ABC: + map -M 1
ABC: + write_blif <abc-temp-dir>/output.blif

6.6.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        1
ABC RESULTS:           AOI21X1 cells:       39
ABC RESULTS:             INVX1 cells:       30
ABC RESULTS:            MUX2X1 cells:        3
ABC RESULTS:           NAND2X1 cells:       21
ABC RESULTS:           NAND3X1 cells:        6
ABC RESULTS:            NOR2X1 cells:       15
ABC RESULTS:            NOR3X1 cells:        1
ABC RESULTS:           OAI21X1 cells:       36
ABC RESULTS:             OR2X2 cells:        1
ABC RESULTS:           XNOR2X1 cells:        6
ABC RESULTS:        internal signals:      146
ABC RESULTS:           input signals:       55
ABC RESULTS:          output signals:       25
Removing temp directory.

6.7. Extracting gate netlist of module `\micro_ucr_hash' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

6.8. Extracting gate netlist of module `\mod_x_k' to `<abc-temp-dir>/input.blif'..
Extracted 98 gates and 152 wires to a netlist network with 54 inputs and 32 outputs.

6.8.1. Executing ABC.
Running ABC command: /usr/lib/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC:
ABC: + read_blif <abc-temp-dir>/input.blif
ABC: + read_lib -w /usr/share/qflow/tech/osu018/osu018_stdcells.lib
ABC: Parsing finished successfully.  Parsing time =     0.02 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.03 sec
ABC: Memory =    0.36 MB. Time =     0.03 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash
ABC: + scorr
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig
ABC: + retime
ABC: + strash
ABC: + dch -f
ABC: + map -M 1
ABC: + write_blif <abc-temp-dir>/output.blif

6.8.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:       24
ABC RESULTS:           AOI21X1 cells:       10
ABC RESULTS:             BUFX2 cells:        2
ABC RESULTS:             INVX1 cells:        1
ABC RESULTS:           NAND2X1 cells:        1
ABC RESULTS:            NOR2X1 cells:        3
ABC RESULTS:           OAI21X1 cells:        9
ABC RESULTS:             OR2X2 cells:        2
ABC RESULTS:          _const0_ cells:        3
ABC RESULTS:        internal signals:       66
ABC RESULTS:           input signals:       54
ABC RESULTS:          output signals:       32
Removing temp directory.

6.9. Extracting gate netlist of module `\mux' to `<abc-temp-dir>/input.blif'..
Extracted 24 gates and 49 wires to a netlist network with 25 inputs and 24 outputs.

6.9.1. Executing ABC.
Running ABC command: /usr/lib/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC:
ABC: + read_blif <abc-temp-dir>/input.blif
ABC: + read_lib -w /usr/share/qflow/tech/osu018/osu018_stdcells.lib
ABC: Parsing finished successfully.  Parsing time =     0.02 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.03 sec
ABC: Memory =    0.36 MB. Time =     0.03 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash
ABC: + scorr
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig
ABC: + retime
ABC: + strash
ABC: + dch -f
ABC: + map -M 1
ABC: + write_blif <abc-temp-dir>/output.blif

6.9.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:       13
ABC RESULTS:             INVX1 cells:       11
ABC RESULTS:           NAND2X1 cells:       11
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       25
ABC RESULTS:          output signals:       24
Removing temp directory.

6.10. Extracting gate netlist of module `\nonce_gen' to `<abc-temp-dir>/input.blif'..
Extracted 615 gates and 700 wires to a netlist network with 85 inputs and 65 outputs.

6.10.1. Executing ABC.
Running ABC command: /usr/lib/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC:
ABC: + read_blif <abc-temp-dir>/input.blif
ABC: + read_lib -w /usr/share/qflow/tech/osu018/osu018_stdcells.lib
ABC: Parsing finished successfully.  Parsing time =     0.02 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.03 sec
ABC: Memory =    0.36 MB. Time =     0.03 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash
ABC: + scorr
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig
ABC: + retime
ABC: + strash
ABC: + dch -f
ABC: + map -M 1
ABC: + write_blif <abc-temp-dir>/output.blif

6.10.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:       24
ABC RESULTS:           AOI21X1 cells:       96
ABC RESULTS:           AOI22X1 cells:        4
ABC RESULTS:             INVX1 cells:      108
ABC RESULTS:            MUX2X1 cells:       11
ABC RESULTS:           NAND2X1 cells:       82
ABC RESULTS:           NAND3X1 cells:       11
ABC RESULTS:            NOR2X1 cells:       87
ABC RESULTS:            NOR3X1 cells:        7
ABC RESULTS:           OAI21X1 cells:      124
ABC RESULTS:           OAI22X1 cells:       12
ABC RESULTS:             OR2X2 cells:        8
ABC RESULTS:           XNOR2X1 cells:       15
ABC RESULTS:            XOR2X1 cells:        8
ABC RESULTS:        internal signals:      550
ABC RESULTS:           input signals:       85
ABC RESULTS:          output signals:       65
Removing temp directory.

6.11. Extracting gate netlist of module `\validity_reg' to `<abc-temp-dir>/input.blif'..
Extracted 6 gates and 13 wires to a netlist network with 7 inputs and 1 outputs.

6.11.1. Executing ABC.
Running ABC command: /usr/lib/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC:
ABC: + read_blif <abc-temp-dir>/input.blif
ABC: + read_lib -w /usr/share/qflow/tech/osu018/osu018_stdcells.lib
ABC: Parsing finished successfully.  Parsing time =     0.02 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.02 sec
ABC: Memory =    0.36 MB. Time =     0.02 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash
ABC: + scorr
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig
ABC: + retime
ABC: + strash
ABC: + dch -f
ABC: + map -M 1
ABC: + write_blif <abc-temp-dir>/output.blif

6.11.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        1
ABC RESULTS:             INVX1 cells:        4
ABC RESULTS:            NOR2X1 cells:        1
ABC RESULTS:            NOR3X1 cells:        1
ABC RESULTS:           OAI21X1 cells:        1
ABC RESULTS:           OAI22X1 cells:        2
ABC RESULTS:        internal signals:        5
ABC RESULTS:           input signals:        7
ABC RESULTS:          output signals:        1
Removing temp directory.

6.12. Extracting gate netlist of module `\w_flops' to `<abc-temp-dir>/input.blif'..
Extracted 590 gates and 836 wires to a netlist network with 246 inputs and 128 outputs.

6.12.1. Executing ABC.
Running ABC command: /usr/lib/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC:
ABC: + read_blif <abc-temp-dir>/input.blif
ABC: + read_lib -w /usr/share/qflow/tech/osu018/osu018_stdcells.lib
ABC: Parsing finished successfully.  Parsing time =     0.02 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.03 sec
ABC: Memory =    0.36 MB. Time =     0.03 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash
ABC: + scorr
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig
ABC: + retime
ABC: + strash
ABC: + dch -f
ABC: + map -M 1
ABC: + write_blif <abc-temp-dir>/output.blif

6.12.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        8
ABC RESULTS:           AOI21X1 cells:      120
ABC RESULTS:             INVX1 cells:       49
ABC RESULTS:           NAND2X1 cells:      118
ABC RESULTS:           NAND3X1 cells:       14
ABC RESULTS:            NOR2X1 cells:       47
ABC RESULTS:            NOR3X1 cells:        8
ABC RESULTS:           OAI21X1 cells:      121
ABC RESULTS:            XOR2X1 cells:       64
ABC RESULTS:        internal signals:      462
ABC RESULTS:           input signals:      246
ABC RESULTS:          output signals:      128
Removing temp directory.

7. Executing FLATTEN pass (flatten design).
Using template $paramod\loop_limit\LOOP_LIMIT=5000 for cells of type $paramod\loop_limit\LOOP_LIMIT=5000.
Using template nonce_gen for cells of type nonce_gen.
Using template micro_ucr_hash for cells of type micro_ucr_hash.
Using template compare for cells of type compare.
Using template validity_reg for cells of type validity_reg.
Using template couter for cells of type couter.
Using template hash_final for cells of type hash_final.
Using template mux for cells of type mux.
Using template mod_x_k for cells of type mod_x_k.
Using template w_flops for cells of type w_flops.
Using template abc_calculation for cells of type abc_calculation.
<suppressed ~13 debug messages>
No more expansions possible.
Deleting now unused module $paramod\loop_limit\LOOP_LIMIT=5000.
Deleting now unused module abc_calculation.
Deleting now unused module compare.
Deleting now unused module couter.
Deleting now unused module hash_final.
Deleting now unused module micro_ucr_hash.
Deleting now unused module mod_x_k.
Deleting now unused module mux.
Deleting now unused module nonce_gen.
Deleting now unused module validity_reg.
Deleting now unused module w_flops.

8. Executing SETUNDEF pass (replace undef values with defined constants).
Removed 3291 unused cells and 7904 unused wires.

9. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Don't map input port area_sys.block0: Missing option -inpad.
Don't map input port area_sys.block1: Missing option -inpad.
Don't map input port area_sys.block10: Missing option -inpad.
Don't map input port area_sys.block11: Missing option -inpad.
Don't map input port area_sys.block2: Missing option -inpad.
Don't map input port area_sys.block3: Missing option -inpad.
Don't map input port area_sys.block4: Missing option -inpad.
Don't map input port area_sys.block5: Missing option -inpad.
Don't map input port area_sys.block6: Missing option -inpad.
Don't map input port area_sys.block7: Missing option -inpad.
Don't map input port area_sys.block8: Missing option -inpad.
Don't map input port area_sys.block9: Missing option -inpad.
Don't map input port area_sys.clk: Missing option -inpad.
Mapping port area_sys.finish using BUFX2.
Mapping port area_sys.nonce0 using BUFX2.
Mapping port area_sys.nonce1 using BUFX2.
Mapping port area_sys.nonce2 using BUFX2.
Mapping port area_sys.nonce3 using BUFX2.
Don't map input port area_sys.reset: Missing option -inpad.
Don't map input port area_sys.start: Missing option -inpad.
Don't map input port area_sys.target: Missing option -inpad.

10. Executing OPT pass (performing simple optimizations).

10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module area_sys.

10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\area_sys'.
Removed a total of 0 cells.

10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \area_sys..
Creating internal representation of mux trees.
No muxes found in this module.
Removed 0 multiplexer ports.

10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \area_sys.
Performed a total of 0 changes.

10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\area_sys'.
Removed a total of 0 cells.

10.6. Executing OPT_RMDFF pass (remove dff with constant values).

10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \area_sys..

10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module area_sys.

10.9. Finished OPT passes. (There is nothing left to do.)

11. Executing BLIF backend.

12. Printing statistics.

=== area_sys ===

Number of wires:               1044
Number of wire bits:           1856
Number of public wires:        1044
Number of public wire bits:    1856
Number of memories:               0
Number of memory bits:            0
Number of processes:              0
Number of cells:               1271
AND2X2                         37
AOI21X1                       112
AOI22X1                        23
BUFX2                          34
DFFPOSX1                      147
INVX1                         252
MUX2X1                          7
NAND2X1                       152
NAND3X1                        49
NOR2X1                        209
NOR3X1                          8
OAI21X1                       164
OAI22X1                        11
OR2X2                          23
XNOR2X1                        26
XOR2X1                         17

Warnings: 26 unique messages, 26 total
End of script. Logfile hash: cf6c1b405a
CPU: user 22.38s system 0.13s, MEM: 43.38 MB total, 35.28 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 20% 22x opt_clean (4 sec), 17% 22x opt_expr (3 sec), ...
Running getpowerground to determine power and ground net names.
getpowerground.tcl  /usr/share/qflow/tech/osu018/osu018_stdcells.lef
Cleaning up output syntax
ypostproc.tcl area_sys_mapped.blif area_sys /usr/share/qflow/tech/osu018/osu018.sh vdd gnd
Yosys syntax postprocessing
Cleaning up blif file syntax
Running blifFanout (iterative)
Each iteration calls:
blifFanout -l 100 -c 20 -I area_sys_nofanout -s nullstring -p /usr/share/qflow/tech/osu018/osu018_stdcells.lib -b BUFX2,CLKBUF1 -i A,A -o Y,Y tmp.blif area_sys.blif
gates resized: 92
gates resized: 51
gates resized: 0
Generating RTL verilog and SPICE netlist file in directory
/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/synthesis
Files:
Verilog: /home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/synthesis/area_sys.rtl.v
Verilog: /home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/synthesis/area_sys.rtlnopwr.v
Verilog: /home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/synthesis/area_sys.rtlbb.v
Spice:   /home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/synthesis/area_sys.spc
Running blif2Verilog.
Running blif2BSpice.
Running spi2xspice.py
spi2xspice.py "/usr/share/qflow/tech/osu018/osu018_stdcells.lib" -io_time=1n -time=100p -idelay=10p -odelay=100p -cload=500f area_sys.spc area_sys.xspice

--------------------------------
Qflow project setup
--------------------------------

Technology set to osu018 from existing qflow_vars.sh file
Regenerating files for existing project area_sys
Qrouter detail maze router version 1.4.71.T
LEF Read, Line 191: NOTE:  Old format VIARULE ignored.
Reading LEF data from file /usr/share/qflow/tech/osu018/osu018_stdcells.lef.
LEF Read, Line 192: NOTE:  Old format VIARULE ignored.
LEF file:  Defines site core (ignored)
LEF Read, Line 196: NOTE:  Old format VIARULE ignored.
LEF read: Processed 2941 lines.
LEF Read, Line 197: NOTE:  Old format VIARULE ignored.
LEF Read: encountered 0 errors and 20 warnings total.
LEF Read, Line 207: NOTE:  Old format VIARULE ignored.
Vertical route layer at non-minimum pitch 1.6.  Using smaller pitch 0.8, will route on 1-of-2 tracks for layer metal6.
LEF Read, Line 208: NOTE:  Old format VIARULE ignored.
Running blif2cel to generate input files for graywolf
LEF Read, Line 212: NOTE:  Old format VIARULE ignored.
blif2cel.tcl --blif /home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/synthesis/area_sys.blif  --lef  /usr/share/qflow/tech/osu018/osu018_stdcells.lef --cel /home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/layout/area_sys.cel
LEF Read, Line 213: NOTE:  Old format VIARULE ignored.
LEF Read, Line 223: NOTE:  Old format VIARULE ignored.
LEF Read, Line 224: NOTE:  Old format VIARULE ignored.
LEF Read, Line 228: NOTE:  Old format VIARULE ignored.
LEF Read, Line 229: NOTE:  Old format VIARULE ignored.
LEF Read, Line 239: NOTE:  Old format VIARULE ignored.
LEF Read, Line 240: NOTE:  Old format VIARULE ignored.
LEF Read, Line 244: NOTE:  Old format VIARULE ignored.
LEF Read, Line 245: NOTE:  Old format VIARULE ignored.
LEF Read, Line 255: NOTE:  Old format VIARULE ignored.
LEF Read, Line 256: NOTE:  Old format VIARULE ignored.
LEF Read, Line 260: NOTE:  Old format VIARULE ignored.
LEF Read, Line 261: NOTE:  Old format VIARULE ignored.
No area_sys.cel1 file found for project. . . no partial blockages to apply to layout.
No area_sys.cel2 file found for project. . . continuing without pin placement hints
Running GrayWolf placement
graywolf  area_sys

--------------------------------
Qflow project setup
--------------------------------

Technology set to osu018 from existing qflow_vars.sh file
Regenerating files for existing project area_sys
Running yosys for verilog parsing and synthesis
yosys  -s area_sys.ys

/----------------------------------------------------------------------------\
|                                                                            |
|  yosys -- Yosys Open SYnthesis Suite                                       |
|                                                                            |
|  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
|                                                                            |
|  Permission to use, copy, modify, and/or distribute this software for any  |
|  purpose with or without fee is hereby granted, provided that the above    |
|  copyright notice and this permission notice appear in all copies.         |
|                                                                            |
|  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
|  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
|  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
|  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
|  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
|  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
|  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
|                                                                            |
\----------------------------------------------------------------------------/

Yosys 0.9 (git sha1 1979e0b)


-- Executing script file `area_sys.ys' --

1. Executing Liberty frontend.
Imported 32 cell types from liberty file.

2. Executing Verilog-2005 frontend: /home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v
Parsing Verilog input from `/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v' to AST representation.
Generating RTLIL representation for module `\compare'.
Generating RTLIL representation for module `\validity_reg'.
Generating RTLIL representation for module `\loop_limit'.
Generating RTLIL representation for module `\nonce_gen'.
Generating RTLIL representation for module `\couter'.
Generating RTLIL representation for module `\w_flops'.
Generating RTLIL representation for module `\mux'.
Generating RTLIL representation for module `\mod_x_k'.
Generating RTLIL representation for module `\abc_calculation'.
Generating RTLIL representation for module `\hash_final'.
Generating RTLIL representation for module `\micro_ucr_hash'.
Generating RTLIL representation for module `\area_sys'.
/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:120: Warning: Identifier `\hash_array2_0' is implicitly declared.
/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:122: Warning: Identifier `\hash_array2_1' is implicitly declared.
/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:123: Warning: Identifier `\hash_array2_2' is implicitly declared.
/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:176: Warning: Identifier `\nonce2_first_number' is implicitly declared.
/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:177: Warning: Identifier `\nonce2_second_number' is implicitly declared.
/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:181: Warning: Identifier `\nonce_2_0' is implicitly declared.
/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:182: Warning: Identifier `\nonce_2_1' is implicitly declared.
/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:183: Warning: Identifier `\nonce_2_2' is implicitly declared.
/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:184: Warning: Identifier `\nonce_2_3' is implicitly declared.
Successfully finished Verilog frontend.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \area_sys
Used module:     \loop_limit
Used module:         \compare
Used module:     \validity_reg
Used module:     \micro_ucr_hash
Used module:         \couter
Used module:         \w_flops
Used module:         \mux
Used module:         \abc_calculation
Used module:         \mod_x_k
Used module:         \hash_final
Used module:     \nonce_gen

3.1.2. Executing AST frontend in derive mode using pre-parsed AST for module `\loop_limit'.
Parameter 1 (\LOOP_LIMIT) = 5000
Generating RTLIL representation for module `$paramod\loop_limit\LOOP_LIMIT=5000'.

3.1.3. Analyzing design hierarchy..
Top module:  \area_sys
Used module:     $paramod\loop_limit\LOOP_LIMIT=5000
Used module:         \compare
Used module:     \validity_reg
Used module:     \micro_ucr_hash
Used module:         \couter
Used module:         \w_flops
Used module:         \mux
Used module:         \abc_calculation
Used module:         \mod_x_k
Used module:         \hash_final
Used module:     \nonce_gen

3.1.4. Analyzing design hierarchy..
Top module:  \area_sys
Used module:     $paramod\loop_limit\LOOP_LIMIT=5000
Used module:         \compare
Used module:     \validity_reg
Used module:     \micro_ucr_hash
Used module:         \couter
Used module:         \w_flops
Used module:         \mux
Used module:         \abc_calculation
Used module:         \mod_x_k
Used module:         \hash_final
Used module:     \nonce_gen
Removing unused module `\loop_limit'.
Removed 1 unused modules.
Warning: Resizing cell port area_sys.compare_hash_1.number0 from 1 bits to 16 bits.
Warning: Resizing cell port area_sys.compare_hash_0.number0 from 1 bits to 16 bits.
Warning: Resizing cell port area_sys.micro.hash_array2 from 1 bits to 8 bits.
Warning: Resizing cell port area_sys.micro.hash_array1 from 1 bits to 8 bits.
Warning: Resizing cell port area_sys.micro.hash_array0 from 1 bits to 8 bits.
Warning: Resizing cell port area_sys.micro.array_numbers15 from 1 bits to 8 bits.
Warning: Resizing cell port area_sys.micro.array_numbers14 from 1 bits to 8 bits.
Warning: Resizing cell port area_sys.micro.array_numbers13 from 1 bits to 8 bits.
Warning: Resizing cell port area_sys.micro.array_numbers12 from 1 bits to 8 bits.
Warning: Resizing cell port area_sys.nonce.nonce_array3 from 1 bits to 8 bits.
Warning: Resizing cell port area_sys.nonce.nonce_array2 from 1 bits to 8 bits.
Warning: Resizing cell port area_sys.nonce.nonce_array1 from 1 bits to 8 bits.
Warning: Resizing cell port area_sys.nonce.nonce_array0 from 1 bits to 8 bits.
Warning: Resizing cell port area_sys.nonce.source1 from 1 bits to 8 bits.
Warning: Resizing cell port area_sys.nonce.source0 from 1 bits to 8 bits.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 8 switch rules as full_case in process $proc$/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:80$211 in module area_sys.
Marked 2 switch rules as full_case in process $proc$Library.v:462$203 in module hash_final.
Marked 3 switch rules as full_case in process $proc$Library.v:346$95 in module abc_calculation.
Marked 2 switch rules as full_case in process $proc$Library.v:255$88 in module mod_x_k.
Marked 1 switch rules as full_case in process $proc$Library.v:199$86 in module mux.
Marked 1 switch rules as full_case in process $proc$Library.v:188$84 in module mux.
Marked 17 switch rules as full_case in process $proc$Library.v:73$33 in module w_flops.
Marked 3 switch rules as full_case in process $proc$Library.v:16$27 in module couter.
Marked 5 switch rules as full_case in process $proc$nonce_gen.v:24$13 in module nonce_gen.
Marked 4 switch rules as full_case in process $proc$loop_limit.v:19$229 in module $paramod\loop_limit\LOOP_LIMIT=5000.
Marked 2 switch rules as full_case in process $proc$validity_reg.v:14$4 in module validity_reg.
Marked 2 switch rules as full_case in process $proc$compare.v:13$1 in module compare.
Removed a total of 0 dead cases.

3.2.3. Executing PROC_INIT pass (extract init attributes).

3.2.4. Executing PROC_ARST pass (detect async resets in processes).

3.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\area_sys.$proc$/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:80$211'.
1/16: $0\invalid_nonce[0:0]
2/16: $0\counter1[7:0]
3/16: $0\counter0[7:0]
4/16: $0\nonce_ready[0:0]
5/16: $0\nonce0_second_number[7:0]
6/16: $0\nonce0_first_number[7:0]
7/16: $0\loop_variable[15:0]
8/16: $0\finish[0:0]
9/16: $0\nonce3[7:0]
10/16: $0\nonce2[7:0]
11/16: $0\nonce1[7:0]
12/16: $0\nonce0[7:0]
13/16: $0\counter[7:0]
14/16: $0\ready[0:0]
15/16: $0\stop[0:0]
16/16: $0\validity_reg[0:0]
Creating decoders for process `\hash_final.$proc$Library.v:462$203'.
1/4: $0\flag[0:0]
2/4: $0\out_hash2[7:0]
3/4: $0\out_hash1[7:0]
4/4: $0\out_hash0[7:0]
Creating decoders for process `\abc_calculation.$proc$Library.v:346$95'.
1/8: $3\out_logic_final[23:0] [23:16]
2/8: $3\out_logic_final[23:0] [7:0]
3/8: $3\out_logic_final[23:0] [15:8]
4/8: $2\out_logic_final[23:0] [23:16]
5/8: $2\out_logic_final[23:0] [7:0]
6/8: $2\out_logic_final[23:0] [15:8]
7/8: $1\out_logic_final[23:0]
8/8: $0\out_logic_final[23:0]
Creating decoders for process `\abc_calculation.$proc$Library.v:338$94'.
1/3: $0\c[7:0]
2/3: $0\b[7:0]
3/3: $0\a[7:0]
Creating decoders for process `\mod_x_k.$proc$Library.v:255$88'.
1/4: $0\b[7:0]
2/4: $0\k[7:0]
3/4: $0\x[7:0]
4/4: $0\a[7:0]
Creating decoders for process `\mux.$proc$Library.v:199$86'.
1/3: $0\out_abc_mem[23:0] [23:16]
2/3: $0\out_abc_mem[23:0] [15:8]
3/3: $0\out_abc_mem[23:0] [7:0]
Creating decoders for process `\mux.$proc$Library.v:188$84'.
1/4: $1\abc[23:0] [23:16]
2/4: $1\abc[23:0] [15:8]
3/4: $1\abc[23:0] [7:0]
4/4: $0\abc[23:0]
Creating decoders for process `\w_flops.$proc$Library.v:73$33'.
1/17: $0\out_W2[127:0] [127:120]
2/17: $0\out_W2[127:0] [111:104]
3/17: $0\out_W2[127:0] [103:96]
4/17: $0\out_W2[127:0] [95:88]
5/17: $0\out_W2[127:0] [87:80]
6/17: $0\out_W2[127:0] [79:72]
7/17: $0\out_W2[127:0] [71:64]
8/17: $0\out_W2[127:0] [63:56]
9/17: $0\out_W2[127:0] [55:48]
10/17: $0\out_W2[127:0] [47:40]
11/17: $0\out_W2[127:0] [39:32]
12/17: $0\out_W2[127:0] [31:24]
13/17: $0\out_W2[127:0] [23:16]
14/17: $0\out_W2[127:0] [15:8]
15/17: $0\out_W2[127:0] [7:0]
16/17: $0\out_W2[127:0] [119:112]
17/17: $0\out_mem_w2[127:0]
Creating decoders for process `\couter.$proc$Library.v:16$27'.
1/1: $0\out_cont[4:0]
Creating decoders for process `\nonce_gen.$proc$nonce_gen.v:24$13'.
1/9: $0\nonce_int_3[7:0]
2/9: $0\nonce_int_2[7:0]
3/9: $0\nonce_int_1[7:0]
4/9: $0\nonce_array1[7:0]
5/9: $0\nonce_array0[7:0]
6/9: $0\nonce_int_0[7:0]
7/9: $0\nonce_array3[7:0]
8/9: $0\nonce_array2[7:0]
9/9: $0\delay[0:0]
Creating decoders for process `$paramod\loop_limit\LOOP_LIMIT=5000.$proc$loop_limit.v:19$229'.
1/3: $0\current_loop_actualize[15:0]
2/3: $0\loop_limit[15:0]
3/3: $0\fail[0:0]
Creating decoders for process `\validity_reg.$proc$validity_reg.v:14$4'.
1/1: $0\validity_reg[0:0]
Creating decoders for process `\compare.$proc$compare.v:13$1'.
1/1: $0\compare_var[2:0]

3.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\abc_calculation.\a' from process `\abc_calculation.$proc$Library.v:338$94'.
No latch inferred for signal `\abc_calculation.\b' from process `\abc_calculation.$proc$Library.v:338$94'.
No latch inferred for signal `\abc_calculation.\c' from process `\abc_calculation.$proc$Library.v:338$94'.
No latch inferred for signal `\mux.\abc' from process `\mux.$proc$Library.v:188$84'.

3.2.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\area_sys.\validity_reg' using process `\area_sys.$proc$/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:80$211'.
created $dff cell `$procdff$936' with positive edge clock.
Creating register for signal `\area_sys.\stop' using process `\area_sys.$proc$/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:80$211'.
created $dff cell `$procdff$937' with positive edge clock.
Creating register for signal `\area_sys.\ready' using process `\area_sys.$proc$/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:80$211'.
created $dff cell `$procdff$938' with positive edge clock.
Creating register for signal `\area_sys.\counter' using process `\area_sys.$proc$/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:80$211'.
created $dff cell `$procdff$939' with positive edge clock.
Creating register for signal `\area_sys.\nonce0' using process `\area_sys.$proc$/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:80$211'.
created $dff cell `$procdff$940' with positive edge clock.
Creating register for signal `\area_sys.\nonce1' using process `\area_sys.$proc$/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:80$211'.
created $dff cell `$procdff$941' with positive edge clock.
Creating register for signal `\area_sys.\nonce2' using process `\area_sys.$proc$/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:80$211'.
created $dff cell `$procdff$942' with positive edge clock.
Creating register for signal `\area_sys.\nonce3' using process `\area_sys.$proc$/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:80$211'.
created $dff cell `$procdff$943' with positive edge clock.
Creating register for signal `\area_sys.\finish' using process `\area_sys.$proc$/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:80$211'.
created $dff cell `$procdff$944' with positive edge clock.
Creating register for signal `\area_sys.\loop_variable' using process `\area_sys.$proc$/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:80$211'.
created $dff cell `$procdff$945' with positive edge clock.
Creating register for signal `\area_sys.\nonce0_first_number' using process `\area_sys.$proc$/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:80$211'.
created $dff cell `$procdff$946' with positive edge clock.
Creating register for signal `\area_sys.\nonce0_second_number' using process `\area_sys.$proc$/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:80$211'.
created $dff cell `$procdff$947' with positive edge clock.
Creating register for signal `\area_sys.\nonce_ready' using process `\area_sys.$proc$/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:80$211'.
created $dff cell `$procdff$948' with positive edge clock.
Creating register for signal `\area_sys.\counter0' using process `\area_sys.$proc$/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:80$211'.
created $dff cell `$procdff$949' with positive edge clock.
Creating register for signal `\area_sys.\counter1' using process `\area_sys.$proc$/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:80$211'.
created $dff cell `$procdff$950' with positive edge clock.
Creating register for signal `\area_sys.\invalid_nonce' using process `\area_sys.$proc$/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:80$211'.
created $dff cell `$procdff$951' with positive edge clock.
Creating register for signal `\hash_final.\out_hash0' using process `\hash_final.$proc$Library.v:462$203'.
created $dff cell `$procdff$952' with positive edge clock.
Creating register for signal `\hash_final.\out_hash1' using process `\hash_final.$proc$Library.v:462$203'.
created $dff cell `$procdff$953' with positive edge clock.
Creating register for signal `\hash_final.\out_hash2' using process `\hash_final.$proc$Library.v:462$203'.
created $dff cell `$procdff$954' with positive edge clock.
Creating register for signal `\hash_final.\flag' using process `\hash_final.$proc$Library.v:462$203'.
created $dff cell `$procdff$955' with positive edge clock.
Creating register for signal `\abc_calculation.\out_logic_final' using process `\abc_calculation.$proc$Library.v:346$95'.
created $dff cell `$procdff$956' with positive edge clock.
Creating register for signal `\mod_x_k.\a' using process `\mod_x_k.$proc$Library.v:255$88'.
created $dff cell `$procdff$957' with positive edge clock.
Creating register for signal `\mod_x_k.\x' using process `\mod_x_k.$proc$Library.v:255$88'.
created $dff cell `$procdff$958' with positive edge clock.
Creating register for signal `\mod_x_k.\k' using process `\mod_x_k.$proc$Library.v:255$88'.
created $dff cell `$procdff$959' with positive edge clock.
Creating register for signal `\mod_x_k.\b' using process `\mod_x_k.$proc$Library.v:255$88'.
created $dff cell `$procdff$960' with positive edge clock.
Creating register for signal `\mux.\out_abc_mem' using process `\mux.$proc$Library.v:199$86'.
created $dff cell `$procdff$961' with positive edge clock.
Creating register for signal `\w_flops.\out_W2' using process `\w_flops.$proc$Library.v:73$33'.
created $dff cell `$procdff$962' with positive edge clock.
Creating register for signal `\w_flops.\out_mem_w2' using process `\w_flops.$proc$Library.v:73$33'.
created $dff cell `$procdff$963' with positive edge clock.
Creating register for signal `\couter.\out_cont' using process `\couter.$proc$Library.v:16$27'.
created $dff cell `$procdff$964' with positive edge clock.
Creating register for signal `\nonce_gen.\delay' using process `\nonce_gen.$proc$nonce_gen.v:24$13'.
created $dff cell `$procdff$965' with positive edge clock.
Creating register for signal `\nonce_gen.\nonce_array2' using process `\nonce_gen.$proc$nonce_gen.v:24$13'.
created $dff cell `$procdff$966' with positive edge clock.
Creating register for signal `\nonce_gen.\nonce_array3' using process `\nonce_gen.$proc$nonce_gen.v:24$13'.
created $dff cell `$procdff$967' with positive edge clock.
Creating register for signal `\nonce_gen.\nonce_int_0' using process `\nonce_gen.$proc$nonce_gen.v:24$13'.
created $dff cell `$procdff$968' with positive edge clock.
Creating register for signal `\nonce_gen.\nonce_array0' using process `\nonce_gen.$proc$nonce_gen.v:24$13'.
created $dff cell `$procdff$969' with positive edge clock.
Creating register for signal `\nonce_gen.\nonce_array1' using process `\nonce_gen.$proc$nonce_gen.v:24$13'.
created $dff cell `$procdff$970' with positive edge clock.
Creating register for signal `\nonce_gen.\nonce_int_1' using process `\nonce_gen.$proc$nonce_gen.v:24$13'.
created $dff cell `$procdff$971' with positive edge clock.
Creating register for signal `\nonce_gen.\nonce_int_2' using process `\nonce_gen.$proc$nonce_gen.v:24$13'.
created $dff cell `$procdff$972' with positive edge clock.
Creating register for signal `\nonce_gen.\nonce_int_3' using process `\nonce_gen.$proc$nonce_gen.v:24$13'.
created $dff cell `$procdff$973' with positive edge clock.
Creating register for signal `$paramod\loop_limit\LOOP_LIMIT=5000.\fail' using process `$paramod\loop_limit\LOOP_LIMIT=5000.$proc$loop_limit.v:19$229'.
created $dff cell `$procdff$974' with positive edge clock.
Creating register for signal `$paramod\loop_limit\LOOP_LIMIT=5000.\loop_limit' using process `$paramod\loop_limit\LOOP_LIMIT=5000.$proc$loop_limit.v:19$229'.
created $dff cell `$procdff$975' with positive edge clock.
Creating register for signal `$paramod\loop_limit\LOOP_LIMIT=5000.\current_loop_actualize' using process `$paramod\loop_limit\LOOP_LIMIT=5000.$proc$loop_limit.v:19$229'.
created $dff cell `$procdff$976' with positive edge clock.
Creating register for signal `\validity_reg.\validity_reg' using process `\validity_reg.$proc$validity_reg.v:14$4'.
created $dff cell `$procdff$977' with positive edge clock.
Creating register for signal `\compare.\compare_var' using process `\compare.$proc$compare.v:13$1'.
created $dff cell `$procdff$978' with positive edge clock.

3.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 10 empty switches in `\area_sys.$proc$/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:80$211'.
Removing empty process `area_sys.$proc$/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:80$211'.
Found and cleaned up 3 empty switches in `\hash_final.$proc$Library.v:462$203'.
Removing empty process `hash_final.$proc$Library.v:462$203'.
Found and cleaned up 35 empty switches in `\abc_calculation.$proc$Library.v:346$95'.
Removing empty process `abc_calculation.$proc$Library.v:346$95'.
Removing empty process `abc_calculation.$proc$Library.v:338$94'.
Found and cleaned up 3 empty switches in `\mod_x_k.$proc$Library.v:255$88'.
Removing empty process `mod_x_k.$proc$Library.v:255$88'.
Found and cleaned up 1 empty switch in `\mux.$proc$Library.v:199$86'.
Removing empty process `mux.$proc$Library.v:199$86'.
Found and cleaned up 1 empty switch in `\mux.$proc$Library.v:188$84'.
Removing empty process `mux.$proc$Library.v:188$84'.
Found and cleaned up 18 empty switches in `\w_flops.$proc$Library.v:73$33'.
Removing empty process `w_flops.$proc$Library.v:73$33'.
Found and cleaned up 4 empty switches in `\couter.$proc$Library.v:16$27'.
Removing empty process `couter.$proc$Library.v:16$27'.
Found and cleaned up 6 empty switches in `\nonce_gen.$proc$nonce_gen.v:24$13'.
Removing empty process `nonce_gen.$proc$nonce_gen.v:24$13'.
Found and cleaned up 4 empty switches in `$paramod\loop_limit\LOOP_LIMIT=5000.$proc$loop_limit.v:19$229'.
Removing empty process `$paramod\loop_limit\LOOP_LIMIT=5000.$proc$loop_limit.v:19$229'.
Found and cleaned up 2 empty switches in `\validity_reg.$proc$validity_reg.v:14$4'.
Removing empty process `validity_reg.$proc$validity_reg.v:14$4'.
Found and cleaned up 3 empty switches in `\compare.$proc$compare.v:13$1'.
Removing empty process `compare.$proc$compare.v:13$1'.
Cleaned up 90 empty switches.

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module area_sys.
<suppressed ~11 debug messages>
Optimizing module micro_ucr_hash.
Optimizing module hash_final.
<suppressed ~5 debug messages>
Optimizing module abc_calculation.
<suppressed ~12 debug messages>
Optimizing module mod_x_k.
<suppressed ~1 debug messages>
Optimizing module mux.
<suppressed ~5 debug messages>
Optimizing module w_flops.
<suppressed ~2 debug messages>
Optimizing module couter.
<suppressed ~2 debug messages>
Optimizing module nonce_gen.
<suppressed ~13 debug messages>
Optimizing module $paramod\loop_limit\LOOP_LIMIT=5000.
<suppressed ~3 debug messages>
Optimizing module validity_reg.
Optimizing module compare.

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \area_sys..
Finding unused cells or wires in module \micro_ucr_hash..
Finding unused cells or wires in module \hash_final..
Finding unused cells or wires in module \abc_calculation..
Finding unused cells or wires in module \mod_x_k..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \w_flops..
Finding unused cells or wires in module \couter..
Finding unused cells or wires in module \nonce_gen..
Finding unused cells or wires in module $paramod\loop_limit\LOOP_LIMIT=5000..
Finding unused cells or wires in module \validity_reg..
Finding unused cells or wires in module \compare..
Removed 38 unused cells and 372 unused wires.
<suppressed ~72 debug messages>

3.5. Executing CHECK pass (checking for obvious problems).
checking module $paramod\loop_limit\LOOP_LIMIT=5000..
checking module abc_calculation..
checking module area_sys..
Warning: Wire area_sys.\nonce2_second_number is used but has no driver.
Warning: Wire area_sys.\nonce2_first_number is used but has no driver.
checking module compare..
checking module couter..
checking module hash_final..
checking module micro_ucr_hash..
checking module mod_x_k..
checking module mux..
checking module nonce_gen..
checking module validity_reg..
checking module w_flops..
found and reported 2 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\loop_limit\LOOP_LIMIT=5000.
Optimizing module abc_calculation.
Optimizing module area_sys.
Optimizing module compare.
Optimizing module couter.
Optimizing module hash_final.
Optimizing module micro_ucr_hash.
Optimizing module mod_x_k.
Optimizing module mux.
Optimizing module nonce_gen.
Optimizing module validity_reg.
Optimizing module w_flops.

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\loop_limit\LOOP_LIMIT=5000'.
Finding identical cells in module `\abc_calculation'.
<suppressed ~99 debug messages>
Finding identical cells in module `\area_sys'.
<suppressed ~9 debug messages>
Finding identical cells in module `\compare'.
Finding identical cells in module `\couter'.
Finding identical cells in module `\hash_final'.
Finding identical cells in module `\micro_ucr_hash'.
Finding identical cells in module `\mod_x_k'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\nonce_gen'.
<suppressed ~72 debug messages>
Finding identical cells in module `\validity_reg'.
Finding identical cells in module `\w_flops'.
Removed a total of 60 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\loop_limit\LOOP_LIMIT=5000..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \abc_calculation..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
dead port 1/2 on $mux $procmux$468.
dead port 2/2 on $mux $procmux$471.
dead port 1/2 on $mux $procmux$479.
dead port 2/2 on $mux $procmux$482.
dead port 1/2 on $mux $procmux$490.
dead port 2/2 on $mux $procmux$493.
dead port 2/2 on $mux $procmux$531.
dead port 2/2 on $mux $procmux$537.
dead port 2/2 on $mux $procmux$543.
Running muxtree optimizer on module \area_sys..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \compare..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \couter..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \hash_final..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \micro_ucr_hash..
Creating internal representation of mux trees.
No muxes found in this module.
Running muxtree optimizer on module \mod_x_k..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \mux..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
dead port 2/2 on $mux $procmux$580.
dead port 2/2 on $mux $procmux$583.
dead port 2/2 on $mux $procmux$586.
Running muxtree optimizer on module \nonce_gen..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \validity_reg..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \w_flops..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 12 multiplexer ports.
<suppressed ~56 debug messages>

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module $paramod\loop_limit\LOOP_LIMIT=5000.
Optimizing cells in module \abc_calculation.
Optimizing cells in module \area_sys.
Optimizing cells in module \compare.
Optimizing cells in module \couter.
Optimizing cells in module \hash_final.
Optimizing cells in module \micro_ucr_hash.
Optimizing cells in module \mod_x_k.
Optimizing cells in module \mux.
Optimizing cells in module \nonce_gen.
Optimizing cells in module \validity_reg.
Optimizing cells in module \w_flops.
Performed a total of 0 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\loop_limit\LOOP_LIMIT=5000'.
Finding identical cells in module `\abc_calculation'.
Finding identical cells in module `\area_sys'.
Finding identical cells in module `\compare'.
Finding identical cells in module `\couter'.
Finding identical cells in module `\hash_final'.
Finding identical cells in module `\micro_ucr_hash'.
Finding identical cells in module `\mod_x_k'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\nonce_gen'.
<suppressed ~18 debug messages>
Finding identical cells in module `\validity_reg'.
Finding identical cells in module `\w_flops'.
Removed a total of 6 cells.

3.6.6. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $procdff$948 ($dff) from module area_sys.
Removing $procdff$963 ($dff) from module w_flops.
Replaced 2 DFF cells.

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\loop_limit\LOOP_LIMIT=5000..
Finding unused cells or wires in module \abc_calculation..
Finding unused cells or wires in module \area_sys..
Finding unused cells or wires in module \compare..
Finding unused cells or wires in module \couter..
Finding unused cells or wires in module \hash_final..
Finding unused cells or wires in module \micro_ucr_hash..
Finding unused cells or wires in module \mod_x_k..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \nonce_gen..
Finding unused cells or wires in module \validity_reg..
Finding unused cells or wires in module \w_flops..
Removed 2 unused cells and 77 unused wires.
<suppressed ~6 debug messages>

3.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\loop_limit\LOOP_LIMIT=5000.
Optimizing module abc_calculation.
Optimizing module area_sys.
<suppressed ~2 debug messages>
Optimizing module compare.
Optimizing module couter.
Optimizing module hash_final.
Optimizing module micro_ucr_hash.
Optimizing module mod_x_k.
Optimizing module mux.
Optimizing module nonce_gen.
Optimizing module validity_reg.
Optimizing module w_flops.
<suppressed ~28 debug messages>

3.6.9. Rerunning OPT passes. (Maybe there is more to do..)

3.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\loop_limit\LOOP_LIMIT=5000..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \abc_calculation..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \area_sys..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \compare..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \couter..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \hash_final..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \micro_ucr_hash..
Creating internal representation of mux trees.
No muxes found in this module.
Running muxtree optimizer on module \mod_x_k..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \mux..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \nonce_gen..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \validity_reg..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \w_flops..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~59 debug messages>

3.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module $paramod\loop_limit\LOOP_LIMIT=5000.
Optimizing cells in module \abc_calculation.
Optimizing cells in module \area_sys.
Optimizing cells in module \compare.
Optimizing cells in module \couter.
Optimizing cells in module \hash_final.
Optimizing cells in module \micro_ucr_hash.
Optimizing cells in module \mod_x_k.
Optimizing cells in module \mux.
Optimizing cells in module \nonce_gen.
Optimizing cells in module \validity_reg.
Optimizing cells in module \w_flops.
Performed a total of 0 changes.

3.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\loop_limit\LOOP_LIMIT=5000'.
Finding identical cells in module `\abc_calculation'.
Finding identical cells in module `\area_sys'.
Finding identical cells in module `\compare'.
Finding identical cells in module `\couter'.
Finding identical cells in module `\hash_final'.
Finding identical cells in module `\micro_ucr_hash'.
Finding identical cells in module `\mod_x_k'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\nonce_gen'.
Finding identical cells in module `\validity_reg'.
Finding identical cells in module `\w_flops'.
<suppressed ~15 debug messages>
Removed a total of 5 cells.

3.6.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\loop_limit\LOOP_LIMIT=5000..
Finding unused cells or wires in module \abc_calculation..
Finding unused cells or wires in module \area_sys..
Finding unused cells or wires in module \compare..
Finding unused cells or wires in module \couter..
Finding unused cells or wires in module \hash_final..
Finding unused cells or wires in module \micro_ucr_hash..
Finding unused cells or wires in module \mod_x_k..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \nonce_gen..
Finding unused cells or wires in module \validity_reg..
Finding unused cells or wires in module \w_flops..
Removed 0 unused cells and 22 unused wires.
<suppressed ~9 debug messages>

3.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\loop_limit\LOOP_LIMIT=5000.
Optimizing module abc_calculation.
Optimizing module area_sys.
Optimizing module compare.
Optimizing module couter.
Optimizing module hash_final.
Optimizing module micro_ucr_hash.
Optimizing module mod_x_k.
Optimizing module mux.
Optimizing module nonce_gen.
Optimizing module validity_reg.
Optimizing module w_flops.

3.6.16. Rerunning OPT passes. (Maybe there is more to do..)

3.6.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\loop_limit\LOOP_LIMIT=5000..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \abc_calculation..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \area_sys..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \compare..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \couter..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \hash_final..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \micro_ucr_hash..
Creating internal representation of mux trees.
No muxes found in this module.
Running muxtree optimizer on module \mod_x_k..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \mux..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \nonce_gen..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \validity_reg..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \w_flops..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~59 debug messages>

3.6.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module $paramod\loop_limit\LOOP_LIMIT=5000.
Optimizing cells in module \abc_calculation.
Optimizing cells in module \area_sys.
Optimizing cells in module \compare.
Optimizing cells in module \couter.
Optimizing cells in module \hash_final.
Optimizing cells in module \micro_ucr_hash.
Optimizing cells in module \mod_x_k.
Optimizing cells in module \mux.
Optimizing cells in module \nonce_gen.
Optimizing cells in module \validity_reg.
Optimizing cells in module \w_flops.
Performed a total of 0 changes.

3.6.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\loop_limit\LOOP_LIMIT=5000'.
Finding identical cells in module `\abc_calculation'.
Finding identical cells in module `\area_sys'.
Finding identical cells in module `\compare'.
Finding identical cells in module `\couter'.
Finding identical cells in module `\hash_final'.
Finding identical cells in module `\micro_ucr_hash'.
Finding identical cells in module `\mod_x_k'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\nonce_gen'.
Finding identical cells in module `\validity_reg'.
Finding identical cells in module `\w_flops'.
Removed a total of 0 cells.

3.6.20. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\loop_limit\LOOP_LIMIT=5000..
Finding unused cells or wires in module \abc_calculation..
Finding unused cells or wires in module \area_sys..
Finding unused cells or wires in module \compare..
Finding unused cells or wires in module \couter..
Finding unused cells or wires in module \hash_final..
Finding unused cells or wires in module \micro_ucr_hash..
Finding unused cells or wires in module \mod_x_k..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \nonce_gen..
Finding unused cells or wires in module \validity_reg..
Finding unused cells or wires in module \w_flops..

3.6.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\loop_limit\LOOP_LIMIT=5000.
Optimizing module abc_calculation.
Optimizing module area_sys.
Optimizing module compare.
Optimizing module couter.
Optimizing module hash_final.
Optimizing module micro_ucr_hash.
Optimizing module mod_x_k.
Optimizing module mux.
Optimizing module nonce_gen.
Optimizing module validity_reg.
Optimizing module w_flops.

3.6.23. Finished OPT passes. (There is nothing left to do.)

3.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 2 bits (of 3) from port B of cell $paramod\loop_limit\LOOP_LIMIT=5000.$eq$loop_limit.v:31$232 ($eq).
Removed top 1 bits (of 3) from port B of cell $paramod\loop_limit\LOOP_LIMIT=5000.$eq$loop_limit.v:31$233 ($eq).
Removed top 31 bits (of 32) from port B of cell $paramod\loop_limit\LOOP_LIMIT=5000.$add$loop_limit.v:32$235 ($add).
Removed top 16 bits (of 32) from port Y of cell $paramod\loop_limit\LOOP_LIMIT=5000.$add$loop_limit.v:32$235 ($add).
Removed top 16 bits (of 32) from wire $paramod\loop_limit\LOOP_LIMIT=5000.$add$loop_limit.v:32$235_Y.
Removed top 28 bits (of 32) from port B of cell abc_calculation.$le$Library.v:357$97 ($le).
Removed top 4 bits (of 5) from port B of cell abc_calculation.$eq$Library.v:362$103 ($eq).
Removed top 3 bits (of 5) from port B of cell abc_calculation.$eq$Library.v:363$106 ($eq).
Removed top 3 bits (of 5) from port B of cell abc_calculation.$eq$Library.v:364$109 ($eq).
Removed top 2 bits (of 5) from port B of cell abc_calculation.$eq$Library.v:365$112 ($eq).
Removed top 2 bits (of 5) from port B of cell abc_calculation.$eq$Library.v:366$115 ($eq).
Removed top 2 bits (of 5) from port B of cell abc_calculation.$eq$Library.v:367$118 ($eq).
Removed top 2 bits (of 5) from port B of cell abc_calculation.$eq$Library.v:368$121 ($eq).
Removed top 1 bits (of 5) from port B of cell abc_calculation.$eq$Library.v:369$124 ($eq).
Removed top 1 bits (of 5) from port B of cell abc_calculation.$eq$Library.v:370$127 ($eq).
Removed top 1 bits (of 5) from port B of cell abc_calculation.$eq$Library.v:371$130 ($eq).
Removed top 1 bits (of 5) from port B of cell abc_calculation.$eq$Library.v:372$133 ($eq).
Removed top 1 bits (of 5) from port B of cell abc_calculation.$eq$Library.v:373$136 ($eq).
Removed top 1 bits (of 5) from port B of cell abc_calculation.$eq$Library.v:374$139 ($eq).
Removed top 1 bits (of 5) from port B of cell abc_calculation.$eq$Library.v:375$142 ($eq).
Removed top 1 bits (of 5) from port B of cell abc_calculation.$eq$Library.v:376$145 ($eq).
Removed top 27 bits (of 32) from port B of cell abc_calculation.$ge$Library.v:387$153 ($ge).
Removed top 27 bits (of 32) from port B of cell abc_calculation.$le$Library.v:387$154 ($le).
Removed top 31 bits (of 32) from port B of cell area_sys.$add$/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:83$212 ($add).
Removed top 24 bits (of 32) from port Y of cell area_sys.$add$/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:83$212 ($add).
Removed top 4 bits (of 8) from port B of cell area_sys.$eq$/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:84$213 ($eq).
Removed top 7 bits (of 8) from port A of cell area_sys.$not$/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:120$226 ($not).
Removed top 31 bits (of 32) from port A of cell area_sys.$procmux$306_CMP0 ($eq).
Removed top 31 bits (of 32) from port B of cell area_sys.$procmux$306_CMP0 ($eq).
Removed top 24 bits (of 32) from wire area_sys.$add$/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:83$212_Y.
Removed top 31 bits (of 32) from wire area_sys.$logic_and$/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:89$218_Y.
Removed top 31 bits (of 32) from port B of cell couter.$add$Library.v:20$31 ($add).
Removed top 27 bits (of 32) from port Y of cell couter.$add$Library.v:20$31 ($add).
Removed top 27 bits (of 32) from port B of cell couter.$lt$Library.v:19$30 ($lt).
Removed top 27 bits (of 32) from wire couter.$add$Library.v:20$31_Y.
Removed top 7 bits (of 8) from port B of cell hash_final.$add$Library.v:493$207 ($add).
Removed top 27 bits (of 32) from port B of cell hash_final.$lt$Library.v:499$210 ($lt).
Removed top 27 bits (of 32) from port B of cell mod_x_k.$gt$Library.v:266$92 ($gt).
Removed top 27 bits (of 32) from port B of cell mod_x_k.$le$Library.v:261$90 ($le).
Removed top 1 bits (of 2) from port B of cell nonce_gen.$eq$nonce_gen.v:41$19 ($eq).
Removed top 31 bits (of 32) from port A of cell nonce_gen.$procmux$737_CMP0 ($eq).
Removed top 31 bits (of 32) from port B of cell nonce_gen.$procmux$737_CMP0 ($eq).
Removed top 31 bits (of 32) from port A of cell nonce_gen.$procmux$735_CMP0 ($eq).
Removed top 31 bits (of 32) from port B of cell nonce_gen.$procmux$735_CMP0 ($eq).
Removed top 31 bits (of 32) from port A of cell nonce_gen.$procmux$739_CMP0 ($eq).
Removed top 31 bits (of 32) from port B of cell nonce_gen.$procmux$739_CMP0 ($eq).
Removed top 31 bits (of 32) from wire nonce_gen.$eq$nonce_gen.v:28$15_Y.
Removed top 31 bits (of 32) from wire nonce_gen.$eq$nonce_gen.v:41$19_Y.
Removed top 31 bits (of 32) from wire nonce_gen.$eq$nonce_gen.v:54$23_Y.
Removed top 28 bits (of 32) from port B of cell w_flops.$le$Library.v:76$35 ($le).
Removed top 4 bits (of 5) from port B of cell w_flops.$eq$Library.v:78$39 ($eq).
Removed top 3 bits (of 5) from port B of cell w_flops.$eq$Library.v:79$42 ($eq).
Removed top 3 bits (of 5) from port B of cell w_flops.$eq$Library.v:80$45 ($eq).
Removed top 2 bits (of 5) from port B of cell w_flops.$eq$Library.v:81$48 ($eq).
Removed top 2 bits (of 5) from port B of cell w_flops.$eq$Library.v:82$51 ($eq).
Removed top 2 bits (of 5) from port B of cell w_flops.$eq$Library.v:83$54 ($eq).
Removed top 2 bits (of 5) from port B of cell w_flops.$eq$Library.v:84$57 ($eq).
Removed top 1 bits (of 5) from port B of cell w_flops.$eq$Library.v:85$60 ($eq).
Removed top 1 bits (of 5) from port B of cell w_flops.$eq$Library.v:86$63 ($eq).
Removed top 1 bits (of 5) from port B of cell w_flops.$eq$Library.v:87$66 ($eq).
Removed top 1 bits (of 5) from port B of cell w_flops.$eq$Library.v:88$69 ($eq).
Removed top 1 bits (of 5) from port B of cell w_flops.$eq$Library.v:89$72 ($eq).
Removed top 1 bits (of 5) from port B of cell w_flops.$eq$Library.v:90$75 ($eq).
Removed top 1 bits (of 5) from port B of cell w_flops.$eq$Library.v:91$78 ($eq).
Removed top 1 bits (of 5) from port B of cell w_flops.$eq$Library.v:92$81 ($eq).

3.8. Executing PEEPOPT pass (run peephole optimizers).

3.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\loop_limit\LOOP_LIMIT=5000..
Finding unused cells or wires in module \abc_calculation..
Finding unused cells or wires in module \area_sys..
Finding unused cells or wires in module \compare..
Finding unused cells or wires in module \couter..
Finding unused cells or wires in module \hash_final..
Finding unused cells or wires in module \micro_ucr_hash..
Finding unused cells or wires in module \mod_x_k..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \nonce_gen..
Finding unused cells or wires in module \validity_reg..
Finding unused cells or wires in module \w_flops..
Removed 0 unused cells and 7 unused wires.
<suppressed ~4 debug messages>

3.10. Executing TECHMAP pass (map to technology primitives).

3.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

3.10.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~788 debug messages>

3.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module $paramod\loop_limit\LOOP_LIMIT=5000:
creating $macc model for $add$loop_limit.v:32$235 ($add).
creating $alu model for $macc $add$loop_limit.v:32$235.
creating $alu cell for $add$loop_limit.v:32$235: $auto$alumacc.cc:474:replace_alu$986
created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module abc_calculation:
creating $macc model for $add$Library.v:361$101 ($add).
creating $macc model for $add$Library.v:361$102 ($add).
creating $macc model for $add$Library.v:362$105 ($add).
creating $macc model for $add$Library.v:363$108 ($add).
creating $macc model for $add$Library.v:364$111 ($add).
creating $macc model for $add$Library.v:365$114 ($add).
creating $macc model for $add$Library.v:366$117 ($add).
creating $macc model for $add$Library.v:367$120 ($add).
creating $macc model for $add$Library.v:368$123 ($add).
creating $macc model for $add$Library.v:369$126 ($add).
creating $macc model for $add$Library.v:370$129 ($add).
creating $macc model for $add$Library.v:371$132 ($add).
creating $macc model for $add$Library.v:372$135 ($add).
creating $macc model for $add$Library.v:373$138 ($add).
creating $macc model for $add$Library.v:374$141 ($add).
creating $macc model for $add$Library.v:375$144 ($add).
creating $macc model for $add$Library.v:376$147 ($add).
creating $macc model for $add$Library.v:383$152 ($add).
creating $macc model for $add$Library.v:390$160 ($add).
creating $macc model for $add$Library.v:391$163 ($add).
creating $macc model for $add$Library.v:392$166 ($add).
creating $macc model for $add$Library.v:393$169 ($add).
creating $macc model for $add$Library.v:394$172 ($add).
creating $macc model for $add$Library.v:395$175 ($add).
creating $macc model for $add$Library.v:396$178 ($add).
creating $macc model for $add$Library.v:397$181 ($add).
creating $macc model for $add$Library.v:398$184 ($add).
creating $macc model for $add$Library.v:399$187 ($add).
creating $macc model for $add$Library.v:400$190 ($add).
creating $macc model for $add$Library.v:401$193 ($add).
creating $macc model for $add$Library.v:402$196 ($add).
creating $macc model for $add$Library.v:403$199 ($add).
creating $macc model for $add$Library.v:404$202 ($add).
creating $alu model for $macc $add$Library.v:404$202.
creating $alu model for $macc $add$Library.v:403$199.
creating $alu model for $macc $add$Library.v:402$196.
creating $alu model for $macc $add$Library.v:401$193.
creating $alu model for $macc $add$Library.v:400$190.
creating $alu model for $macc $add$Library.v:399$187.
creating $alu model for $macc $add$Library.v:398$184.
creating $alu model for $macc $add$Library.v:397$181.
creating $alu model for $macc $add$Library.v:396$178.
creating $alu model for $macc $add$Library.v:395$175.
creating $alu model for $macc $add$Library.v:394$172.
creating $alu model for $macc $add$Library.v:393$169.
creating $alu model for $macc $add$Library.v:392$166.
creating $alu model for $macc $add$Library.v:391$163.
creating $alu model for $macc $add$Library.v:390$160.
creating $alu model for $macc $add$Library.v:383$152.
creating $alu model for $macc $add$Library.v:376$147.
creating $alu model for $macc $add$Library.v:375$144.
creating $alu model for $macc $add$Library.v:374$141.
creating $alu model for $macc $add$Library.v:373$138.
creating $alu model for $macc $add$Library.v:372$135.
creating $alu model for $macc $add$Library.v:371$132.
creating $alu model for $macc $add$Library.v:370$129.
creating $alu model for $macc $add$Library.v:369$126.
creating $alu model for $macc $add$Library.v:368$123.
creating $alu model for $macc $add$Library.v:367$120.
creating $alu model for $macc $add$Library.v:366$117.
creating $alu model for $macc $add$Library.v:365$114.
creating $alu model for $macc $add$Library.v:364$111.
creating $alu model for $macc $add$Library.v:363$108.
creating $alu model for $macc $add$Library.v:362$105.
creating $alu model for $macc $add$Library.v:361$102.
creating $alu model for $macc $add$Library.v:361$101.
creating $alu model for $ge$Library.v:387$153 ($ge): new $alu
creating $alu model for $le$Library.v:357$97 ($le): new $alu
creating $alu model for $le$Library.v:387$154 ($le): new $alu
creating $alu model for $eq$Library.v:376$145 ($eq): merged with $le$Library.v:357$97.
creating $alu model for $eq$Library.v:390$158 ($eq): merged with $ge$Library.v:387$153.
creating $alu model for $eq$Library.v:404$200 ($eq): merged with $le$Library.v:387$154.
creating $alu cell for $le$Library.v:387$154, $eq$Library.v:404$200: $auto$alumacc.cc:474:replace_alu$992
creating $alu cell for $le$Library.v:357$97, $eq$Library.v:376$145: $auto$alumacc.cc:474:replace_alu$1005
creating $alu cell for $ge$Library.v:387$153, $eq$Library.v:390$158: $auto$alumacc.cc:474:replace_alu$1018
creating $alu cell for $add$Library.v:361$101: $auto$alumacc.cc:474:replace_alu$1027
creating $alu cell for $add$Library.v:361$102: $auto$alumacc.cc:474:replace_alu$1030
creating $alu cell for $add$Library.v:362$105: $auto$alumacc.cc:474:replace_alu$1033
creating $alu cell for $add$Library.v:363$108: $auto$alumacc.cc:474:replace_alu$1036
creating $alu cell for $add$Library.v:364$111: $auto$alumacc.cc:474:replace_alu$1039
creating $alu cell for $add$Library.v:365$114: $auto$alumacc.cc:474:replace_alu$1042
creating $alu cell for $add$Library.v:366$117: $auto$alumacc.cc:474:replace_alu$1045
creating $alu cell for $add$Library.v:367$120: $auto$alumacc.cc:474:replace_alu$1048
creating $alu cell for $add$Library.v:368$123: $auto$alumacc.cc:474:replace_alu$1051
creating $alu cell for $add$Library.v:369$126: $auto$alumacc.cc:474:replace_alu$1054
creating $alu cell for $add$Library.v:370$129: $auto$alumacc.cc:474:replace_alu$1057
creating $alu cell for $add$Library.v:371$132: $auto$alumacc.cc:474:replace_alu$1060
creating $alu cell for $add$Library.v:372$135: $auto$alumacc.cc:474:replace_alu$1063
creating $alu cell for $add$Library.v:373$138: $auto$alumacc.cc:474:replace_alu$1066
creating $alu cell for $add$Library.v:374$141: $auto$alumacc.cc:474:replace_alu$1069
creating $alu cell for $add$Library.v:375$144: $auto$alumacc.cc:474:replace_alu$1072
creating $alu cell for $add$Library.v:376$147: $auto$alumacc.cc:474:replace_alu$1075
creating $alu cell for $add$Library.v:383$152: $auto$alumacc.cc:474:replace_alu$1078
creating $alu cell for $add$Library.v:390$160: $auto$alumacc.cc:474:replace_alu$1081
creating $alu cell for $add$Library.v:391$163: $auto$alumacc.cc:474:replace_alu$1084
creating $alu cell for $add$Library.v:392$166: $auto$alumacc.cc:474:replace_alu$1087
creating $alu cell for $add$Library.v:393$169: $auto$alumacc.cc:474:replace_alu$1090
creating $alu cell for $add$Library.v:394$172: $auto$alumacc.cc:474:replace_alu$1093
creating $alu cell for $add$Library.v:395$175: $auto$alumacc.cc:474:replace_alu$1096
creating $alu cell for $add$Library.v:396$178: $auto$alumacc.cc:474:replace_alu$1099
creating $alu cell for $add$Library.v:397$181: $auto$alumacc.cc:474:replace_alu$1102
creating $alu cell for $add$Library.v:398$184: $auto$alumacc.cc:474:replace_alu$1105
creating $alu cell for $add$Library.v:399$187: $auto$alumacc.cc:474:replace_alu$1108
creating $alu cell for $add$Library.v:400$190: $auto$alumacc.cc:474:replace_alu$1111
creating $alu cell for $add$Library.v:401$193: $auto$alumacc.cc:474:replace_alu$1114
creating $alu cell for $add$Library.v:402$196: $auto$alumacc.cc:474:replace_alu$1117
creating $alu cell for $add$Library.v:403$199: $auto$alumacc.cc:474:replace_alu$1120
creating $alu cell for $add$Library.v:404$202: $auto$alumacc.cc:474:replace_alu$1123
created 36 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module area_sys:
creating $macc model for $add$/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:83$212 ($add).
creating $alu model for $macc $add$/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:83$212.
creating $alu cell for $add$/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/source/area_sys.v:83$212: $auto$alumacc.cc:474:replace_alu$1126
created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module compare:
creating $alu model for $lt$compare.v:15$2 ($lt): new $alu
creating $alu model for $eq$compare.v:17$3 ($eq): merged with $lt$compare.v:15$2.
creating $alu cell for $lt$compare.v:15$2, $eq$compare.v:17$3: $auto$alumacc.cc:474:replace_alu$1130
created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module couter:
creating $macc model for $add$Library.v:20$31 ($add).
creating $alu model for $macc $add$Library.v:20$31.
creating $alu model for $lt$Library.v:19$30 ($lt): new $alu
creating $alu cell for $lt$Library.v:19$30: $auto$alumacc.cc:474:replace_alu$1142
creating $alu cell for $add$Library.v:20$31: $auto$alumacc.cc:474:replace_alu$1153
created 2 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module hash_final:
creating $macc model for $add$Library.v:493$207 ($add).
creating $macc model for $add$Library.v:494$208 ($add).
creating $macc model for $add$Library.v:495$209 ($add).
creating $alu model for $macc $add$Library.v:495$209.
creating $alu model for $macc $add$Library.v:494$208.
creating $alu model for $macc $add$Library.v:493$207.
creating $alu model for $lt$Library.v:499$210 ($lt): new $alu
creating $alu model for $eq$Library.v:492$205 ($eq): merged with $lt$Library.v:499$210.
creating $alu cell for $lt$Library.v:499$210, $eq$Library.v:492$205: $auto$alumacc.cc:474:replace_alu$1157
creating $alu cell for $add$Library.v:493$207: $auto$alumacc.cc:474:replace_alu$1168
creating $alu cell for $add$Library.v:494$208: $auto$alumacc.cc:474:replace_alu$1171
creating $alu cell for $add$Library.v:495$209: $auto$alumacc.cc:474:replace_alu$1174
created 4 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module micro_ucr_hash:
created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module mod_x_k:
creating $alu model for $gt$Library.v:266$92 ($gt): new $alu
creating $alu model for $le$Library.v:261$90 ($le): merged with $gt$Library.v:266$92.
creating $alu cell for $gt$Library.v:266$92, $le$Library.v:261$90: $auto$alumacc.cc:474:replace_alu$1178
created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module mux:
created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module nonce_gen:
creating $macc model for $add$nonce_gen.v:32$17 ($add).
creating $macc model for $add$nonce_gen.v:33$18 ($add).
creating $macc model for $add$nonce_gen.v:46$22 ($add).
creating $macc model for $add$nonce_gen.v:58$26 ($add).
creating $alu model for $macc $add$nonce_gen.v:58$26.
creating $alu model for $macc $add$nonce_gen.v:46$22.
creating $alu model for $macc $add$nonce_gen.v:33$18.
creating $alu model for $macc $add$nonce_gen.v:32$17.
creating $alu cell for $add$nonce_gen.v:32$17: $auto$alumacc.cc:474:replace_alu$1191
creating $alu cell for $add$nonce_gen.v:33$18: $auto$alumacc.cc:474:replace_alu$1194
creating $alu cell for $add$nonce_gen.v:46$22: $auto$alumacc.cc:474:replace_alu$1197
creating $alu cell for $add$nonce_gen.v:58$26: $auto$alumacc.cc:474:replace_alu$1200
created 4 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module validity_reg:
created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module w_flops:
creating $alu model for $le$Library.v:76$35 ($le): new $alu
creating $alu model for $eq$Library.v:92$81 ($eq): merged with $le$Library.v:76$35.
creating $alu cell for $le$Library.v:76$35, $eq$Library.v:92$81: $auto$alumacc.cc:474:replace_alu$1204
created 1 $alu and 0 $macc cells.

3.12. Executing SHARE pass (SAT-based resource sharing).

3.13. Executing OPT pass (performing simple optimizations).

3.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\loop_limit\LOOP_LIMIT=5000.
Optimizing module abc_calculation.
Optimizing module area_sys.
<suppressed ~1 debug messages>
Optimizing module compare.
<suppressed ~1 debug messages>
Optimizing module couter.
<suppressed ~1 debug messages>
Optimizing module hash_final.
<suppressed ~4 debug messages>
Optimizing module micro_ucr_hash.
Optimizing module mod_x_k.
<suppressed ~2 debug messages>
Optimizing module mux.
Optimizing module nonce_gen.
<suppressed ~3 debug messages>
Optimizing module validity_reg.
Optimizing module w_flops.

3.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\loop_limit\LOOP_LIMIT=5000'.
Finding identical cells in module `\abc_calculation'.
Finding identical cells in module `\area_sys'.
<suppressed ~3 debug messages>
Finding identical cells in module `\compare'.
Finding identical cells in module `\couter'.
Finding identical cells in module `\hash_final'.
Finding identical cells in module `\micro_ucr_hash'.
Finding identical cells in module `\mod_x_k'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\nonce_gen'.
Finding identical cells in module `\validity_reg'.
Finding identical cells in module `\w_flops'.
Removed a total of 1 cells.

3.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\loop_limit\LOOP_LIMIT=5000..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \abc_calculation..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \area_sys..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \compare..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \couter..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \hash_final..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \micro_ucr_hash..
Creating internal representation of mux trees.
No muxes found in this module.
Running muxtree optimizer on module \mod_x_k..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \mux..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \nonce_gen..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \validity_reg..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \w_flops..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~59 debug messages>

3.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module $paramod\loop_limit\LOOP_LIMIT=5000.
Optimizing cells in module \abc_calculation.
New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$1025: { $auto$rtlil.cc:1832:Not$1022 $auto$rtlil.cc:1835:ReduceAnd$1024 }
New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1023: { $auto$alumacc.cc:490:replace_alu$1019 [0] $auto$alumacc.cc:490:replace_alu$1019 [1] $auto$alumacc.cc:490:replace_alu$1019 [2] $auto$alumacc.cc:490:replace_alu$1019 [3] $auto$alumacc.cc:490:replace_alu$1019 [4] }
New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$995: { $auto$alumacc.cc:490:replace_alu$993 [0] $auto$alumacc.cc:490:replace_alu$993 [1] $auto$alumacc.cc:490:replace_alu$993 [2] $auto$alumacc.cc:490:replace_alu$993 [3] $auto$alumacc.cc:490:replace_alu$993 [4] }
New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1008: { $auto$alumacc.cc:490:replace_alu$1006 [0] $auto$alumacc.cc:490:replace_alu$1006 [1] $auto$alumacc.cc:490:replace_alu$1006 [2] $auto$alumacc.cc:490:replace_alu$1006 [3] $auto$alumacc.cc:490:replace_alu$1006 [4] }
Optimizing cells in module \abc_calculation.
Optimizing cells in module \area_sys.
Optimizing cells in module \compare.
New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1133: { $auto$alumacc.cc:490:replace_alu$1131 [0] $auto$alumacc.cc:490:replace_alu$1131 [1] $auto$alumacc.cc:490:replace_alu$1131 [2] $auto$alumacc.cc:490:replace_alu$1131 [3] $auto$alumacc.cc:490:replace_alu$1131 [4] $auto$alumacc.cc:490:replace_alu$1131 [5] $auto$alumacc.cc:490:replace_alu$1131 [6] $auto$alumacc.cc:490:replace_alu$1131 [7] $auto$alumacc.cc:490:replace_alu$1131 [8] $auto$alumacc.cc:490:replace_alu$1131 [9] $auto$alumacc.cc:490:replace_alu$1131 [10] $auto$alumacc.cc:490:replace_alu$1131 [11] $auto$alumacc.cc:490:replace_alu$1131 [12] $auto$alumacc.cc:490:replace_alu$1131 [13] $auto$alumacc.cc:490:replace_alu$1131 [14] $auto$alumacc.cc:490:replace_alu$1131 [15] }
Optimizing cells in module \compare.
Optimizing cells in module \couter.
New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1145: { $auto$alumacc.cc:490:replace_alu$1143 [0] $auto$alumacc.cc:490:replace_alu$1143 [1] $auto$alumacc.cc:490:replace_alu$1143 [2] $auto$alumacc.cc:490:replace_alu$1143 [3] $auto$alumacc.cc:490:replace_alu$1143 [4] }
Optimizing cells in module \couter.
Optimizing cells in module \hash_final.
New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1160: { $auto$alumacc.cc:490:replace_alu$1158 [0] $auto$alumacc.cc:490:replace_alu$1158 [1] $auto$alumacc.cc:490:replace_alu$1158 [2] $auto$alumacc.cc:490:replace_alu$1158 [3] $auto$alumacc.cc:490:replace_alu$1158 [4] }
Optimizing cells in module \hash_final.
Optimizing cells in module \micro_ucr_hash.
Optimizing cells in module \mod_x_k.
New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$1189: { $auto$rtlil.cc:1832:Not$1188 $auto$rtlil.cc:1835:ReduceAnd$1184 }
New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1183: { $auto$alumacc.cc:490:replace_alu$1179 [0] $auto$alumacc.cc:490:replace_alu$1179 [1] $auto$alumacc.cc:490:replace_alu$1179 [2] $auto$alumacc.cc:490:replace_alu$1179 [3] $auto$alumacc.cc:490:replace_alu$1179 [4] }
Optimizing cells in module \mod_x_k.
Optimizing cells in module \mux.
Optimizing cells in module \nonce_gen.
Optimizing cells in module \validity_reg.
Optimizing cells in module \w_flops.
New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$1215: { $auto$rtlil.cc:1832:Not$1214 $auto$rtlil.cc:1835:ReduceAnd$1208 }
New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1207: { $auto$alumacc.cc:490:replace_alu$1205 [0] $auto$alumacc.cc:490:replace_alu$1205 [1] $auto$alumacc.cc:490:replace_alu$1205 [2] $auto$alumacc.cc:490:replace_alu$1205 [3] $auto$alumacc.cc:490:replace_alu$1205 [4] }
Optimizing cells in module \w_flops.
Performed a total of 11 changes.

3.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\loop_limit\LOOP_LIMIT=5000'.
Finding identical cells in module `\abc_calculation'.
Finding identical cells in module `\area_sys'.
Finding identical cells in module `\compare'.
Finding identical cells in module `\couter'.
Finding identical cells in module `\hash_final'.
Finding identical cells in module `\micro_ucr_hash'.
Finding identical cells in module `\mod_x_k'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\nonce_gen'.
Finding identical cells in module `\validity_reg'.
Finding identical cells in module `\w_flops'.
Removed a total of 0 cells.

3.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\loop_limit\LOOP_LIMIT=5000..
Finding unused cells or wires in module \abc_calculation..
Finding unused cells or wires in module \area_sys..
Finding unused cells or wires in module \compare..
Finding unused cells or wires in module \couter..
Finding unused cells or wires in module \hash_final..
Finding unused cells or wires in module \micro_ucr_hash..
Finding unused cells or wires in module \mod_x_k..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \nonce_gen..
Finding unused cells or wires in module \validity_reg..
Finding unused cells or wires in module \w_flops..
Removed 3 unused cells and 23 unused wires.
<suppressed ~11 debug messages>

3.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\loop_limit\LOOP_LIMIT=5000.
Optimizing module abc_calculation.
Optimizing module area_sys.
Optimizing module compare.
Optimizing module couter.
Optimizing module hash_final.
Optimizing module micro_ucr_hash.
Optimizing module mod_x_k.
Optimizing module mux.
Optimizing module nonce_gen.
Optimizing module validity_reg.
Optimizing module w_flops.

3.13.9. Rerunning OPT passes. (Maybe there is more to do..)

3.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\loop_limit\LOOP_LIMIT=5000..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \abc_calculation..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \area_sys..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \compare..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \couter..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \hash_final..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \micro_ucr_hash..
Creating internal representation of mux trees.
No muxes found in this module.
Running muxtree optimizer on module \mod_x_k..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \mux..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \nonce_gen..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \validity_reg..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \w_flops..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~59 debug messages>

3.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module $paramod\loop_limit\LOOP_LIMIT=5000.
Optimizing cells in module \abc_calculation.
Optimizing cells in module \area_sys.
Optimizing cells in module \compare.
Optimizing cells in module \couter.
Optimizing cells in module \hash_final.
Optimizing cells in module \micro_ucr_hash.
Optimizing cells in module \mod_x_k.
Optimizing cells in module \mux.
Optimizing cells in module \nonce_gen.
Optimizing cells in module \validity_reg.
Optimizing cells in module \w_flops.
Performed a total of 0 changes.

3.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\loop_limit\LOOP_LIMIT=5000'.
Finding identical cells in module `\abc_calculation'.
Finding identical cells in module `\area_sys'.
Finding identical cells in module `\compare'.
Finding identical cells in module `\couter'.
Finding identical cells in module `\hash_final'.
Finding identical cells in module `\micro_ucr_hash'.
Finding identical cells in module `\mod_x_k'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\nonce_gen'.
Finding identical cells in module `\validity_reg'.
Finding identical cells in module `\w_flops'.
Removed a total of 0 cells.

3.13.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\loop_limit\LOOP_LIMIT=5000..
Finding unused cells or wires in module \abc_calculation..
Finding unused cells or wires in module \area_sys..
Finding unused cells or wires in module \compare..
Finding unused cells or wires in module \couter..
Finding unused cells or wires in module \hash_final..
Finding unused cells or wires in module \micro_ucr_hash..
Finding unused cells or wires in module \mod_x_k..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \nonce_gen..
Finding unused cells or wires in module \validity_reg..
Finding unused cells or wires in module \w_flops..

3.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\loop_limit\LOOP_LIMIT=5000.
Optimizing module abc_calculation.
Optimizing module area_sys.
Optimizing module compare.
Optimizing module couter.
Optimizing module hash_final.
Optimizing module micro_ucr_hash.
Optimizing module mod_x_k.
Optimizing module mux.
Optimizing module nonce_gen.
Optimizing module validity_reg.
Optimizing module w_flops.

3.13.16. Finished OPT passes. (There is nothing left to do.)

3.14. Executing FSM pass (extract and optimize FSM).

3.14.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking $paramod\loop_limit\LOOP_LIMIT=5000.loop_limit as FSM state register:
Users of register don't seem to benefit from recoding.
Not marking compare.compare_var as FSM state register:
Register is connected to module port.
Users of register don't seem to benefit from recoding.
Not marking mod_x_k.k as FSM state register:
Register is connected to module port.
Users of register don't seem to benefit from recoding.

3.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\loop_limit\LOOP_LIMIT=5000..
Finding unused cells or wires in module \abc_calculation..
Finding unused cells or wires in module \area_sys..
Finding unused cells or wires in module \compare..
Finding unused cells or wires in module \couter..
Finding unused cells or wires in module \hash_final..
Finding unused cells or wires in module \micro_ucr_hash..
Finding unused cells or wires in module \mod_x_k..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \nonce_gen..
Finding unused cells or wires in module \validity_reg..
Finding unused cells or wires in module \w_flops..

3.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.15. Executing OPT pass (performing simple optimizations).

3.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\loop_limit\LOOP_LIMIT=5000.
Optimizing module abc_calculation.
Optimizing module area_sys.
Optimizing module compare.
Optimizing module couter.
Optimizing module hash_final.
Optimizing module micro_ucr_hash.
Optimizing module mod_x_k.
Optimizing module mux.
Optimizing module nonce_gen.
Optimizing module validity_reg.
Optimizing module w_flops.

3.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\loop_limit\LOOP_LIMIT=5000'.
Finding identical cells in module `\abc_calculation'.
Finding identical cells in module `\area_sys'.
Finding identical cells in module `\compare'.
Finding identical cells in module `\couter'.
Finding identical cells in module `\hash_final'.
Finding identical cells in module `\micro_ucr_hash'.
Finding identical cells in module `\mod_x_k'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\nonce_gen'.
Finding identical cells in module `\validity_reg'.
Finding identical cells in module `\w_flops'.
Removed a total of 0 cells.

3.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\loop_limit\LOOP_LIMIT=5000..
Finding unused cells or wires in module \abc_calculation..
Finding unused cells or wires in module \area_sys..
Finding unused cells or wires in module \compare..
Finding unused cells or wires in module \couter..
Finding unused cells or wires in module \hash_final..
Finding unused cells or wires in module \micro_ucr_hash..
Finding unused cells or wires in module \mod_x_k..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \nonce_gen..
Finding unused cells or wires in module \validity_reg..
Finding unused cells or wires in module \w_flops..

3.15.5. Finished fast OPT passes.

3.16. Executing MEMORY pass.

3.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

3.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\loop_limit\LOOP_LIMIT=5000..
Finding unused cells or wires in module \abc_calculation..
Finding unused cells or wires in module \area_sys..
Finding unused cells or wires in module \compare..
Finding unused cells or wires in module \couter..
Finding unused cells or wires in module \hash_final..
Finding unused cells or wires in module \micro_ucr_hash..
Finding unused cells or wires in module \mod_x_k..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \nonce_gen..
Finding unused cells or wires in module \validity_reg..
Finding unused cells or wires in module \w_flops..

3.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\loop_limit\LOOP_LIMIT=5000..
Finding unused cells or wires in module \abc_calculation..
Finding unused cells or wires in module \area_sys..
Finding unused cells or wires in module \compare..
Finding unused cells or wires in module \couter..
Finding unused cells or wires in module \hash_final..
Finding unused cells or wires in module \micro_ucr_hash..
Finding unused cells or wires in module \mod_x_k..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \nonce_gen..
Finding unused cells or wires in module \validity_reg..
Finding unused cells or wires in module \w_flops..

3.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

3.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\loop_limit\LOOP_LIMIT=5000..
Finding unused cells or wires in module \abc_calculation..
Finding unused cells or wires in module \area_sys..
Finding unused cells or wires in module \compare..
Finding unused cells or wires in module \couter..
Finding unused cells or wires in module \hash_final..
Finding unused cells or wires in module \micro_ucr_hash..
Finding unused cells or wires in module \mod_x_k..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \nonce_gen..
Finding unused cells or wires in module \validity_reg..
Finding unused cells or wires in module \w_flops..

3.18. Executing OPT pass (performing simple optimizations).

3.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\loop_limit\LOOP_LIMIT=5000.
<suppressed ~2 debug messages>
Optimizing module abc_calculation.
Optimizing module area_sys.
<suppressed ~16 debug messages>
Optimizing module compare.
Optimizing module couter.
Optimizing module hash_final.
Optimizing module micro_ucr_hash.
Optimizing module mod_x_k.
Optimizing module mux.
Optimizing module nonce_gen.
<suppressed ~1 debug messages>
Optimizing module validity_reg.
<suppressed ~2 debug messages>
Optimizing module w_flops.

3.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\loop_limit\LOOP_LIMIT=5000'.
Finding identical cells in module `\abc_calculation'.
Finding identical cells in module `\area_sys'.
Finding identical cells in module `\compare'.
Finding identical cells in module `\couter'.
Finding identical cells in module `\hash_final'.
Finding identical cells in module `\micro_ucr_hash'.
Finding identical cells in module `\mod_x_k'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\nonce_gen'.
Finding identical cells in module `\validity_reg'.
Finding identical cells in module `\w_flops'.
Removed a total of 0 cells.

3.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\loop_limit\LOOP_LIMIT=5000..
Finding unused cells or wires in module \abc_calculation..
Finding unused cells or wires in module \area_sys..
Finding unused cells or wires in module \compare..
Finding unused cells or wires in module \couter..
Finding unused cells or wires in module \hash_final..
Finding unused cells or wires in module \micro_ucr_hash..
Finding unused cells or wires in module \mod_x_k..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \nonce_gen..
Finding unused cells or wires in module \validity_reg..
Finding unused cells or wires in module \w_flops..
Removed 0 unused cells and 5 unused wires.
<suppressed ~3 debug messages>

3.18.5. Finished fast OPT passes.

3.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

3.20. Executing OPT pass (performing simple optimizations).

3.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\loop_limit\LOOP_LIMIT=5000.
Optimizing module abc_calculation.
Optimizing module area_sys.
Optimizing module compare.
Optimizing module couter.
Optimizing module hash_final.
Optimizing module micro_ucr_hash.
Optimizing module mod_x_k.
Optimizing module mux.
Optimizing module nonce_gen.
Optimizing module validity_reg.
Optimizing module w_flops.

3.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\loop_limit\LOOP_LIMIT=5000'.
Finding identical cells in module `\abc_calculation'.
Finding identical cells in module `\area_sys'.
Finding identical cells in module `\compare'.
Finding identical cells in module `\couter'.
Finding identical cells in module `\hash_final'.
Finding identical cells in module `\micro_ucr_hash'.
Finding identical cells in module `\mod_x_k'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\nonce_gen'.
Finding identical cells in module `\validity_reg'.
Finding identical cells in module `\w_flops'.
Removed a total of 0 cells.

3.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\loop_limit\LOOP_LIMIT=5000..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \abc_calculation..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \area_sys..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \compare..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \couter..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \hash_final..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \micro_ucr_hash..
Creating internal representation of mux trees.
No muxes found in this module.
Running muxtree optimizer on module \mod_x_k..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \mux..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \nonce_gen..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \validity_reg..
Creating internal representation of mux trees.
No muxes found in this module.
Running muxtree optimizer on module \w_flops..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~57 debug messages>

3.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module $paramod\loop_limit\LOOP_LIMIT=5000.
Optimizing cells in module \abc_calculation.
Optimizing cells in module \area_sys.
Optimizing cells in module \compare.
Consolidated identical input bits for $mux cell $procmux$929:
Old ports: A=3'100, B=3'010, Y=$procmux$929_Y
New ports: A=2'10, B=2'01, Y=$procmux$929_Y [2:1]
New connections: $procmux$929_Y [0] = 1'0
Optimizing cells in module \compare.
Optimizing cells in module \couter.
Optimizing cells in module \hash_final.
Optimizing cells in module \micro_ucr_hash.
Optimizing cells in module \mod_x_k.
Optimizing cells in module \mux.
Optimizing cells in module \nonce_gen.
Optimizing cells in module \validity_reg.
Optimizing cells in module \w_flops.
Performed a total of 1 changes.

3.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\loop_limit\LOOP_LIMIT=5000'.
Finding identical cells in module `\abc_calculation'.
Finding identical cells in module `\area_sys'.
Finding identical cells in module `\compare'.
Finding identical cells in module `\couter'.
Finding identical cells in module `\hash_final'.
Finding identical cells in module `\micro_ucr_hash'.
Finding identical cells in module `\mod_x_k'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\nonce_gen'.
Finding identical cells in module `\validity_reg'.
Finding identical cells in module `\w_flops'.
Removed a total of 0 cells.

3.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\loop_limit\LOOP_LIMIT=5000..
Finding unused cells or wires in module \abc_calculation..
Finding unused cells or wires in module \area_sys..
Finding unused cells or wires in module \compare..
Finding unused cells or wires in module \couter..
Finding unused cells or wires in module \hash_final..
Finding unused cells or wires in module \micro_ucr_hash..
Finding unused cells or wires in module \mod_x_k..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \nonce_gen..
Finding unused cells or wires in module \validity_reg..
Finding unused cells or wires in module \w_flops..

3.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\loop_limit\LOOP_LIMIT=5000.
Optimizing module abc_calculation.
Optimizing module area_sys.
Optimizing module compare.
Optimizing module couter.
Optimizing module hash_final.
Optimizing module micro_ucr_hash.
Optimizing module mod_x_k.
Optimizing module mux.
Optimizing module nonce_gen.
Optimizing module validity_reg.
Optimizing module w_flops.

3.20.9. Rerunning OPT passes. (Maybe there is more to do..)

3.20.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\loop_limit\LOOP_LIMIT=5000..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \abc_calculation..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \area_sys..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \compare..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \couter..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \hash_final..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \micro_ucr_hash..
Creating internal representation of mux trees.
No muxes found in this module.
Running muxtree optimizer on module \mod_x_k..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \mux..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \nonce_gen..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Running muxtree optimizer on module \validity_reg..
Creating internal representation of mux trees.
No muxes found in this module.
Running muxtree optimizer on module \w_flops..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~57 debug messages>

3.20.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module $paramod\loop_limit\LOOP_LIMIT=5000.
Optimizing cells in module \abc_calculation.
Optimizing cells in module \area_sys.
Optimizing cells in module \compare.
Optimizing cells in module \couter.
Optimizing cells in module \hash_final.
Optimizing cells in module \micro_ucr_hash.
Optimizing cells in module \mod_x_k.
Optimizing cells in module \mux.
Optimizing cells in module \nonce_gen.
Optimizing cells in module \validity_reg.
Optimizing cells in module \w_flops.
Performed a total of 0 changes.

3.20.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\loop_limit\LOOP_LIMIT=5000'.
Finding identical cells in module `\abc_calculation'.
Finding identical cells in module `\area_sys'.
Finding identical cells in module `\compare'.
Finding identical cells in module `\couter'.
Finding identical cells in module `\hash_final'.
Finding identical cells in module `\micro_ucr_hash'.
Finding identical cells in module `\mod_x_k'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\nonce_gen'.
Finding identical cells in module `\validity_reg'.
Finding identical cells in module `\w_flops'.
Removed a total of 0 cells.

3.20.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.20.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\loop_limit\LOOP_LIMIT=5000..
Finding unused cells or wires in module \abc_calculation..
Finding unused cells or wires in module \area_sys..
Finding unused cells or wires in module \compare..
Finding unused cells or wires in module \couter..
Finding unused cells or wires in module \hash_final..
Finding unused cells or wires in module \micro_ucr_hash..
Finding unused cells or wires in module \mod_x_k..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \nonce_gen..
Finding unused cells or wires in module \validity_reg..
Finding unused cells or wires in module \w_flops..

3.20.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\loop_limit\LOOP_LIMIT=5000.
Optimizing module abc_calculation.
Optimizing module area_sys.
Optimizing module compare.
Optimizing module couter.
Optimizing module hash_final.
Optimizing module micro_ucr_hash.
Optimizing module mod_x_k.
Optimizing module mux.
Optimizing module nonce_gen.
Optimizing module validity_reg.
Optimizing module w_flops.

3.20.16. Finished OPT passes. (There is nothing left to do.)

3.21. Executing TECHMAP pass (map to technology primitives).

3.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.21.2. Continuing TECHMAP pass.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=16\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=16 for cells of type $lcu.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=8 for cells of type $lcu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=5\Y_WIDTH=5 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=5\B_WIDTH=5\Y_WIDTH=5 for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=5 for cells of type $lcu.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=4\B_WIDTH=5\Y_WIDTH=5 for cells of type $alu.
Using extmapper simplemap for cells of type $logic_and.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
Using extmapper simplemap for cells of type $logic_or.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
No more expansions possible.
<suppressed ~2644 debug messages>

3.22. Executing OPT pass (performing simple optimizations).

3.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\loop_limit\LOOP_LIMIT=5000.
<suppressed ~94 debug messages>
Optimizing module abc_calculation.
<suppressed ~761 debug messages>
Optimizing module area_sys.
<suppressed ~48 debug messages>
Optimizing module compare.
<suppressed ~19 debug messages>
Optimizing module couter.
<suppressed ~36 debug messages>
Optimizing module hash_final.
<suppressed ~132 debug messages>
Optimizing module micro_ucr_hash.
Optimizing module mod_x_k.
<suppressed ~22 debug messages>
Optimizing module mux.
Optimizing module nonce_gen.
<suppressed ~229 debug messages>
Optimizing module validity_reg.
Optimizing module w_flops.
<suppressed ~176 debug messages>

3.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\loop_limit\LOOP_LIMIT=5000'.
Finding identical cells in module `\abc_calculation'.
<suppressed ~1227 debug messages>
Finding identical cells in module `\area_sys'.
<suppressed ~3 debug messages>
Finding identical cells in module `\compare'.
<suppressed ~33 debug messages>
Finding identical cells in module `\couter'.
<suppressed ~15 debug messages>
Finding identical cells in module `\hash_final'.
Finding identical cells in module `\micro_ucr_hash'.
Finding identical cells in module `\mod_x_k'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\nonce_gen'.
Finding identical cells in module `\validity_reg'.
Finding identical cells in module `\w_flops'.
<suppressed ~138 debug messages>
Removed a total of 472 cells.

3.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\loop_limit\LOOP_LIMIT=5000..
Finding unused cells or wires in module \abc_calculation..
Finding unused cells or wires in module \area_sys..
Finding unused cells or wires in module \compare..
Finding unused cells or wires in module \couter..
Finding unused cells or wires in module \hash_final..
Finding unused cells or wires in module \micro_ucr_hash..
Finding unused cells or wires in module \mod_x_k..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \nonce_gen..
Finding unused cells or wires in module \validity_reg..
Finding unused cells or wires in module \w_flops..
Removed 561 unused cells and 1885 unused wires.
<suppressed ~571 debug messages>

3.22.5. Finished fast OPT passes.

3.23. Executing ABC pass (technology mapping using ABC).

3.23.1. Extracting gate netlist of module `$paramod\loop_limit\LOOP_LIMIT=5000' to `<abc-temp-dir>/input.blif'..
Extracted 133 gates and 173 wires to a netlist network with 38 inputs and 33 outputs.

3.23.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC:
ABC: + read_blif <abc-temp-dir>/input.blif
ABC: + read_library <abc-temp-dir>/stdcells.genlib
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash
ABC: + dretime
ABC: + retime
ABC: + map
ABC: + write_blif <abc-temp-dir>/output.blif

3.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:            ANDNOT cells:       22
ABC RESULTS:              AOI3 cells:       11
ABC RESULTS:               MUX cells:        1
ABC RESULTS:              NAND cells:       10
ABC RESULTS:               NOT cells:       19
ABC RESULTS:              OAI3 cells:        6
ABC RESULTS:                OR cells:       41
ABC RESULTS:             ORNOT cells:        4
ABC RESULTS:              XNOR cells:        1
ABC RESULTS:               XOR cells:       14
ABC RESULTS:        internal signals:      102
ABC RESULTS:           input signals:       38
ABC RESULTS:          output signals:       33
Removing temp directory.

3.23.2. Extracting gate netlist of module `\abc_calculation' to `<abc-temp-dir>/input.blif'..
Extracted 1777 gates and 2097 wires to a netlist network with 318 inputs and 24 outputs.

3.23.2.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC:
ABC: + read_blif <abc-temp-dir>/input.blif
ABC: + read_library <abc-temp-dir>/stdcells.genlib
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash
ABC: + dretime
ABC: + retime
ABC: + map
ABC: + write_blif <abc-temp-dir>/output.blif

3.23.2.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       31
ABC RESULTS:            ANDNOT cells:      468
ABC RESULTS:              AOI3 cells:       54
ABC RESULTS:               MUX cells:      308
ABC RESULTS:              NAND cells:       35
ABC RESULTS:               NOR cells:       80
ABC RESULTS:               NOT cells:      163
ABC RESULTS:              OAI3 cells:       52
ABC RESULTS:                OR cells:       55
ABC RESULTS:             ORNOT cells:       57
ABC RESULTS:              XNOR cells:      132
ABC RESULTS:               XOR cells:      377
ABC RESULTS:        internal signals:     1755
ABC RESULTS:           input signals:      318
ABC RESULTS:          output signals:       24
Removing temp directory.

3.23.3. Extracting gate netlist of module `\area_sys' to `<abc-temp-dir>/input.blif'..
Extracted 235 gates and 320 wires to a netlist network with 83 inputs and 60 outputs.

3.23.3.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC:
ABC: + read_blif <abc-temp-dir>/input.blif
ABC: + read_library <abc-temp-dir>/stdcells.genlib
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash
ABC: + dretime
ABC: + retime
ABC: + map
ABC: + write_blif <abc-temp-dir>/output.blif

3.23.3.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:       62
ABC RESULTS:              AOI3 cells:        1
ABC RESULTS:               MUX cells:       96
ABC RESULTS:              NAND cells:        3
ABC RESULTS:               NOR cells:        8
ABC RESULTS:               NOT cells:       45
ABC RESULTS:              OAI3 cells:        9
ABC RESULTS:                OR cells:       10
ABC RESULTS:             ORNOT cells:       25
ABC RESULTS:               XOR cells:        7
ABC RESULTS:        internal signals:      177
ABC RESULTS:           input signals:       83
ABC RESULTS:          output signals:       60
Removing temp directory.

3.23.4. Extracting gate netlist of module `\compare' to `<abc-temp-dir>/input.blif'..
Extracted 103 gates and 140 wires to a netlist network with 36 inputs and 3 outputs.

3.23.4.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC:
ABC: + read_blif <abc-temp-dir>/input.blif
ABC: + read_library <abc-temp-dir>/stdcells.genlib
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash
ABC: + dretime
ABC: + retime
ABC: + map
ABC: + write_blif <abc-temp-dir>/output.blif

3.23.4.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:       26
ABC RESULTS:              AOI3 cells:        5
ABC RESULTS:               MUX cells:        3
ABC RESULTS:               NOR cells:        2
ABC RESULTS:               NOT cells:        1
ABC RESULTS:              OAI3 cells:        5
ABC RESULTS:                OR cells:        8
ABC RESULTS:             ORNOT cells:        8
ABC RESULTS:              XNOR cells:        2
ABC RESULTS:               XOR cells:       14
ABC RESULTS:        internal signals:      101
ABC RESULTS:           input signals:       36
ABC RESULTS:          output signals:        3
Removing temp directory.

3.23.5. Extracting gate netlist of module `\couter' to `<abc-temp-dir>/input.blif'..
Extracted 50 gates and 59 wires to a netlist network with 7 inputs and 5 outputs.

3.23.5.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC:
ABC: + read_blif <abc-temp-dir>/input.blif
ABC: + read_library <abc-temp-dir>/stdcells.genlib
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash
ABC: + dretime
ABC: + retime
ABC: + map
ABC: + write_blif <abc-temp-dir>/output.blif

3.23.5.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        3
ABC RESULTS:            ANDNOT cells:        7
ABC RESULTS:               MUX cells:        4
ABC RESULTS:              NAND cells:        2
ABC RESULTS:               NOT cells:        6
ABC RESULTS:              OAI4 cells:        1
ABC RESULTS:                OR cells:        5
ABC RESULTS:             ORNOT cells:        2
ABC RESULTS:              XNOR cells:        1
ABC RESULTS:               XOR cells:        4
ABC RESULTS:        internal signals:       47
ABC RESULTS:           input signals:        7
ABC RESULTS:          output signals:        5
Removing temp directory.

3.23.6. Extracting gate netlist of module `\hash_final' to `<abc-temp-dir>/input.blif'..
Extracted 166 gates and 223 wires to a netlist network with 55 inputs and 25 outputs.

3.23.6.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC:
ABC: + read_blif <abc-temp-dir>/input.blif
ABC: + read_library <abc-temp-dir>/stdcells.genlib
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash
ABC: + dretime
ABC: + retime
ABC: + map
ABC: + write_blif <abc-temp-dir>/output.blif

3.23.6.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        8
ABC RESULTS:            ANDNOT cells:       31
ABC RESULTS:              AOI3 cells:        2
ABC RESULTS:               MUX cells:       49
ABC RESULTS:              NAND cells:        6
ABC RESULTS:               NOR cells:        3
ABC RESULTS:               NOT cells:       43
ABC RESULTS:              OAI3 cells:        1
ABC RESULTS:                OR cells:        6
ABC RESULTS:             ORNOT cells:        3
ABC RESULTS:              XNOR cells:        2
ABC RESULTS:               XOR cells:       18
ABC RESULTS:        internal signals:      143
ABC RESULTS:           input signals:       55
ABC RESULTS:          output signals:       25
Removing temp directory.

3.23.7. Extracting gate netlist of module `\micro_ucr_hash' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

3.23.8. Extracting gate netlist of module `\mod_x_k' to `<abc-temp-dir>/input.blif'..
Extracted 99 gates and 155 wires to a netlist network with 54 inputs and 32 outputs.

3.23.8.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC:
ABC: + read_blif <abc-temp-dir>/input.blif
ABC: + read_library <abc-temp-dir>/stdcells.genlib
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash
ABC: + dretime
ABC: + retime
ABC: + map
ABC: + write_blif <abc-temp-dir>/output.blif

3.23.8.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       16
ABC RESULTS:            ANDNOT cells:       16
ABC RESULTS:              AOI3 cells:        6
ABC RESULTS:               MUX cells:       16
ABC RESULTS:              NAND cells:        5
ABC RESULTS:               NOR cells:       10
ABC RESULTS:               NOT cells:       11
ABC RESULTS:              OAI3 cells:        3
ABC RESULTS:                OR cells:        6
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:              XNOR cells:        8
ABC RESULTS:        internal signals:       69
ABC RESULTS:           input signals:       54
ABC RESULTS:          output signals:       32
Removing temp directory.

3.23.9. Extracting gate netlist of module `\mux' to `<abc-temp-dir>/input.blif'..
Extracted 24 gates and 51 wires to a netlist network with 25 inputs and 24 outputs.

3.23.9.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC:
ABC: + read_blif <abc-temp-dir>/input.blif
ABC: + read_library <abc-temp-dir>/stdcells.genlib
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash
ABC: + dretime
ABC: + retime
ABC: + map
ABC: + write_blif <abc-temp-dir>/output.blif

3.23.9.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       13
ABC RESULTS:             ORNOT cells:       11
ABC RESULTS:        internal signals:        2
ABC RESULTS:           input signals:       25
ABC RESULTS:          output signals:       24
Removing temp directory.

3.23.10. Extracting gate netlist of module `\nonce_gen' to `<abc-temp-dir>/input.blif'..
Extracted 587 gates and 674 wires to a netlist network with 85 inputs and 65 outputs.

3.23.10.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC:
ABC: + read_blif <abc-temp-dir>/input.blif
ABC: + read_library <abc-temp-dir>/stdcells.genlib
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash
ABC: + dretime
ABC: + retime
ABC: + map
ABC: + write_blif <abc-temp-dir>/output.blif

3.23.10.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        7
ABC RESULTS:            ANDNOT cells:       45
ABC RESULTS:              AOI3 cells:       16
ABC RESULTS:               MUX cells:      346
ABC RESULTS:              NAND cells:       32
ABC RESULTS:               NOR cells:        1
ABC RESULTS:               NOT cells:       50
ABC RESULTS:              OAI3 cells:       24
ABC RESULTS:                OR cells:       21
ABC RESULTS:             ORNOT cells:       13
ABC RESULTS:              XNOR cells:       25
ABC RESULTS:               XOR cells:       37
ABC RESULTS:        internal signals:      524
ABC RESULTS:           input signals:       85
ABC RESULTS:          output signals:       65
Removing temp directory.

3.23.11. Extracting gate netlist of module `\validity_reg' to `<abc-temp-dir>/input.blif'..
Extracted 7 gates and 14 wires to a netlist network with 7 inputs and 1 outputs.

3.23.11.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC:
ABC: + read_blif <abc-temp-dir>/input.blif
ABC: + read_library <abc-temp-dir>/stdcells.genlib
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash
ABC: + dretime
ABC: + retime
ABC: + map
ABC: + write_blif <abc-temp-dir>/output.blif

3.23.11.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:                OR cells:        2
ABC RESULTS:               XOR cells:        3
ABC RESULTS:        internal signals:        6
ABC RESULTS:           input signals:        7
ABC RESULTS:          output signals:        1
Removing temp directory.

3.23.12. Extracting gate netlist of module `\w_flops' to `<abc-temp-dir>/input.blif'..
Extracted 548 gates and 796 wires to a netlist network with 246 inputs and 128 outputs.

3.23.12.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC:
ABC: + read_blif <abc-temp-dir>/input.blif
ABC: + read_library <abc-temp-dir>/stdcells.genlib
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash
ABC: + dretime
ABC: + retime
ABC: + map
ABC: + write_blif <abc-temp-dir>/output.blif

3.23.12.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       49
ABC RESULTS:            ANDNOT cells:       87
ABC RESULTS:              AOI3 cells:        1
ABC RESULTS:               MUX cells:      240
ABC RESULTS:              NAND cells:       12
ABC RESULTS:               NOR cells:       25
ABC RESULTS:               NOT cells:       73
ABC RESULTS:                OR cells:       26
ABC RESULTS:             ORNOT cells:        5
ABC RESULTS:              XNOR cells:       48
ABC RESULTS:               XOR cells:       24
ABC RESULTS:        internal signals:      422
ABC RESULTS:           input signals:      246
ABC RESULTS:          output signals:      128
Removing temp directory.

3.24. Executing OPT pass (performing simple optimizations).

3.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\loop_limit\LOOP_LIMIT=5000.
Optimizing module abc_calculation.
<suppressed ~31 debug messages>
Optimizing module area_sys.
<suppressed ~59 debug messages>
Optimizing module compare.
<suppressed ~3 debug messages>
Optimizing module couter.
Optimizing module hash_final.
Optimizing module micro_ucr_hash.
Optimizing module mod_x_k.
Optimizing module mux.
Optimizing module nonce_gen.
<suppressed ~104 debug messages>
Optimizing module validity_reg.
Optimizing module w_flops.

3.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\loop_limit\LOOP_LIMIT=5000'.
Finding identical cells in module `\abc_calculation'.
Finding identical cells in module `\area_sys'.
Finding identical cells in module `\compare'.
Finding identical cells in module `\couter'.
<suppressed ~3 debug messages>
Finding identical cells in module `\hash_final'.
<suppressed ~3 debug messages>
Finding identical cells in module `\micro_ucr_hash'.
Finding identical cells in module `\mod_x_k'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\nonce_gen'.
Finding identical cells in module `\validity_reg'.
Finding identical cells in module `\w_flops'.
Removed a total of 2 cells.

3.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\loop_limit\LOOP_LIMIT=5000..
Finding unused cells or wires in module \abc_calculation..
Finding unused cells or wires in module \area_sys..
Finding unused cells or wires in module \compare..
Finding unused cells or wires in module \couter..
Finding unused cells or wires in module \hash_final..
Finding unused cells or wires in module \micro_ucr_hash..
Finding unused cells or wires in module \mod_x_k..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \nonce_gen..
Finding unused cells or wires in module \validity_reg..
Finding unused cells or wires in module \w_flops..
Removed 7 unused cells and 2429 unused wires.
<suppressed ~18 debug messages>

3.24.5. Finished fast OPT passes.

3.25. Executing HIERARCHY pass (managing design hierarchy).

3.25.1. Analyzing design hierarchy..
Top module:  \area_sys
Used module:     \compare
Used module:     $paramod\loop_limit\LOOP_LIMIT=5000
Used module:     \micro_ucr_hash
Used module:         \abc_calculation
Used module:         \couter
Used module:         \hash_final
Used module:         \mod_x_k
Used module:         \mux
Used module:         \w_flops
Used module:     \nonce_gen
Used module:     \validity_reg

3.25.2. Analyzing design hierarchy..
Top module:  \area_sys
Used module:     \compare
Used module:     $paramod\loop_limit\LOOP_LIMIT=5000
Used module:     \micro_ucr_hash
Used module:         \abc_calculation
Used module:         \couter
Used module:         \hash_final
Used module:         \mod_x_k
Used module:         \mux
Used module:         \w_flops
Used module:     \nonce_gen
Used module:     \validity_reg
Removed 0 unused modules.

3.26. Printing statistics.

=== $paramod\loop_limit\LOOP_LIMIT=5000 ===

Number of wires:                108
Number of wire bits:            185
Number of public wires:           8
Number of public wire bits:      55
Number of memories:               0
Number of memory bits:            0
Number of processes:              0
Number of cells:                164
$_ANDNOT_                      22
$_AND_                          1
$_AOI3_                        11
$_DFF_P_                       33
$_MUX_                          1
$_NAND_                        10
$_NOT_                         19
$_OAI3_                         6
$_ORNOT_                        4
$_OR_                          41
$_XNOR_                         1
$_XOR_                         14
compare                         1

=== abc_calculation ===

Number of wires:               1812
Number of wire bits:           2159
Number of public wires:          27
Number of public wire bits:     351
Number of memories:               0
Number of memory bits:            0
Number of processes:              0
Number of cells:               1832
$_ANDNOT_                     468
$_AND_                         31
$_AOI3_                        54
$_DFF_P_                       24
$_MUX_                        308
$_NAND_                        35
$_NOR_                         80
$_NOT_                        159
$_OAI3_                        52
$_ORNOT_                       57
$_OR_                          55
$_XNOR_                       132
$_XOR_                        377

=== area_sys ===

Number of wires:                264
Number of wire bits:            524
Number of public wires:          41
Number of public wire bits:     209
Number of memories:               0
Number of memory bits:            0
Number of processes:              0
Number of cells:                332
$_ANDNOT_                      62
$_AOI3_                         1
$_DFF_P_                       60
$_MUX_                         96
$_NAND_                         3
$_NOR_                          8
$_NOT_                         45
$_OAI3_                         9
$_ORNOT_                       25
$_OR_                          10
$_XOR_                          7
$paramod\loop_limit\LOOP_LIMIT=5000      1
compare                         2
micro_ucr_hash                  1
nonce_gen                       1
validity_reg                    1

=== compare ===

Number of wires:                 76
Number of wire bits:            110
Number of public wires:           5
Number of public wire bits:      37
Number of memories:               0
Number of memory bits:            0
Number of processes:              0
Number of cells:                 76
$_ANDNOT_                      26
$_AOI3_                         5
$_DFF_P_                        3
$_MUX_                          3
$_NOR_                          2
$_OAI3_                         5
$_ORNOT_                        8
$_OR_                           8
$_XNOR_                         2
$_XOR_                         14

=== couter ===

Number of wires:                 34
Number of wire bits:             42
Number of public wires:           4
Number of public wire bits:       8
Number of memories:               0
Number of memory bits:            0
Number of processes:              0
Number of cells:                 39
$_ANDNOT_                       7
$_AND_                          2
$_DFF_P_                        5
$_MUX_                          4
$_NAND_                         2
$_NOT_                          6
$_OAI4_                         1
$_ORNOT_                        2
$_OR_                           5
$_XNOR_                         1
$_XOR_                          4

=== hash_final ===

Number of wires:                158
Number of wire bits:            227
Number of public wires:           8
Number of public wire bits:      56
Number of memories:               0
Number of memory bits:            0
Number of processes:              0
Number of cells:                196
$_ANDNOT_                      31
$_AND_                          7
$_AOI3_                         2
$_DFF_P_                       25
$_MUX_                         49
$_NAND_                         6
$_NOR_                          3
$_NOT_                         43
$_OAI3_                         1
$_ORNOT_                        3
$_OR_                           6
$_XNOR_                         2
$_XOR_                         18

=== micro_ucr_hash ===

Number of wires:                 28
Number of wire bits:            352
Number of public wires:          28
Number of public wire bits:     352
Number of memories:               0
Number of memory bits:            0
Number of processes:              0
Number of cells:                  6
abc_calculation                 1
couter                          1
hash_final                      1
mod_x_k                         1
mux                             1
w_flops                         1

=== mod_x_k ===

Number of wires:                 78
Number of wire bits:            161
Number of public wires:           8
Number of public wire bits:      63
Number of memories:               0
Number of memory bits:            0
Number of processes:              0
Number of cells:                130
$_ANDNOT_                      16
$_AND_                         16
$_AOI3_                         6
$_DFF_P_                       32
$_MUX_                         16
$_NAND_                         5
$_NOR_                         10
$_NOT_                         11
$_OAI3_                         3
$_ORNOT_                        1
$_OR_                           6
$_XNOR_                         8

=== mux ===

Number of wires:                  8
Number of wire bits:             98
Number of public wires:           7
Number of public wire bits:      74
Number of memories:               0
Number of memory bits:            0
Number of processes:              0
Number of cells:                 48
$_AND_                         13
$_DFF_P_                       24
$_ORNOT_                       11

=== nonce_gen ===

Number of wires:                574
Number of wire bits:            701
Number of public wires:          15
Number of public wire bits:      86
Number of memories:               0
Number of memory bits:            0
Number of processes:              0
Number of cells:                680
$_ANDNOT_                      45
$_AND_                          7
$_AOI3_                        16
$_DFF_P_                       65
$_MUX_                        346
$_NAND_                        32
$_NOR_                          1
$_NOT_                         48
$_OAI3_                        24
$_ORNOT_                       13
$_OR_                          21
$_XNOR_                        25
$_XOR_                         37

=== validity_reg ===

Number of wires:                 11
Number of wire bits:             15
Number of public wires:           5
Number of public wire bits:       9
Number of memories:               0
Number of memory bits:            0
Number of processes:              0
Number of cells:                  7
$_ANDNOT_                       1
$_DFF_P_                        1
$_OR_                           2
$_XOR_                          3

=== w_flops ===

Number of wires:                484
Number of wire bits:            981
Number of public wires:          21
Number of public wire bits:     391
Number of memories:               0
Number of memory bits:            0
Number of processes:              0
Number of cells:                718
$_ANDNOT_                      87
$_AND_                         49
$_AOI3_                         1
$_DFF_P_                      128
$_MUX_                        240
$_NAND_                        12
$_NOR_                         25
$_NOT_                         73
$_ORNOT_                        5
$_OR_                          26
$_XNOR_                        48
$_XOR_                         24

=== design hierarchy ===

area_sys                          1
$paramod\loop_limit\LOOP_LIMIT=5000      1
compare                       1
compare                         2
micro_ucr_hash                  1
abc_calculation               1
couter                        1
hash_final                    1
mod_x_k                       1
mux                           1
w_flops                       1
nonce_gen                       1
validity_reg                    1

Number of wires:               3787
Number of wire bits:           5775
Number of public wires:         187
Number of public wire bits:    1765
Number of memories:               0
Number of memory bits:            0
Number of processes:              0
Number of cells:               4367
$_ANDNOT_                     817
$_AND_                        126
$_AOI3_                       106
$_DFF_P_                      406
$_MUX_                       1069
$_NAND_                       105
$_NOR_                        133
$_NOT_                        404
$_OAI3_                       110
$_OAI4_                         1
$_ORNOT_                      145
$_OR_                         196
$_XNOR_                       223
$_XOR_                        526

3.27. Executing CHECK pass (checking for obvious problems).
checking module $paramod\loop_limit\LOOP_LIMIT=5000..
checking module abc_calculation..
checking module area_sys..
checking module compare..
checking module couter..
checking module hash_final..
checking module micro_ucr_hash..
checking module mod_x_k..
checking module mux..
checking module nonce_gen..
checking module validity_reg..
checking module w_flops..
found and reported 0 problems.

4. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
cell DFFNEGX1 (noninv, pins=3, area=96.00) is a direct match for cell type $_DFF_N_.
cell DFFPOSX1 (noninv, pins=3, area=96.00) is a direct match for cell type $_DFF_P_.
cell DFFSR (noninv, pins=5, area=176.00) is a direct match for cell type $_DFFSR_PNN_.
create mapping for $_DFFSR_PPN_ from mapping for $_DFFSR_PNN_.
create mapping for $_DFFSR_PNP_ from mapping for $_DFFSR_PNN_.
create mapping for $_DFFSR_PPP_ from mapping for $_DFFSR_PNP_.
create mapping for $_DFFSR_NNN_ from mapping for $_DFFSR_PNN_.
create mapping for $_DFFSR_NPN_ from mapping for $_DFFSR_NNN_.
create mapping for $_DFFSR_NNP_ from mapping for $_DFFSR_NNN_.
create mapping for $_DFFSR_NPP_ from mapping for $_DFFSR_NNP_.
create mapping for $_DFF_NN0_ from mapping for $_DFFSR_NNN_.
create mapping for $_DFF_NN1_ from mapping for $_DFFSR_NNN_.
create mapping for $_DFF_NP0_ from mapping for $_DFFSR_NPP_.
create mapping for $_DFF_NP1_ from mapping for $_DFFSR_NPP_.
create mapping for $_DFF_PN0_ from mapping for $_DFFSR_PNN_.
create mapping for $_DFF_PN1_ from mapping for $_DFFSR_PNN_.
create mapping for $_DFF_PP0_ from mapping for $_DFFSR_PPP_.
create mapping for $_DFF_PP1_ from mapping for $_DFFSR_PPP_.
final dff cell mappings:
DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
DFFSR _DFF_NN0_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( 1));
DFFSR _DFF_NN1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S( R));
DFFSR _DFF_NP0_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( 1));
DFFSR _DFF_NP1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S(~R));
DFFSR _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( 1));
DFFSR _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S( R));
DFFSR _DFF_PP0_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( 1));
DFFSR _DFF_PP1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S(~R));
DFFSR _DFFSR_NNN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( S));
DFFSR _DFFSR_NNP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( S));
DFFSR _DFFSR_NPN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S(~S));
DFFSR _DFFSR_NPP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S(~S));
DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
DFFSR _DFFSR_PNP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( S));
DFFSR _DFFSR_PPN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S(~S));
DFFSR _DFFSR_PPP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S(~S));
Mapping DFF cells in module `$paramod\loop_limit\LOOP_LIMIT=5000':
mapped 33 $_DFF_P_ cells to \DFFPOSX1 cells.
Mapping DFF cells in module `\abc_calculation':
mapped 24 $_DFF_P_ cells to \DFFPOSX1 cells.
Mapping DFF cells in module `\area_sys':
mapped 60 $_DFF_P_ cells to \DFFPOSX1 cells.
Mapping DFF cells in module `\compare':
mapped 3 $_DFF_P_ cells to \DFFPOSX1 cells.
Mapping DFF cells in module `\couter':
mapped 5 $_DFF_P_ cells to \DFFPOSX1 cells.
Mapping DFF cells in module `\hash_final':
mapped 25 $_DFF_P_ cells to \DFFPOSX1 cells.
Mapping DFF cells in module `\micro_ucr_hash':
Mapping DFF cells in module `\mod_x_k':
mapped 32 $_DFF_P_ cells to \DFFPOSX1 cells.
Mapping DFF cells in module `\mux':
mapped 24 $_DFF_P_ cells to \DFFPOSX1 cells.
Mapping DFF cells in module `\nonce_gen':
mapped 65 $_DFF_P_ cells to \DFFPOSX1 cells.
Mapping DFF cells in module `\validity_reg':
mapped 1 $_DFF_P_ cells to \DFFPOSX1 cells.
Mapping DFF cells in module `\w_flops':
mapped 128 $_DFF_P_ cells to \DFFPOSX1 cells.

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\loop_limit\LOOP_LIMIT=5000.
Optimizing module abc_calculation.
Optimizing module area_sys.
Optimizing module compare.
Optimizing module couter.
Optimizing module hash_final.
Optimizing module micro_ucr_hash.
Optimizing module mod_x_k.
Optimizing module mux.
Optimizing module nonce_gen.
Optimizing module validity_reg.
Optimizing module w_flops.

5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\loop_limit\LOOP_LIMIT=5000'.
Finding identical cells in module `\abc_calculation'.
Finding identical cells in module `\area_sys'.
Finding identical cells in module `\compare'.
Finding identical cells in module `\couter'.
Finding identical cells in module `\hash_final'.
Finding identical cells in module `\micro_ucr_hash'.
Finding identical cells in module `\mod_x_k'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\nonce_gen'.
Finding identical cells in module `\validity_reg'.
Finding identical cells in module `\w_flops'.
Removed a total of 0 cells.

5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\loop_limit\LOOP_LIMIT=5000..
Creating internal representation of mux trees.
No muxes found in this module.
Running muxtree optimizer on module \abc_calculation..
Creating internal representation of mux trees.
No muxes found in this module.
Running muxtree optimizer on module \area_sys..
Creating internal representation of mux trees.
No muxes found in this module.
Running muxtree optimizer on module \compare..
Creating internal representation of mux trees.
No muxes found in this module.
Running muxtree optimizer on module \couter..
Creating internal representation of mux trees.
No muxes found in this module.
Running muxtree optimizer on module \hash_final..
Creating internal representation of mux trees.
No muxes found in this module.
Running muxtree optimizer on module \micro_ucr_hash..
Creating internal representation of mux trees.
No muxes found in this module.
Running muxtree optimizer on module \mod_x_k..
Creating internal representation of mux trees.
No muxes found in this module.
Running muxtree optimizer on module \mux..
Creating internal representation of mux trees.
No muxes found in this module.
Running muxtree optimizer on module \nonce_gen..
Creating internal representation of mux trees.
No muxes found in this module.
Running muxtree optimizer on module \validity_reg..
Creating internal representation of mux trees.
No muxes found in this module.
Running muxtree optimizer on module \w_flops..
Creating internal representation of mux trees.
No muxes found in this module.
Removed 0 multiplexer ports.

5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module $paramod\loop_limit\LOOP_LIMIT=5000.
Optimizing cells in module \abc_calculation.
Optimizing cells in module \area_sys.
Optimizing cells in module \compare.
Optimizing cells in module \couter.
Optimizing cells in module \hash_final.
Optimizing cells in module \micro_ucr_hash.
Optimizing cells in module \mod_x_k.
Optimizing cells in module \mux.
Optimizing cells in module \nonce_gen.
Optimizing cells in module \validity_reg.
Optimizing cells in module \w_flops.
Performed a total of 0 changes.

5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\loop_limit\LOOP_LIMIT=5000'.
Finding identical cells in module `\abc_calculation'.
Finding identical cells in module `\area_sys'.
Finding identical cells in module `\compare'.
Finding identical cells in module `\couter'.
Finding identical cells in module `\hash_final'.
Finding identical cells in module `\micro_ucr_hash'.
Finding identical cells in module `\mod_x_k'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\nonce_gen'.
Finding identical cells in module `\validity_reg'.
Finding identical cells in module `\w_flops'.
Removed a total of 0 cells.

5.6. Executing OPT_RMDFF pass (remove dff with constant values).

5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\loop_limit\LOOP_LIMIT=5000..
Finding unused cells or wires in module \abc_calculation..
Finding unused cells or wires in module \area_sys..
Finding unused cells or wires in module \compare..
Finding unused cells or wires in module \couter..
Finding unused cells or wires in module \hash_final..
Finding unused cells or wires in module \micro_ucr_hash..
Finding unused cells or wires in module \mod_x_k..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \nonce_gen..
Finding unused cells or wires in module \validity_reg..
Finding unused cells or wires in module \w_flops..

5.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\loop_limit\LOOP_LIMIT=5000.
Optimizing module abc_calculation.
Optimizing module area_sys.
Optimizing module compare.
Optimizing module couter.
Optimizing module hash_final.
Optimizing module micro_ucr_hash.
Optimizing module mod_x_k.
Optimizing module mux.
Optimizing module nonce_gen.
Optimizing module validity_reg.
Optimizing module w_flops.

5.9. Finished OPT passes. (There is nothing left to do.)

6. Executing ABC pass (technology mapping using ABC).

6.1. Extracting gate netlist of module `$paramod\loop_limit\LOOP_LIMIT=5000' to `<abc-temp-dir>/input.blif'..
Extracted 130 gates and 168 wires to a netlist network with 38 inputs and 33 outputs.

6.1.1. Executing ABC.
Running ABC command: /usr/lib/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC:
ABC: + read_blif <abc-temp-dir>/input.blif
ABC: + read_lib -w /usr/share/qflow/tech/osu018/osu018_stdcells.lib
ABC: Parsing finished successfully.  Parsing time =     0.02 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.03 sec
ABC: Memory =    0.36 MB. Time =     0.03 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash
ABC: + scorr
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig
ABC: + retime
ABC: + strash
ABC: + dch -f
ABC: + map -M 1
ABC: + write_blif <abc-temp-dir>/output.blif

6.1.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        1
ABC RESULTS:           AOI21X1 cells:        7
ABC RESULTS:             INVX1 cells:       26
ABC RESULTS:           NAND2X1 cells:        8
ABC RESULTS:           NAND3X1 cells:        4
ABC RESULTS:            NOR2X1 cells:       27
ABC RESULTS:            NOR3X1 cells:        3
ABC RESULTS:           OAI21X1 cells:       14
ABC RESULTS:             OR2X2 cells:        6
ABC RESULTS:        internal signals:       97
ABC RESULTS:           input signals:       38
ABC RESULTS:          output signals:       33
Removing temp directory.

6.2. Extracting gate netlist of module `\abc_calculation' to `<abc-temp-dir>/input.blif'..
Extracted 1808 gates and 2126 wires to a netlist network with 318 inputs and 24 outputs.

6.2.1. Executing ABC.
Running ABC command: /usr/lib/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC:
ABC: + read_blif <abc-temp-dir>/input.blif
ABC: + read_lib -w /usr/share/qflow/tech/osu018/osu018_stdcells.lib
ABC: Parsing finished successfully.  Parsing time =     0.02 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.03 sec
ABC: Memory =    0.36 MB. Time =     0.03 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash
ABC: + scorr
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig
ABC: + retime
ABC: + strash
ABC: + dch -f
ABC: + map -M 1
ABC: + write_blif <abc-temp-dir>/output.blif

6.2.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:       82
ABC RESULTS:           AOI21X1 cells:      280
ABC RESULTS:           AOI22X1 cells:        7
ABC RESULTS:             INVX1 cells:      319
ABC RESULTS:            MUX2X1 cells:        7
ABC RESULTS:           NAND2X1 cells:      247
ABC RESULTS:           NAND3X1 cells:       44
ABC RESULTS:            NOR2X1 cells:      337
ABC RESULTS:            NOR3X1 cells:        8
ABC RESULTS:           OAI21X1 cells:      474
ABC RESULTS:           OAI22X1 cells:        9
ABC RESULTS:             OR2X2 cells:       21
ABC RESULTS:           XNOR2X1 cells:      167
ABC RESULTS:            XOR2X1 cells:       70
ABC RESULTS:          _const0_ cells:        4
ABC RESULTS:        internal signals:     1784
ABC RESULTS:           input signals:      318
ABC RESULTS:          output signals:       24
Removing temp directory.

6.3. Extracting gate netlist of module `\area_sys' to `<abc-temp-dir>/input.blif'..
Extracted 266 gates and 349 wires to a netlist network with 83 inputs and 60 outputs.

6.3.1. Executing ABC.
Running ABC command: /usr/lib/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC:
ABC: + read_blif <abc-temp-dir>/input.blif
ABC: + read_lib -w /usr/share/qflow/tech/osu018/osu018_stdcells.lib
ABC: Parsing finished successfully.  Parsing time =     0.02 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.03 sec
ABC: Memory =    0.36 MB. Time =     0.03 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash
ABC: + scorr
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig
ABC: + retime
ABC: + strash
ABC: + dch -f
ABC: + map -M 1
ABC: + write_blif <abc-temp-dir>/output.blif

6.3.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        3
ABC RESULTS:           AOI21X1 cells:       31
ABC RESULTS:           AOI22X1 cells:        4
ABC RESULTS:             INVX1 cells:       46
ABC RESULTS:           NAND2X1 cells:       11
ABC RESULTS:           NAND3X1 cells:       20
ABC RESULTS:            NOR2X1 cells:       36
ABC RESULTS:            NOR3X1 cells:        1
ABC RESULTS:           OAI21X1 cells:       31
ABC RESULTS:             OR2X2 cells:        2
ABC RESULTS:        internal signals:      206
ABC RESULTS:           input signals:       83
ABC RESULTS:          output signals:       60
Removing temp directory.

6.4. Extracting gate netlist of module `\compare' to `<abc-temp-dir>/input.blif'..
Extracted 73 gates and 109 wires to a netlist network with 36 inputs and 3 outputs.

6.4.1. Executing ABC.
Running ABC command: /usr/lib/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC:
ABC: + read_blif <abc-temp-dir>/input.blif
ABC: + read_lib -w /usr/share/qflow/tech/osu018/osu018_stdcells.lib
ABC: Parsing finished successfully.  Parsing time =     0.02 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.03 sec
ABC: Memory =    0.36 MB. Time =     0.03 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash
ABC: + scorr
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig
ABC: + retime
ABC: + strash
ABC: + dch -f
ABC: + map -M 1
ABC: + write_blif <abc-temp-dir>/output.blif

6.4.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        3
ABC RESULTS:           AOI21X1 cells:        9
ABC RESULTS:           AOI22X1 cells:        6
ABC RESULTS:             INVX1 cells:       30
ABC RESULTS:           NAND2X1 cells:       20
ABC RESULTS:           NAND3X1 cells:        4
ABC RESULTS:            NOR2X1 cells:       17
ABC RESULTS:           OAI21X1 cells:       13
ABC RESULTS:           OAI22X1 cells:        2
ABC RESULTS:             OR2X2 cells:        3
ABC RESULTS:           XNOR2X1 cells:        6
ABC RESULTS:            XOR2X1 cells:        3
ABC RESULTS:        internal signals:       70
ABC RESULTS:           input signals:       36
ABC RESULTS:          output signals:        3
Removing temp directory.

6.5. Extracting gate netlist of module `\couter' to `<abc-temp-dir>/input.blif'..
Extracted 34 gates and 41 wires to a netlist network with 7 inputs and 5 outputs.

6.5.1. Executing ABC.
Running ABC command: /usr/lib/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC:
ABC: + read_blif <abc-temp-dir>/input.blif
ABC: + read_lib -w /usr/share/qflow/tech/osu018/osu018_stdcells.lib
ABC: Parsing finished successfully.  Parsing time =     0.02 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.03 sec
ABC: Memory =    0.36 MB. Time =     0.03 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash
ABC: + scorr
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig
ABC: + retime
ABC: + strash
ABC: + dch -f
ABC: + map -M 1
ABC: + write_blif <abc-temp-dir>/output.blif

6.5.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        3
ABC RESULTS:           AOI21X1 cells:        4
ABC RESULTS:             INVX1 cells:        3
ABC RESULTS:           NAND2X1 cells:        4
ABC RESULTS:           NAND3X1 cells:        2
ABC RESULTS:            NOR3X1 cells:        2
ABC RESULTS:             OR2X2 cells:        1
ABC RESULTS:           XNOR2X1 cells:        1
ABC RESULTS:        internal signals:       29
ABC RESULTS:           input signals:        7
ABC RESULTS:          output signals:        5
Removing temp directory.

6.6. Extracting gate netlist of module `\hash_final' to `<abc-temp-dir>/input.blif'..
Extracted 171 gates and 226 wires to a netlist network with 55 inputs and 25 outputs.

6.6.1. Executing ABC.
Running ABC command: /usr/lib/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC:
ABC: + read_blif <abc-temp-dir>/input.blif
ABC: + read_lib -w /usr/share/qflow/tech/osu018/osu018_stdcells.lib
ABC: Parsing finished successfully.  Parsing time =     0.02 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.03 sec
ABC: Memory =    0.36 MB. Time =     0.03 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash
ABC: + scorr
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig
ABC: + retime
ABC: + strash
ABC: + dch -f
ABC: + map -M 1
ABC: + write_blif <abc-temp-dir>/output.blif

6.6.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        1
ABC RESULTS:           AOI21X1 cells:       39
ABC RESULTS:             INVX1 cells:       30
ABC RESULTS:            MUX2X1 cells:        3
ABC RESULTS:           NAND2X1 cells:       21
ABC RESULTS:           NAND3X1 cells:        6
ABC RESULTS:            NOR2X1 cells:       15
ABC RESULTS:            NOR3X1 cells:        1
ABC RESULTS:           OAI21X1 cells:       36
ABC RESULTS:             OR2X2 cells:        1
ABC RESULTS:           XNOR2X1 cells:        6
ABC RESULTS:        internal signals:      146
ABC RESULTS:           input signals:       55
ABC RESULTS:          output signals:       25
Removing temp directory.

6.7. Extracting gate netlist of module `\micro_ucr_hash' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

6.8. Extracting gate netlist of module `\mod_x_k' to `<abc-temp-dir>/input.blif'..
Extracted 98 gates and 152 wires to a netlist network with 54 inputs and 32 outputs.

6.8.1. Executing ABC.
Running ABC command: /usr/lib/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC:
ABC: + read_blif <abc-temp-dir>/input.blif
ABC: + read_lib -w /usr/share/qflow/tech/osu018/osu018_stdcells.lib
ABC: Parsing finished successfully.  Parsing time =     0.02 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.03 sec
ABC: Memory =    0.36 MB. Time =     0.03 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash
ABC: + scorr
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig
ABC: + retime
ABC: + strash
ABC: + dch -f
ABC: + map -M 1
ABC: + write_blif <abc-temp-dir>/output.blif

6.8.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:       24
ABC RESULTS:           AOI21X1 cells:       10
ABC RESULTS:             BUFX2 cells:        2
ABC RESULTS:             INVX1 cells:        1
ABC RESULTS:           NAND2X1 cells:        1
ABC RESULTS:            NOR2X1 cells:        3
ABC RESULTS:           OAI21X1 cells:        9
ABC RESULTS:             OR2X2 cells:        2
ABC RESULTS:          _const0_ cells:        3
ABC RESULTS:        internal signals:       66
ABC RESULTS:           input signals:       54
ABC RESULTS:          output signals:       32
Removing temp directory.

6.9. Extracting gate netlist of module `\mux' to `<abc-temp-dir>/input.blif'..
Extracted 24 gates and 49 wires to a netlist network with 25 inputs and 24 outputs.

6.9.1. Executing ABC.
Running ABC command: /usr/lib/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC:
ABC: + read_blif <abc-temp-dir>/input.blif
ABC: + read_lib -w /usr/share/qflow/tech/osu018/osu018_stdcells.lib
ABC: Parsing finished successfully.  Parsing time =     0.02 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.03 sec
ABC: Memory =    0.36 MB. Time =     0.03 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash
ABC: + scorr
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig
ABC: + retime
ABC: + strash
ABC: + dch -f
ABC: + map -M 1
ABC: + write_blif <abc-temp-dir>/output.blif

6.9.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:       13
ABC RESULTS:             INVX1 cells:       11
ABC RESULTS:           NAND2X1 cells:       11
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       25
ABC RESULTS:          output signals:       24
Removing temp directory.

6.10. Extracting gate netlist of module `\nonce_gen' to `<abc-temp-dir>/input.blif'..
Extracted 615 gates and 700 wires to a netlist network with 85 inputs and 65 outputs.

6.10.1. Executing ABC.
Running ABC command: /usr/lib/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC:
ABC: + read_blif <abc-temp-dir>/input.blif
ABC: + read_lib -w /usr/share/qflow/tech/osu018/osu018_stdcells.lib
ABC: Parsing finished successfully.  Parsing time =     0.02 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.03 sec
ABC: Memory =    0.36 MB. Time =     0.03 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash
ABC: + scorr
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig
ABC: + retime
ABC: + strash
ABC: + dch -f
ABC: + map -M 1
ABC: + write_blif <abc-temp-dir>/output.blif

6.10.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:       24
ABC RESULTS:           AOI21X1 cells:       96
ABC RESULTS:           AOI22X1 cells:        4
ABC RESULTS:             INVX1 cells:      108
ABC RESULTS:            MUX2X1 cells:       11
ABC RESULTS:           NAND2X1 cells:       82
ABC RESULTS:           NAND3X1 cells:       11
ABC RESULTS:            NOR2X1 cells:       87
ABC RESULTS:            NOR3X1 cells:        7
ABC RESULTS:           OAI21X1 cells:      124
ABC RESULTS:           OAI22X1 cells:       12
ABC RESULTS:             OR2X2 cells:        8
ABC RESULTS:           XNOR2X1 cells:       15
ABC RESULTS:            XOR2X1 cells:        8
ABC RESULTS:        internal signals:      550
ABC RESULTS:           input signals:       85
ABC RESULTS:          output signals:       65
Removing temp directory.

6.11. Extracting gate netlist of module `\validity_reg' to `<abc-temp-dir>/input.blif'..
Extracted 6 gates and 13 wires to a netlist network with 7 inputs and 1 outputs.

6.11.1. Executing ABC.
Running ABC command: /usr/lib/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC:
ABC: + read_blif <abc-temp-dir>/input.blif
ABC: + read_lib -w /usr/share/qflow/tech/osu018/osu018_stdcells.lib
ABC: Parsing finished successfully.  Parsing time =     0.02 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.03 sec
ABC: Memory =    0.36 MB. Time =     0.03 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash
ABC: + scorr
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig
ABC: + retime
ABC: + strash
ABC: + dch -f
ABC: + map -M 1
ABC: + write_blif <abc-temp-dir>/output.blif

6.11.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        1
ABC RESULTS:             INVX1 cells:        4
ABC RESULTS:            NOR2X1 cells:        1
ABC RESULTS:            NOR3X1 cells:        1
ABC RESULTS:           OAI21X1 cells:        1
ABC RESULTS:           OAI22X1 cells:        2
ABC RESULTS:        internal signals:        5
ABC RESULTS:           input signals:        7
ABC RESULTS:          output signals:        1
Removing temp directory.

6.12. Extracting gate netlist of module `\w_flops' to `<abc-temp-dir>/input.blif'..
Extracted 590 gates and 836 wires to a netlist network with 246 inputs and 128 outputs.

6.12.1. Executing ABC.
Running ABC command: /usr/lib/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC:
ABC: + read_blif <abc-temp-dir>/input.blif
ABC: + read_lib -w /usr/share/qflow/tech/osu018/osu018_stdcells.lib
ABC: Parsing finished successfully.  Parsing time =     0.02 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.03 sec
ABC: Memory =    0.36 MB. Time =     0.03 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash
ABC: + scorr
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig
ABC: + retime
ABC: + strash
ABC: + dch -f
ABC: + map -M 1
ABC: + write_blif <abc-temp-dir>/output.blif

6.12.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        8
ABC RESULTS:           AOI21X1 cells:      120
ABC RESULTS:             INVX1 cells:       49
ABC RESULTS:           NAND2X1 cells:      118
ABC RESULTS:           NAND3X1 cells:       14
ABC RESULTS:            NOR2X1 cells:       47
ABC RESULTS:            NOR3X1 cells:        8
ABC RESULTS:           OAI21X1 cells:      121
ABC RESULTS:            XOR2X1 cells:       64
ABC RESULTS:        internal signals:      462
ABC RESULTS:           input signals:      246
ABC RESULTS:          output signals:      128
Removing temp directory.

7. Executing FLATTEN pass (flatten design).
Using template $paramod\loop_limit\LOOP_LIMIT=5000 for cells of type $paramod\loop_limit\LOOP_LIMIT=5000.
Using template nonce_gen for cells of type nonce_gen.
Using template micro_ucr_hash for cells of type micro_ucr_hash.
Using template compare for cells of type compare.
Using template validity_reg for cells of type validity_reg.
Using template couter for cells of type couter.
Using template hash_final for cells of type hash_final.
Using template mux for cells of type mux.
Using template mod_x_k for cells of type mod_x_k.
Using template w_flops for cells of type w_flops.
Using template abc_calculation for cells of type abc_calculation.
<suppressed ~13 debug messages>
No more expansions possible.
Deleting now unused module $paramod\loop_limit\LOOP_LIMIT=5000.
Deleting now unused module abc_calculation.
Deleting now unused module compare.
Deleting now unused module couter.
Deleting now unused module hash_final.
Deleting now unused module micro_ucr_hash.
Deleting now unused module mod_x_k.
Deleting now unused module mux.
Deleting now unused module nonce_gen.
Deleting now unused module validity_reg.
Deleting now unused module w_flops.

8. Executing SETUNDEF pass (replace undef values with defined constants).
Removed 3291 unused cells and 7904 unused wires.

9. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Don't map input port area_sys.block0: Missing option -inpad.
Don't map input port area_sys.block1: Missing option -inpad.
Don't map input port area_sys.block10: Missing option -inpad.
Don't map input port area_sys.block11: Missing option -inpad.
Don't map input port area_sys.block2: Missing option -inpad.
Don't map input port area_sys.block3: Missing option -inpad.
Don't map input port area_sys.block4: Missing option -inpad.
Don't map input port area_sys.block5: Missing option -inpad.
Don't map input port area_sys.block6: Missing option -inpad.
Don't map input port area_sys.block7: Missing option -inpad.
Don't map input port area_sys.block8: Missing option -inpad.
Don't map input port area_sys.block9: Missing option -inpad.
Don't map input port area_sys.clk: Missing option -inpad.
Mapping port area_sys.finish using BUFX2.
Mapping port area_sys.nonce0 using BUFX2.
Mapping port area_sys.nonce1 using BUFX2.
Mapping port area_sys.nonce2 using BUFX2.
Mapping port area_sys.nonce3 using BUFX2.
Don't map input port area_sys.reset: Missing option -inpad.
Don't map input port area_sys.start: Missing option -inpad.
Don't map input port area_sys.target: Missing option -inpad.

10. Executing OPT pass (performing simple optimizations).

10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module area_sys.

10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\area_sys'.
Removed a total of 0 cells.

10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \area_sys..
Creating internal representation of mux trees.
No muxes found in this module.
Removed 0 multiplexer ports.

10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \area_sys.
Performed a total of 0 changes.

10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\area_sys'.
Removed a total of 0 cells.

10.6. Executing OPT_RMDFF pass (remove dff with constant values).

10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \area_sys..

10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module area_sys.

10.9. Finished OPT passes. (There is nothing left to do.)

11. Executing BLIF backend.

12. Printing statistics.

=== area_sys ===

Number of wires:               1044
Number of wire bits:           1856
Number of public wires:        1044
Number of public wire bits:    1856
Number of memories:               0
Number of memory bits:            0
Number of processes:              0
Number of cells:               1271
AND2X2                         37
AOI21X1                       112
AOI22X1                        23
BUFX2                          34
DFFPOSX1                      147
INVX1                         252
MUX2X1                          7
NAND2X1                       152
NAND3X1                        49
NOR2X1                        209
NOR3X1                          8
OAI21X1                       164
OAI22X1                        11
OR2X2                          23
XNOR2X1                        26
XOR2X1                         17

Warnings: 26 unique messages, 26 total
End of script. Logfile hash: 6b8dc3f5a0
CPU: user 25.55s system 0.22s, MEM: 43.38 MB total, 35.32 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 20% 22x opt_clean (5 sec), 17% 21x opt_merge (4 sec), ...
Running getpowerground to determine power and ground net names.
getpowerground.tcl  /usr/share/qflow/tech/osu018/osu018_stdcells.lef
Cleaning up output syntax
ypostproc.tcl area_sys_mapped.blif area_sys /usr/share/qflow/tech/osu018/osu018.sh vdd gnd
Yosys syntax postprocessing
Cleaning up blif file syntax
Running blifFanout (iterative)
Each iteration calls:
blifFanout -l 100 -c 20 -I area_sys_nofanout -s nullstring -p /usr/share/qflow/tech/osu018/osu018_stdcells.lib -b BUFX2,CLKBUF1 -i A,A -o Y,Y tmp.blif area_sys.blif
gates resized: 92
gates resized: 51
gates resized: 0
Generating RTL verilog and SPICE netlist file in directory
/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/synthesis
Files:
Verilog: /home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/synthesis/area_sys.rtl.v
Verilog: /home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/synthesis/area_sys.rtlnopwr.v
Verilog: /home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/synthesis/area_sys.rtlbb.v
Spice:   /home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/synthesis/area_sys.spc
Running blif2Verilog.
Running blif2BSpice.
Running spi2xspice.py
spi2xspice.py "/usr/share/qflow/tech/osu018/osu018_stdcells.lib" -io_time=1n -time=100p -idelay=10p -odelay=100p -cload=500f area_sys.spc area_sys.xspice

--------------------------------
Qflow project setup
--------------------------------

Technology set to osu018 from existing qflow_vars.sh file
Regenerating files for existing project area_sys
Qrouter detail maze router version 1.4.71.T
LEF Read, Line 191: NOTE:  Old format VIARULE ignored.
Reading LEF data from file /usr/share/qflow/tech/osu018/osu018_stdcells.lef.
LEF Read, Line 192: NOTE:  Old format VIARULE ignored.
LEF file:  Defines site core (ignored)
LEF Read, Line 196: NOTE:  Old format VIARULE ignored.
LEF read: Processed 2941 lines.
LEF Read, Line 197: NOTE:  Old format VIARULE ignored.
LEF Read: encountered 0 errors and 20 warnings total.
LEF Read, Line 207: NOTE:  Old format VIARULE ignored.
Vertical route layer at non-minimum pitch 1.6.  Using smaller pitch 0.8, will route on 1-of-2 tracks for layer metal6.
LEF Read, Line 208: NOTE:  Old format VIARULE ignored.
Running blif2cel to generate input files for graywolf
LEF Read, Line 212: NOTE:  Old format VIARULE ignored.
blif2cel.tcl --blif /home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/synthesis/area_sys.blif  --lef  /usr/share/qflow/tech/osu018/osu018_stdcells.lef --cel /home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/layout/area_sys.cel
LEF Read, Line 213: NOTE:  Old format VIARULE ignored.
LEF Read, Line 223: NOTE:  Old format VIARULE ignored.
LEF Read, Line 224: NOTE:  Old format VIARULE ignored.
LEF Read, Line 228: NOTE:  Old format VIARULE ignored.
LEF Read, Line 229: NOTE:  Old format VIARULE ignored.
LEF Read, Line 239: NOTE:  Old format VIARULE ignored.
LEF Read, Line 240: NOTE:  Old format VIARULE ignored.
LEF Read, Line 244: NOTE:  Old format VIARULE ignored.
LEF Read, Line 245: NOTE:  Old format VIARULE ignored.
LEF Read, Line 255: NOTE:  Old format VIARULE ignored.
LEF Read, Line 256: NOTE:  Old format VIARULE ignored.
LEF Read, Line 260: NOTE:  Old format VIARULE ignored.
LEF Read, Line 261: NOTE:  Old format VIARULE ignored.
No area_sys.cel1 file found for project. . . no partial blockages to apply to layout.
No area_sys.cel2 file found for project. . . continuing without pin placement hints
Running GrayWolf placement
graywolf  area_sys
Running getfillcell to determine cell to use for fill.
getfillcell.tcl area_sys  /usr/share/qflow/tech/osu018/osu018_stdcells.lef FILL
Using cell FILL for fill
Running place2def to translate graywolf output to DEF format.
place2def.tcl area_sys FILL
Running addspacers to generate power stripes and align cell right edge
addspacers.tcl  -stripe 2.0 50.0 PG area_sys  /usr/share/qflow/tech/osu018/osu018_stdcells.lef FILL
Running arrangepins to adjust pin positions for optimal routing.
arrangepins.tcl  area_sys
Reading info file area_sys.info. . .
Reading DEF file area_sys.def. . .
Warning: pin block2[7] has no bounding box.
Warning: pin block9[2] has no bounding box.
Warning: pin block4[5] has no bounding box.
Warning: pin block11[2] has no bounding box.
Warning: pin block6[5] has no bounding box.
Warning: pin block5[7] has no bounding box.
Warning: pin block1[7] has no bounding box.
Warning: pin block8[1] has no bounding box.
Warning: pin block0[7] has no bounding box.
Warning: pin block7[5] has no bounding box.
Warning: pin block1[5] has no bounding box.
Warning: pin block6[1] has no bounding box.
Warning: pin block2[4] has no bounding box.
Warning: pin block6[6] has no bounding box.
Warning: pin block7[6] has no bounding box.
Warning: pin block11[3] has no bounding box.
Warning: pin block3[2] has no bounding box.
Warning: pin block9[7] has no bounding box.
Warning: pin block5[6] has no bounding box.
Warning: pin block6[2] has no bounding box.
Warning: pin block1[6] has no bounding box.
Warning: pin block8[3] has no bounding box.
Warning: pin block10[5] has no bounding box.
Warning: pin block9[6] has no bounding box.
Warning: pin block5[4] has no bounding box.
Warning: pin block0[6] has no bounding box.
Warning: pin block9[5] has no bounding box.
Warning: pin block8[5] has no bounding box.
Warning: pin block10[6] has no bounding box.
Warning: pin block3[3] has no bounding box.
Warning: pin block7[7] has no bounding box.
Warning: pin block7[1] has no bounding box.
Warning: pin block8[2] has no bounding box.
Warning: pin block4[7] has no bounding box.
Warning: pin block5[1] has no bounding box.
Warning: pin block4[6] has no bounding box.
Warning: pin block0[5] has no bounding box.
Warning: pin block3[7] has no bounding box.
Warning: pin block1[3] has no bounding box.
Warning: pin block6[4] has no bounding box.
Warning: pin block4[4] has no bounding box.
Warning: pin block7[3] has no bounding box.
Warning: pin block0[4] has no bounding box.
Warning: pin block7[4] has no bounding box.
Warning: pin block8[6] has no bounding box.
Warning: pin block2[6] has no bounding box.
Warning: pin block0[3] has no bounding box.
Warning: pin block8[7] has no bounding box.
Warning: pin block7[2] has no bounding box.
Warning: pin block4[3] has no bounding box.
Warning: pin block0[1] has no bounding box.
Warning: pin block5[3] has no bounding box.
Warning: pin block11[7] has no bounding box.
Warning: pin block10[4] has no bounding box.
Warning: pin block4[1] has no bounding box.
Warning: pin block10[7] has no bounding box.
Warning: pin block10[2] has no bounding box.
Warning: pin block6[3] has no bounding box.
Warning: pin block3[1] has no bounding box.
Warning: pin block9[4] has no bounding box.
Warning: pin block2[5] has no bounding box.
Warning: pin block3[6] has no bounding box.
Warning: pin block6[7] has no bounding box.
Warning: pin block3[4] has no bounding box.
Warning: pin block10[3] has no bounding box.
Warning: pin block9[1] has no bounding box.
Warning: pin block1[2] has no bounding box.
Warning: pin block10[1] has no bounding box.
Warning: pin block2[1] has no bounding box.
Warning: pin block5[2] has no bounding box.
Warning: pin block0[2] has no bounding box.
Warning: pin block9[3] has no bounding box.
Warning: pin block3[5] has no bounding box.
Warning: pin block2[3] has no bounding box.
Warning: pin block11[6] has no bounding box.
Warning: pin block4[2] has no bounding box.
Warning: pin block1[4] has no bounding box.
Warning: pin block11[1] has no bounding box.
Warning: pin block11[5] has no bounding box.
Warning: pin block11[4] has no bounding box.
Warning: pin block2[2] has no bounding box.
Warning: pin block5[5] has no bounding box.
Warning: pin block8[4] has no bounding box.
Warning: pin block1[1] has no bounding box.
Recalculating pin positions
Writing DEF file area_sys_mod.def. . .
Done with arrangepins.tcl
blifanno.tcl /home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/synthesis/area_sys.blif area_sys.def /home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/synthesis/area_sys_anno.blif
Generating RTL verilog and SPICE netlist file in directory
/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/synthesis
Files:
Verilog: /home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/synthesis/area_sys.rtl.v
Verilog: /home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/synthesis/area_sys.rtlnopwr.v
Verilog: /home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/synthesis/area_sys.rtlbb.v
Spice:   /home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/synthesis/area_sys.spc
Copying area_sys.rtl.v, area_sys.rtlnopwr.v, and area_sys.rtlbb.v to backups
Running blif2Verilog.

--------------------------------
Qflow project setup
--------------------------------

Technology set to osu018 from existing qflow_vars.sh file
Regenerating files for existing project area_sys

--------------------------------
Qflow project setup
--------------------------------

Technology set to osu018 from existing qflow_vars.sh file
Regenerating files for existing project area_sys
Running qrouter 1.4.71.T
qrouter -noc  -s area_sys.cfg
*** Running stage1 routing with defaults
Nets remaining: 1400
Nets remaining: 1300
Finished routing net fail
Nets remaining: 1200
Nets remaining: 1100
Nets remaining: 1000
Nets remaining: 900
Nets remaining: 800
Nets remaining: 700
Nets remaining: 600
Nets remaining: 500
Nets remaining: 400
Nets remaining: 300
Nets remaining: 200
Progress: Stage 1 total routes completed: 2748
Failed net routes: 15
*** Running stage2 routing with options mask 10, effort 10
Nets remaining: 10
Nets remaining: 9
Nets remaining: 8
Nets remaining: 8
Nets remaining: 8
Nets remaining: 7
Nets remaining: 6
Nets remaining: 7
Nets remaining: 6
Nets remaining: 6
Nets remaining: 6
Nets remaining: 5
Nets remaining: 4
Nets remaining: 3
Nets remaining: 3
Nets remaining: 3
Nets remaining: 2
Nets remaining: 1
Progress: Stage 2 total routes completed: 3052
No failed routes!
*** Running stage3 routing with defaults, 1st round
Nets remaining: 1400
Nets remaining: 1300
Finished routing net fail
Nets remaining: 1200
Nets remaining: 1100
Nets remaining: 1000
Nets remaining: 900
Nets remaining: 800
Nets remaining: 700
Nets remaining: 600
Nets remaining: 300
Nets remaining: 200
Progress: Stage 3 total routes completed: 5486
No failed routes!
*** Running stage3 routing with defaults, 2nd round
Nets remaining: 1400
Nets remaining: 1300
Finished routing net fail
Nets remaining: 1200
Nets remaining: 1100
Nets remaining: 1000
Nets remaining: 900
Nets remaining: 800
Nets remaining: 700
Nets remaining: 600
Nets remaining: 300
Nets remaining: 200
Progress: Stage 3 total routes completed: 7905
No failed routes!
*** Writing DEF file area_sys_route.def
Final: No failed routes!
*** Writing RC file area_sys_route.rc
Running annotate.tcl antenna.out /home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/synthesis/area_sys.rtlnopwr.v
/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/synthesis/area_sys.spc /home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/synthesis/area_sys.rtlnopwr.anno.v
/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/synthesis/area_sys.anno.spc  /usr/share/qflow/tech/osu018/osu018_stdcells.sp /home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/synthesis/area_sys_powerground
Running annotate.tcl
found cell FILL pinlist vdd gnd

--------------------------------
Qflow project setup
--------------------------------

Technology set to osu018 from existing qflow_vars.sh file
Regenerating files for existing project area_sys
Converting qrouter output to vesta delay format
rc2dly: malloc.c:2379: sysmalloc: Assertion `(old_top == initial_top (av) && old_size == 0) || ((unsigned long) (old_size) >= MINSIZE && prev_inuse (old_top) && ((unsigned long) old_end & (pagesize - 1)) == 0)' failed.
Running rc2dly -r area_sys.rc -l /usr/share/qflow/tech/osu018/osu018_stdcells.lib -d area_sys.dly
Converting qrouter output to SPEF delay format
Abort (core dumped)
Running rc2dly -D : -r area_sys.rc -l /usr/share/qflow/tech/osu018/osu018_stdcells.lib -d area_sys.spef
rc2dly: malloc.c:2379: sysmalloc: Assertion `(old_top == initial_top (av) && old_size == 0) || ((unsigned long) (old_size) >= MINSIZE && prev_inuse (old_top) && ((unsigned long) old_end & (pagesize - 1)) == 0)' failed.
Converting qrouter output to SDF delay format
Abort (core dumped)
Running rc2dly -r area_sys.rc -l /usr/share/qflow/tech/osu018/osu018_stdcells.lib -d area_sys.sdf
rc2dly: malloc.c:2379: sysmalloc: Assertion `(old_top == initial_top (av) && old_size == 0) || ((unsigned long) (old_size) >= MINSIZE && prev_inuse (old_top) && ((unsigned long) old_end & (pagesize - 1)) == 0)' failed.

--------------------------------
Qflow project setup
--------------------------------

Technology set to osu018 from existing qflow_vars.sh file
Regenerating files for existing project area_sys
Running magic 8.2.157
magic -dnull -noconsole  migrate_area_sys.tcl

Magic 8.2 revision 157 - Compiled on Thu, 07 Nov 2019 21:14:45 +0100.
Starting magic under Tcl interpreter
Using the terminal as the console.
Using NULL graphics device.
Processing system .magicrc file
Input style lambda=0.10(p): scaleFactor=10, multiplier=1
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Loading "migrate_area_sys.tcl" from command line.
Root cell box:
width x height  (   llx,  lly  ), (   urx,  ury  )

microns:    0.00 x 0.00    (  0.00,  0.00 ), (  0.00,  0.00 )
lambda:        0 x 0       (     0,  0    ), (     0,  0    )
Reading LEF data from file /usr/share/qflow/tech/osu018/osu018_stdcells.lef.
This action cannot be undone.
LEF read, Line 16 (Message): Unknown keyword "OBS" in LEF file; ignoring.
LEF read, Line 17 (Message): Unknown keyword "PIN" in LEF file; ignoring.
LEF read, Line 309 (Message): Defines site core (ignored)
Moving label "CLK" from metal1 to m2contact in cell DFFNEGX1.
Moving label "CLK" from metal1 to m2contact in cell DFFNEGX1.
Moving label "A" from metal1 to m2contact in cell XNOR2X1.
LEF read: Processed 2941 lines.
Reading DEF data from file area_sys.def.
This action cannot be undone.
Processed 5 vias total.
Processed 1508 subcell instances total.
Processed 150 pins total.
Processed 1456 nets total.
DEF read, Line 17645 (Warning): Number of nets read (240) does not match the number declared (241).
DEF read: Processed 17646 lines.
DEF Read: encountered 1 warning total.
Generating LEF output area_sys.lef for cell area_sys:
Diagnostic:  Write LEF header for cell area_sys
Diagnostic:  Writing LEF output for cell area_sys
Diagnostic:  Scale value is 0.100000
Extracting MUX2X1 into MUX2X1.ext:
Completed 100%
Extracting INVX8 into INVX8.ext:
Completed 100%
Extracting INVX4 into INVX4.ext:
Completed 100%
Extracting CLKBUF1 into CLKBUF1.ext:
Completed 100%
Extracting NOR3X1 into NOR3X1.ext:
Completed 100%
Extracting XNOR2X1 into XNOR2X1.ext:
Completed 100%
Extracting XOR2X1 into XOR2X1.ext:
Completed 100%
Extracting BUFX4 into BUFX4.ext:
Completed 100%
Extracting INVX2 into INVX2.ext:
Completed 100%
Extracting NAND3X1 into NAND3X1.ext:
Completed 100%
Extracting AND2X2 into AND2X2.ext:
Completed 100%
Extracting AOI21X1 into AOI21X1.ext:
Completed 100%
Extracting OAI21X1 into OAI21X1.ext:
Completed 100%
Extracting FILL into FILL.ext:
Completed 100%
Extracting DFFPOSX1 into DFFPOSX1.ext:
Completed 100%
Extracting BUFX2 into BUFX2.ext:
Completed 100%
Extracting OR2X2 into OR2X2.ext:
Completed 100%
Extracting NOR2X1 into NOR2X1.ext:
Completed 100%
Extracting AOI22X1 into AOI22X1.ext:
Completed 100%
Extracting NAND2X1 into NAND2X1.ext:
Completed 100%
Extracting OAI22X1 into OAI22X1.ext:
Completed 100%
Extracting INVX1 into INVX1.ext:
Completed 100%
Extracting area_sys into area_sys.ext:
Completed 5%
Completed 10%
Completed 15%
Completed 20%
Completed 25%
Completed 30%
Completed 36%
Completed 41%
Completed 46%
Completed 51%
Completed 56%
Completed 61%
Completed 66%
Completed 71%
Completed 76%
Completed 81%
Completed 86%
Completed 91%
Completed 96%
Completed 100%
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.
No port connection on port 0;  need to resolve.


--------------------------------
Qflow project setup
--------------------------------

Technology set to osu018 from existing qflow_vars.sh file
Regenerating files for existing project area_sys
Running magic 8.2.157
magic -dnull -noconsole  /home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/layout/run_drc_area_sys.tcl

Magic 8.2 revision 157 - Compiled on Thu, 07 Nov 2019 21:14:45 +0100.
Starting magic under Tcl interpreter
Using the terminal as the console.
Using NULL graphics device.
Processing system .magicrc file
Input style lambda=0.10(p): scaleFactor=10, multiplier=1
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Loading "/home/marlon/Escritorio/Protecto_part2_micro/src/perf_sys/layout/run_drc_area_sys.tcl" from command line.
Reading LEF data from file /usr/share/qflow/tech/osu018/osu018_stdcells.lef.
This action cannot be undone.
LEF read, Line 16 (Message): Unknown keyword "OBS" in LEF file; ignoring.
LEF read, Line 17 (Message): Unknown keyword "PIN" in LEF file; ignoring.
LEF read, Line 309 (Message): Defines site core (ignored)
Moving label "CLK" from metal1 to m2contact in cell DFFNEGX1.
Moving label "CLK" from metal1 to m2contact in cell DFFNEGX1.
Moving label "A" from metal1 to m2contact in cell XNOR2X1.
LEF read: Processed 2941 lines.
area_sys: 10000 rects
Processing timestamp mismatches: FILL, INVX1, BUFX2, AOI21X1, NAND2X1, NOR2X1, OAI22X1, MUX2X1, DFFPOSX1, INVX2, OR2X2, XNOR2X1, XOR2X1, AND2X2, AOI22X1, OAI21X1, CLKBUF1, BUFX4, INVX4, NAND3X1, NOR3X1, INVX8.
Errors in synthesis flow, qflow status = 1
